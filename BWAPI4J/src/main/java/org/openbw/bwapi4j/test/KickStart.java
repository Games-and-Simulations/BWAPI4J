package org.openbw.bwapi4j.test;
import java.lang.reflect.*;
import java.util.*;
import java.util.stream.*;
import org.openbw.bwapi4j.util.*;
import org.openbw.bwapi4j.type.*;

public class KickStart {
    public void injectValues() throws Exception {
        initializeUnitType();
        initializeWeaponType();
        initializeUpgradeType();
        initializeTechType();
    }
    private void initializeUnitType() throws Exception {
        initializeUnitType_Terran_Marine();
        initializeUnitType_Terran_Ghost();
        initializeUnitType_Terran_Vulture();
        initializeUnitType_Terran_Goliath();
        initializeUnitType_Terran_Goliath_Turret();
        initializeUnitType_Terran_Siege_Tank_Tank_Mode();
        initializeUnitType_Terran_Siege_Tank_Tank_Mode_Turret();
        initializeUnitType_Terran_SCV();
        initializeUnitType_Terran_Wraith();
        initializeUnitType_Terran_Science_Vessel();
        initializeUnitType_Hero_Gui_Montag();
        initializeUnitType_Terran_Dropship();
        initializeUnitType_Terran_Battlecruiser();
        initializeUnitType_Terran_Vulture_Spider_Mine();
        initializeUnitType_Terran_Nuclear_Missile();
        initializeUnitType_Terran_Civilian();
        initializeUnitType_Hero_Sarah_Kerrigan();
        initializeUnitType_Hero_Alan_Schezar();
        initializeUnitType_Hero_Alan_Schezar_Turret();
        initializeUnitType_Hero_Jim_Raynor_Vulture();
        initializeUnitType_Hero_Jim_Raynor_Marine();
        initializeUnitType_Hero_Tom_Kazansky();
        initializeUnitType_Hero_Magellan();
        initializeUnitType_Hero_Edmund_Duke_Tank_Mode();
        initializeUnitType_Hero_Edmund_Duke_Tank_Mode_Turret();
        initializeUnitType_Hero_Edmund_Duke_Siege_Mode();
        initializeUnitType_Hero_Edmund_Duke_Siege_Mode_Turret();
        initializeUnitType_Hero_Arcturus_Mengsk();
        initializeUnitType_Hero_Hyperion();
        initializeUnitType_Hero_Norad_II();
        initializeUnitType_Terran_Siege_Tank_Siege_Mode();
        initializeUnitType_Terran_Siege_Tank_Siege_Mode_Turret();
        initializeUnitType_Terran_Firebat();
        initializeUnitType_Spell_Scanner_Sweep();
        initializeUnitType_Terran_Medic();
        initializeUnitType_Zerg_Larva();
        initializeUnitType_Zerg_Egg();
        initializeUnitType_Zerg_Zergling();
        initializeUnitType_Zerg_Hydralisk();
        initializeUnitType_Zerg_Ultralisk();
        initializeUnitType_Zerg_Broodling();
        initializeUnitType_Zerg_Drone();
        initializeUnitType_Zerg_Overlord();
        initializeUnitType_Zerg_Mutalisk();
        initializeUnitType_Zerg_Guardian();
        initializeUnitType_Zerg_Queen();
        initializeUnitType_Zerg_Defiler();
        initializeUnitType_Zerg_Scourge();
        initializeUnitType_Hero_Torrasque();
        initializeUnitType_Hero_Matriarch();
        initializeUnitType_Zerg_Infested_Terran();
        initializeUnitType_Hero_Infested_Kerrigan();
        initializeUnitType_Hero_Unclean_One();
        initializeUnitType_Hero_Hunter_Killer();
        initializeUnitType_Hero_Devouring_One();
        initializeUnitType_Hero_Kukulza_Mutalisk();
        initializeUnitType_Hero_Kukulza_Guardian();
        initializeUnitType_Hero_Yggdrasill();
        initializeUnitType_Terran_Valkyrie();
        initializeUnitType_Zerg_Cocoon();
        initializeUnitType_Protoss_Corsair();
        initializeUnitType_Protoss_Dark_Templar();
        initializeUnitType_Zerg_Devourer();
        initializeUnitType_Protoss_Dark_Archon();
        initializeUnitType_Protoss_Probe();
        initializeUnitType_Protoss_Zealot();
        initializeUnitType_Protoss_Dragoon();
        initializeUnitType_Protoss_High_Templar();
        initializeUnitType_Protoss_Archon();
        initializeUnitType_Protoss_Shuttle();
        initializeUnitType_Protoss_Scout();
        initializeUnitType_Protoss_Arbiter();
        initializeUnitType_Protoss_Carrier();
        initializeUnitType_Protoss_Interceptor();
        initializeUnitType_Hero_Dark_Templar();
        initializeUnitType_Hero_Zeratul();
        initializeUnitType_Hero_Tassadar_Zeratul_Archon();
        initializeUnitType_Hero_Fenix_Zealot();
        initializeUnitType_Hero_Fenix_Dragoon();
        initializeUnitType_Hero_Tassadar();
        initializeUnitType_Hero_Mojo();
        initializeUnitType_Hero_Warbringer();
        initializeUnitType_Hero_Gantrithor();
        initializeUnitType_Protoss_Reaver();
        initializeUnitType_Protoss_Observer();
        initializeUnitType_Protoss_Scarab();
        initializeUnitType_Hero_Danimoth();
        initializeUnitType_Hero_Aldaris();
        initializeUnitType_Hero_Artanis();
        initializeUnitType_Critter_Rhynadon();
        initializeUnitType_Critter_Bengalaas();
        initializeUnitType_Special_Cargo_Ship();
        initializeUnitType_Special_Mercenary_Gunship();
        initializeUnitType_Critter_Scantid();
        initializeUnitType_Critter_Kakaru();
        initializeUnitType_Critter_Ragnasaur();
        initializeUnitType_Critter_Ursadon();
        initializeUnitType_Zerg_Lurker_Egg();
        initializeUnitType_Hero_Raszagal();
        initializeUnitType_Hero_Samir_Duran();
        initializeUnitType_Hero_Alexei_Stukov();
        initializeUnitType_Special_Map_Revealer();
        initializeUnitType_Hero_Gerard_DuGalle();
        initializeUnitType_Zerg_Lurker();
        initializeUnitType_Hero_Infested_Duran();
        initializeUnitType_Spell_Disruption_Web();
        initializeUnitType_Terran_Command_Center();
        initializeUnitType_Terran_Comsat_Station();
        initializeUnitType_Terran_Nuclear_Silo();
        initializeUnitType_Terran_Supply_Depot();
        initializeUnitType_Terran_Refinery();
        initializeUnitType_Terran_Barracks();
        initializeUnitType_Terran_Academy();
        initializeUnitType_Terran_Factory();
        initializeUnitType_Terran_Starport();
        initializeUnitType_Terran_Control_Tower();
        initializeUnitType_Terran_Science_Facility();
        initializeUnitType_Terran_Covert_Ops();
        initializeUnitType_Terran_Physics_Lab();
        initializeUnitType_Unused_Terran1();
        initializeUnitType_Terran_Machine_Shop();
        initializeUnitType_Unused_Terran2();
        initializeUnitType_Terran_Engineering_Bay();
        initializeUnitType_Terran_Armory();
        initializeUnitType_Terran_Missile_Turret();
        initializeUnitType_Terran_Bunker();
        initializeUnitType_Special_Crashed_Norad_II();
        initializeUnitType_Special_Ion_Cannon();
        initializeUnitType_Powerup_Uraj_Crystal();
        initializeUnitType_Powerup_Khalis_Crystal();
        initializeUnitType_Zerg_Infested_Command_Center();
        initializeUnitType_Zerg_Hatchery();
        initializeUnitType_Zerg_Lair();
        initializeUnitType_Zerg_Hive();
        initializeUnitType_Zerg_Nydus_Canal();
        initializeUnitType_Zerg_Hydralisk_Den();
        initializeUnitType_Zerg_Defiler_Mound();
        initializeUnitType_Zerg_Greater_Spire();
        initializeUnitType_Zerg_Queens_Nest();
        initializeUnitType_Zerg_Evolution_Chamber();
        initializeUnitType_Zerg_Ultralisk_Cavern();
        initializeUnitType_Zerg_Spire();
        initializeUnitType_Zerg_Spawning_Pool();
        initializeUnitType_Zerg_Creep_Colony();
        initializeUnitType_Zerg_Spore_Colony();
        initializeUnitType_Unused_Zerg1();
        initializeUnitType_Zerg_Sunken_Colony();
        initializeUnitType_Special_Overmind_With_Shell();
        initializeUnitType_Special_Overmind();
        initializeUnitType_Zerg_Extractor();
        initializeUnitType_Special_Mature_Chrysalis();
        initializeUnitType_Special_Cerebrate();
        initializeUnitType_Special_Cerebrate_Daggoth();
        initializeUnitType_Unused_Zerg2();
        initializeUnitType_Protoss_Nexus();
        initializeUnitType_Protoss_Robotics_Facility();
        initializeUnitType_Protoss_Pylon();
        initializeUnitType_Protoss_Assimilator();
        initializeUnitType_Unused_Protoss1();
        initializeUnitType_Protoss_Observatory();
        initializeUnitType_Protoss_Gateway();
        initializeUnitType_Unused_Protoss2();
        initializeUnitType_Protoss_Photon_Cannon();
        initializeUnitType_Protoss_Citadel_of_Adun();
        initializeUnitType_Protoss_Cybernetics_Core();
        initializeUnitType_Protoss_Templar_Archives();
        initializeUnitType_Protoss_Forge();
        initializeUnitType_Protoss_Stargate();
        initializeUnitType_Special_Stasis_Cell_Prison();
        initializeUnitType_Protoss_Fleet_Beacon();
        initializeUnitType_Protoss_Arbiter_Tribunal();
        initializeUnitType_Protoss_Robotics_Support_Bay();
        initializeUnitType_Protoss_Shield_Battery();
        initializeUnitType_Special_Khaydarin_Crystal_Form();
        initializeUnitType_Special_Protoss_Temple();
        initializeUnitType_Special_XelNaga_Temple();
        initializeUnitType_Resource_Mineral_Field();
        initializeUnitType_Resource_Mineral_Field_Type_2();
        initializeUnitType_Resource_Mineral_Field_Type_3();
        initializeUnitType_Unused_Cave();
        initializeUnitType_Unused_Cave_In();
        initializeUnitType_Unused_Cantina();
        initializeUnitType_Unused_Mining_Platform();
        initializeUnitType_Unused_Independant_Command_Center();
        initializeUnitType_Special_Independant_Starport();
        initializeUnitType_Unused_Independant_Jump_Gate();
        initializeUnitType_Unused_Ruins();
        initializeUnitType_Unused_Khaydarin_Crystal_Formation();
        initializeUnitType_Resource_Vespene_Geyser();
        initializeUnitType_Special_Warp_Gate();
        initializeUnitType_Special_Psi_Disrupter();
        initializeUnitType_Unused_Zerg_Marker();
        initializeUnitType_Unused_Terran_Marker();
        initializeUnitType_Unused_Protoss_Marker();
        initializeUnitType_Special_Zerg_Beacon();
        initializeUnitType_Special_Terran_Beacon();
        initializeUnitType_Special_Protoss_Beacon();
        initializeUnitType_Special_Zerg_Flag_Beacon();
        initializeUnitType_Special_Terran_Flag_Beacon();
        initializeUnitType_Special_Protoss_Flag_Beacon();
        initializeUnitType_Special_Power_Generator();
        initializeUnitType_Special_Overmind_Cocoon();
        initializeUnitType_Spell_Dark_Swarm();
        initializeUnitType_Special_Floor_Missile_Trap();
        initializeUnitType_Special_Floor_Hatch();
        initializeUnitType_Special_Upper_Level_Door();
        initializeUnitType_Special_Right_Upper_Level_Door();
        initializeUnitType_Special_Pit_Door();
        initializeUnitType_Special_Right_Pit_Door();
        initializeUnitType_Special_Floor_Gun_Trap();
        initializeUnitType_Special_Wall_Missile_Trap();
        initializeUnitType_Special_Wall_Flame_Trap();
        initializeUnitType_Special_Right_Wall_Missile_Trap();
        initializeUnitType_Special_Right_Wall_Flame_Trap();
        initializeUnitType_Special_Start_Location();
        initializeUnitType_Powerup_Flag();
        initializeUnitType_Powerup_Young_Chrysalis();
        initializeUnitType_Powerup_Psi_Emitter();
        initializeUnitType_Powerup_Data_Disk();
        initializeUnitType_Powerup_Khaydarin_Crystal();
        initializeUnitType_Powerup_Mineral_Cluster_Type_1();
        initializeUnitType_Powerup_Mineral_Cluster_Type_2();
        initializeUnitType_Powerup_Protoss_Gas_Orb_Type_1();
        initializeUnitType_Powerup_Protoss_Gas_Orb_Type_2();
        initializeUnitType_Powerup_Zerg_Gas_Sac_Type_1();
        initializeUnitType_Powerup_Zerg_Gas_Sac_Type_2();
        initializeUnitType_Powerup_Terran_Gas_Tank_Type_1();
        initializeUnitType_Powerup_Terran_Gas_Tank_Type_2();
        initializeUnitType_None();
        initializeUnitType_AllUnits();
        initializeUnitType_Men();
        initializeUnitType_Buildings();
        initializeUnitType_Factories();
        initializeUnitType_Unknown();
    }

    private void initializeUnitType_Terran_Marine() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Marine, 0);
        fields.get("race").set(UnitType.Terran_Marine, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Marine, new Pair(UnitType.Terran_Barracks, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList(UnitType.Terran_Barracks)));
        fields.get("requiredTech").set(UnitType.Terran_Marine, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Marine, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
        fields.get("upgrades").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList(UpgradeType.U_238_Shells, UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Terran_Marine, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Terran_Marine, 40);
        fields.get("maxShields").set(UnitType.Terran_Marine, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Marine, 0);
        fields.get("armor").set(UnitType.Terran_Marine, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Marine, 50);
        fields.get("gasPrice").set(UnitType.Terran_Marine, 0);
        fields.get("buildTime").set(UnitType.Terran_Marine, 360);
        fields.get("supplyRequired").set(UnitType.Terran_Marine, 2);
        fields.get("supplyProvided").set(UnitType.Terran_Marine, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Marine, 1);
        fields.get("spaceProvided").set(UnitType.Terran_Marine, 0);
        fields.get("buildScore").set(UnitType.Terran_Marine, 50);
        fields.get("destroyScore").set(UnitType.Terran_Marine, 100);
        fields.get("size").set(UnitType.Terran_Marine, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Terran_Marine, 1);
        fields.get("tileHeight").set(UnitType.Terran_Marine, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Marine, 8);
        fields.get("dimensionUp").set(UnitType.Terran_Marine, 9);
        fields.get("dimensionRight").set(UnitType.Terran_Marine, 8);
        fields.get("dimensionDown").set(UnitType.Terran_Marine, 10);
        fields.get("width").set(UnitType.Terran_Marine, 17);
        fields.get("height").set(UnitType.Terran_Marine, 20);
        fields.get("seekRange").set(UnitType.Terran_Marine, 0);
        fields.get("sightRange").set(UnitType.Terran_Marine, 224);
        fields.get("groundWeapon").set(UnitType.Terran_Marine, WeaponType.Gauss_Rifle);
        fields.get("maxGroundHits").set(UnitType.Terran_Marine, 1);
        fields.get("airWeapon").set(UnitType.Terran_Marine, WeaponType.Gauss_Rifle);
        fields.get("maxAirHits").set(UnitType.Terran_Marine, 1);
        fields.get("topSpeed").set(UnitType.Terran_Marine, 4.0);
        fields.get("acceleration").set(UnitType.Terran_Marine, 1);
        fields.get("haltDistance").set(UnitType.Terran_Marine, 1);
        fields.get("turnRadius").set(UnitType.Terran_Marine, 40);
        fields.get("canProduce").set(UnitType.Terran_Marine, false);
        fields.get("canAttack").set(UnitType.Terran_Marine, true);
        fields.get("canMove").set(UnitType.Terran_Marine, true);
        fields.get("isFlyer").set(UnitType.Terran_Marine, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Marine, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Marine, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Marine, false);
        fields.get("isInvincible").set(UnitType.Terran_Marine, false);
        fields.get("isOrganic").set(UnitType.Terran_Marine, true);
        fields.get("isMechanical").set(UnitType.Terran_Marine, false);
        fields.get("isRobotic").set(UnitType.Terran_Marine, false);
        fields.get("isDetector").set(UnitType.Terran_Marine, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Marine, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Marine, false);
        fields.get("isRefinery").set(UnitType.Terran_Marine, false);
        fields.get("isWorker").set(UnitType.Terran_Marine, false);
        fields.get("requiresPsi").set(UnitType.Terran_Marine, false);
        fields.get("requiresCreep").set(UnitType.Terran_Marine, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Marine, false);
        fields.get("isBurrowable").set(UnitType.Terran_Marine, false);
        fields.get("isCloakable").set(UnitType.Terran_Marine, false);
        fields.get("isBuilding").set(UnitType.Terran_Marine, false);
        fields.get("isAddon").set(UnitType.Terran_Marine, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Marine, false);
        fields.get("isNeutral").set(UnitType.Terran_Marine, false);
        fields.get("isHero").set(UnitType.Terran_Marine, false);
        fields.get("isPowerup").set(UnitType.Terran_Marine, false);
        fields.get("isBeacon").set(UnitType.Terran_Marine, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Marine, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Marine, false);
        fields.get("isSpell").set(UnitType.Terran_Marine, false);
        fields.get("producesCreep").set(UnitType.Terran_Marine, false);
        fields.get("producesLarva").set(UnitType.Terran_Marine, false);
        fields.get("isMineralField").set(UnitType.Terran_Marine, false);
        fields.get("isCritter").set(UnitType.Terran_Marine, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Marine, false);
        fields.get("researchesWhat").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Ghost() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Ghost, 1);
        fields.get("race").set(UnitType.Terran_Ghost, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Ghost, new Pair(UnitType.Terran_Barracks, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList(UnitType.Terran_Barracks, UnitType.Terran_Academy, UnitType.Terran_Covert_Ops)));
        fields.get("requiredTech").set(UnitType.Terran_Ghost, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Ghost, TechType.Personnel_Cloaking);
        fields.get("abilities").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking, TechType.Nuclear_Strike)));
        fields.get("upgrades").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons, UpgradeType.Ocular_Implants, UpgradeType.Moebius_Reactor)));
        fields.get("armorUpgrade").set(UnitType.Terran_Ghost, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Terran_Ghost, 45);
        fields.get("maxShields").set(UnitType.Terran_Ghost, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Ghost, 200);
        fields.get("armor").set(UnitType.Terran_Ghost, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Ghost, 25);
        fields.get("gasPrice").set(UnitType.Terran_Ghost, 75);
        fields.get("buildTime").set(UnitType.Terran_Ghost, 750);
        fields.get("supplyRequired").set(UnitType.Terran_Ghost, 2);
        fields.get("supplyProvided").set(UnitType.Terran_Ghost, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Ghost, 1);
        fields.get("spaceProvided").set(UnitType.Terran_Ghost, 0);
        fields.get("buildScore").set(UnitType.Terran_Ghost, 175);
        fields.get("destroyScore").set(UnitType.Terran_Ghost, 350);
        fields.get("size").set(UnitType.Terran_Ghost, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Terran_Ghost, 1);
        fields.get("tileHeight").set(UnitType.Terran_Ghost, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Ghost, 7);
        fields.get("dimensionUp").set(UnitType.Terran_Ghost, 10);
        fields.get("dimensionRight").set(UnitType.Terran_Ghost, 7);
        fields.get("dimensionDown").set(UnitType.Terran_Ghost, 11);
        fields.get("width").set(UnitType.Terran_Ghost, 15);
        fields.get("height").set(UnitType.Terran_Ghost, 22);
        fields.get("seekRange").set(UnitType.Terran_Ghost, 0);
        fields.get("sightRange").set(UnitType.Terran_Ghost, 288);
        fields.get("groundWeapon").set(UnitType.Terran_Ghost, WeaponType.C_10_Canister_Rifle);
        fields.get("maxGroundHits").set(UnitType.Terran_Ghost, 1);
        fields.get("airWeapon").set(UnitType.Terran_Ghost, WeaponType.C_10_Canister_Rifle);
        fields.get("maxAirHits").set(UnitType.Terran_Ghost, 1);
        fields.get("topSpeed").set(UnitType.Terran_Ghost, 4.0);
        fields.get("acceleration").set(UnitType.Terran_Ghost, 1);
        fields.get("haltDistance").set(UnitType.Terran_Ghost, 1);
        fields.get("turnRadius").set(UnitType.Terran_Ghost, 40);
        fields.get("canProduce").set(UnitType.Terran_Ghost, false);
        fields.get("canAttack").set(UnitType.Terran_Ghost, true);
        fields.get("canMove").set(UnitType.Terran_Ghost, true);
        fields.get("isFlyer").set(UnitType.Terran_Ghost, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Ghost, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Ghost, true);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Ghost, false);
        fields.get("isInvincible").set(UnitType.Terran_Ghost, false);
        fields.get("isOrganic").set(UnitType.Terran_Ghost, true);
        fields.get("isMechanical").set(UnitType.Terran_Ghost, false);
        fields.get("isRobotic").set(UnitType.Terran_Ghost, false);
        fields.get("isDetector").set(UnitType.Terran_Ghost, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Ghost, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Ghost, false);
        fields.get("isRefinery").set(UnitType.Terran_Ghost, false);
        fields.get("isWorker").set(UnitType.Terran_Ghost, false);
        fields.get("requiresPsi").set(UnitType.Terran_Ghost, false);
        fields.get("requiresCreep").set(UnitType.Terran_Ghost, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Ghost, false);
        fields.get("isBurrowable").set(UnitType.Terran_Ghost, false);
        fields.get("isCloakable").set(UnitType.Terran_Ghost, true);
        fields.get("isBuilding").set(UnitType.Terran_Ghost, false);
        fields.get("isAddon").set(UnitType.Terran_Ghost, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Ghost, false);
        fields.get("isNeutral").set(UnitType.Terran_Ghost, false);
        fields.get("isHero").set(UnitType.Terran_Ghost, false);
        fields.get("isPowerup").set(UnitType.Terran_Ghost, false);
        fields.get("isBeacon").set(UnitType.Terran_Ghost, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Ghost, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Ghost, false);
        fields.get("isSpell").set(UnitType.Terran_Ghost, false);
        fields.get("producesCreep").set(UnitType.Terran_Ghost, false);
        fields.get("producesLarva").set(UnitType.Terran_Ghost, false);
        fields.get("isMineralField").set(UnitType.Terran_Ghost, false);
        fields.get("isCritter").set(UnitType.Terran_Ghost, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Ghost, false);
        fields.get("researchesWhat").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Vulture() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Vulture, 2);
        fields.get("race").set(UnitType.Terran_Vulture, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Vulture, new Pair(UnitType.Terran_Factory, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList(UnitType.Terran_Factory)));
        fields.get("requiredTech").set(UnitType.Terran_Vulture, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Vulture, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList(TechType.Spider_Mines)));
        fields.get("upgrades").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList(UpgradeType.Ion_Thrusters, UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Terran_Vulture, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Vulture, 80);
        fields.get("maxShields").set(UnitType.Terran_Vulture, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Vulture, 0);
        fields.get("armor").set(UnitType.Terran_Vulture, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Vulture, 75);
        fields.get("gasPrice").set(UnitType.Terran_Vulture, 0);
        fields.get("buildTime").set(UnitType.Terran_Vulture, 450);
        fields.get("supplyRequired").set(UnitType.Terran_Vulture, 4);
        fields.get("supplyProvided").set(UnitType.Terran_Vulture, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Vulture, 2);
        fields.get("spaceProvided").set(UnitType.Terran_Vulture, 0);
        fields.get("buildScore").set(UnitType.Terran_Vulture, 75);
        fields.get("destroyScore").set(UnitType.Terran_Vulture, 150);
        fields.get("size").set(UnitType.Terran_Vulture, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Terran_Vulture, 1);
        fields.get("tileHeight").set(UnitType.Terran_Vulture, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Vulture, 16);
        fields.get("dimensionUp").set(UnitType.Terran_Vulture, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Vulture, 15);
        fields.get("dimensionDown").set(UnitType.Terran_Vulture, 15);
        fields.get("width").set(UnitType.Terran_Vulture, 32);
        fields.get("height").set(UnitType.Terran_Vulture, 32);
        fields.get("seekRange").set(UnitType.Terran_Vulture, 0);
        fields.get("sightRange").set(UnitType.Terran_Vulture, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Vulture, WeaponType.Fragmentation_Grenade);
        fields.get("maxGroundHits").set(UnitType.Terran_Vulture, 1);
        fields.get("airWeapon").set(UnitType.Terran_Vulture, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Vulture, 0);
        fields.get("topSpeed").set(UnitType.Terran_Vulture, 6.4);
        fields.get("acceleration").set(UnitType.Terran_Vulture, 100);
        fields.get("haltDistance").set(UnitType.Terran_Vulture, 14569);
        fields.get("turnRadius").set(UnitType.Terran_Vulture, 40);
        fields.get("canProduce").set(UnitType.Terran_Vulture, false);
        fields.get("canAttack").set(UnitType.Terran_Vulture, true);
        fields.get("canMove").set(UnitType.Terran_Vulture, true);
        fields.get("isFlyer").set(UnitType.Terran_Vulture, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Vulture, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Vulture, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Vulture, false);
        fields.get("isInvincible").set(UnitType.Terran_Vulture, false);
        fields.get("isOrganic").set(UnitType.Terran_Vulture, false);
        fields.get("isMechanical").set(UnitType.Terran_Vulture, true);
        fields.get("isRobotic").set(UnitType.Terran_Vulture, false);
        fields.get("isDetector").set(UnitType.Terran_Vulture, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Vulture, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Vulture, false);
        fields.get("isRefinery").set(UnitType.Terran_Vulture, false);
        fields.get("isWorker").set(UnitType.Terran_Vulture, false);
        fields.get("requiresPsi").set(UnitType.Terran_Vulture, false);
        fields.get("requiresCreep").set(UnitType.Terran_Vulture, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Vulture, false);
        fields.get("isBurrowable").set(UnitType.Terran_Vulture, false);
        fields.get("isCloakable").set(UnitType.Terran_Vulture, false);
        fields.get("isBuilding").set(UnitType.Terran_Vulture, false);
        fields.get("isAddon").set(UnitType.Terran_Vulture, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Vulture, false);
        fields.get("isNeutral").set(UnitType.Terran_Vulture, false);
        fields.get("isHero").set(UnitType.Terran_Vulture, false);
        fields.get("isPowerup").set(UnitType.Terran_Vulture, false);
        fields.get("isBeacon").set(UnitType.Terran_Vulture, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Vulture, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Vulture, false);
        fields.get("isSpell").set(UnitType.Terran_Vulture, false);
        fields.get("producesCreep").set(UnitType.Terran_Vulture, false);
        fields.get("producesLarva").set(UnitType.Terran_Vulture, false);
        fields.get("isMineralField").set(UnitType.Terran_Vulture, false);
        fields.get("isCritter").set(UnitType.Terran_Vulture, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Vulture, false);
        fields.get("researchesWhat").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Goliath() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Goliath, 3);
        fields.get("race").set(UnitType.Terran_Goliath, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Goliath, new Pair(UnitType.Terran_Factory, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList(UnitType.Terran_Factory, UnitType.Terran_Armory)));
        fields.get("requiredTech").set(UnitType.Terran_Goliath, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Goliath, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons, UpgradeType.Charon_Boosters)));
        fields.get("armorUpgrade").set(UnitType.Terran_Goliath, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Goliath, 125);
        fields.get("maxShields").set(UnitType.Terran_Goliath, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Goliath, 0);
        fields.get("armor").set(UnitType.Terran_Goliath, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Goliath, 100);
        fields.get("gasPrice").set(UnitType.Terran_Goliath, 50);
        fields.get("buildTime").set(UnitType.Terran_Goliath, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Goliath, 4);
        fields.get("supplyProvided").set(UnitType.Terran_Goliath, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Goliath, 2);
        fields.get("spaceProvided").set(UnitType.Terran_Goliath, 0);
        fields.get("buildScore").set(UnitType.Terran_Goliath, 200);
        fields.get("destroyScore").set(UnitType.Terran_Goliath, 400);
        fields.get("size").set(UnitType.Terran_Goliath, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Goliath, 1);
        fields.get("tileHeight").set(UnitType.Terran_Goliath, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Goliath, 16);
        fields.get("dimensionUp").set(UnitType.Terran_Goliath, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Goliath, 15);
        fields.get("dimensionDown").set(UnitType.Terran_Goliath, 15);
        fields.get("width").set(UnitType.Terran_Goliath, 32);
        fields.get("height").set(UnitType.Terran_Goliath, 32);
        fields.get("seekRange").set(UnitType.Terran_Goliath, 160);
        fields.get("sightRange").set(UnitType.Terran_Goliath, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Goliath, WeaponType.Twin_Autocannons);
        fields.get("maxGroundHits").set(UnitType.Terran_Goliath, 1);
        fields.get("airWeapon").set(UnitType.Terran_Goliath, WeaponType.Hellfire_Missile_Pack);
        fields.get("maxAirHits").set(UnitType.Terran_Goliath, 1);
        fields.get("topSpeed").set(UnitType.Terran_Goliath, 4.57);
        fields.get("acceleration").set(UnitType.Terran_Goliath, 1);
        fields.get("haltDistance").set(UnitType.Terran_Goliath, 1);
        fields.get("turnRadius").set(UnitType.Terran_Goliath, 17);
        fields.get("canProduce").set(UnitType.Terran_Goliath, false);
        fields.get("canAttack").set(UnitType.Terran_Goliath, true);
        fields.get("canMove").set(UnitType.Terran_Goliath, true);
        fields.get("isFlyer").set(UnitType.Terran_Goliath, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Goliath, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Goliath, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Goliath, false);
        fields.get("isInvincible").set(UnitType.Terran_Goliath, false);
        fields.get("isOrganic").set(UnitType.Terran_Goliath, false);
        fields.get("isMechanical").set(UnitType.Terran_Goliath, true);
        fields.get("isRobotic").set(UnitType.Terran_Goliath, false);
        fields.get("isDetector").set(UnitType.Terran_Goliath, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Goliath, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Goliath, false);
        fields.get("isRefinery").set(UnitType.Terran_Goliath, false);
        fields.get("isWorker").set(UnitType.Terran_Goliath, false);
        fields.get("requiresPsi").set(UnitType.Terran_Goliath, false);
        fields.get("requiresCreep").set(UnitType.Terran_Goliath, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Goliath, false);
        fields.get("isBurrowable").set(UnitType.Terran_Goliath, false);
        fields.get("isCloakable").set(UnitType.Terran_Goliath, false);
        fields.get("isBuilding").set(UnitType.Terran_Goliath, false);
        fields.get("isAddon").set(UnitType.Terran_Goliath, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Goliath, false);
        fields.get("isNeutral").set(UnitType.Terran_Goliath, false);
        fields.get("isHero").set(UnitType.Terran_Goliath, false);
        fields.get("isPowerup").set(UnitType.Terran_Goliath, false);
        fields.get("isBeacon").set(UnitType.Terran_Goliath, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Goliath, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Goliath, false);
        fields.get("isSpell").set(UnitType.Terran_Goliath, false);
        fields.get("producesCreep").set(UnitType.Terran_Goliath, false);
        fields.get("producesLarva").set(UnitType.Terran_Goliath, false);
        fields.get("isMineralField").set(UnitType.Terran_Goliath, false);
        fields.get("isCritter").set(UnitType.Terran_Goliath, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Goliath, false);
        fields.get("researchesWhat").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Goliath_Turret() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("race").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("whatBuilds").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("requiredUnits").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("cloakingTech").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("abilities").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("maxHitPoints").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("maxShields").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("armor").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("gasPrice").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("buildTime").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("supplyRequired").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("spaceProvided").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("buildScore").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("destroyScore").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("size").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("tileWidth").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("tileHeight").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("dimensionLeft").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("dimensionUp").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("dimensionRight").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("dimensionDown").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("width").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("height").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("seekRange").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("sightRange").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("groundWeapon").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("maxGroundHits").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("airWeapon").set(UnitType.Terran_Goliath_Turret, null);
        fields.get("maxAirHits").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("topSpeed").set(UnitType.Terran_Goliath_Turret, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("haltDistance").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("turnRadius").set(UnitType.Terran_Goliath_Turret, 0);
        fields.get("canProduce").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("canAttack").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("canMove").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isFlyer").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isInvincible").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isOrganic").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isMechanical").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isRobotic").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isDetector").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isRefinery").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isWorker").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("requiresPsi").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("requiresCreep").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isBurrowable").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isCloakable").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isBuilding").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isAddon").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isNeutral").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isHero").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isPowerup").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isBeacon").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isSpell").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("producesCreep").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("producesLarva").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isMineralField").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("isCritter").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Goliath_Turret, false);
        fields.get("researchesWhat").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Siege_Tank_Tank_Mode() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Siege_Tank_Tank_Mode, 5);
        fields.get("race").set(UnitType.Terran_Siege_Tank_Tank_Mode, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Siege_Tank_Tank_Mode, new Pair(UnitType.Terran_Factory, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList(UnitType.Terran_Factory, UnitType.Terran_Machine_Shop)));
        fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Tank_Mode, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Tank_Mode, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
        fields.get("upgrades").set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Terran_Siege_Tank_Tank_Mode, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Tank_Mode, 150);
        fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
        fields.get("armor").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode, 150);
        fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode, 100);
        fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Tank_Mode, 750);
        fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode, 4);
        fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode, 4);
        fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
        fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Tank_Mode, 350);
        fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Tank_Mode, 700);
        fields.get("size").set(UnitType.Terran_Siege_Tank_Tank_Mode, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
        fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Tank_Mode, 16);
        fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Tank_Mode, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Tank_Mode, 15);
        fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Tank_Mode, 15);
        fields.get("width").set(UnitType.Terran_Siege_Tank_Tank_Mode, 32);
        fields.get("height").set(UnitType.Terran_Siege_Tank_Tank_Mode, 32);
        fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Tank_Mode, 256);
        fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Tank_Mode, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode, WeaponType.Arclite_Cannon);
        fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
        fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
        fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Tank_Mode, 4.0);
        fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
        fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
        fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Tank_Mode, 13);
        fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Tank_Mode, true);
        fields.get("canMove").set(UnitType.Terran_Siege_Tank_Tank_Mode, true);
        fields.get("isFlyer").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isInvincible").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isOrganic").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isMechanical").set(UnitType.Terran_Siege_Tank_Tank_Mode, true);
        fields.get("isRobotic").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isDetector").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isRefinery").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isWorker").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isBurrowable").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isCloakable").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isAddon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isNeutral").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isHero").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isPowerup").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isBeacon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isSpell").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isMineralField").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("isCritter").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
        fields.get("researchesWhat").set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Siege_Tank_Tank_Mode_Turret() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("race").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("whatBuilds").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("requiredUnits").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("abilities").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("armor").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("size").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("width").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("height").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("groundWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
        fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
        fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("canMove").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isFlyer").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isInvincible").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isOrganic").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isMechanical").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isRobotic").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isDetector").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isRefinery").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isWorker").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isBurrowable").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isCloakable").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isAddon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isNeutral").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isHero").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isPowerup").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isBeacon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isSpell").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isMineralField").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("isCritter").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
        fields.get("researchesWhat").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_SCV() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_SCV, 7);
        fields.get("race").set(UnitType.Terran_SCV, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_SCV, new Pair(UnitType.Terran_Command_Center, 1));
        fields.get("requiredUnits").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList(UnitType.Terran_Command_Center)));
        fields.get("requiredTech").set(UnitType.Terran_SCV, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_SCV, TechType.None);
        fields.get("abilities").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor)));
        fields.get("armorUpgrade").set(UnitType.Terran_SCV, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Terran_SCV, 60);
        fields.get("maxShields").set(UnitType.Terran_SCV, 0);
        fields.get("maxEnergy").set(UnitType.Terran_SCV, 0);
        fields.get("armor").set(UnitType.Terran_SCV, 0);
        fields.get("mineralPrice").set(UnitType.Terran_SCV, 50);
        fields.get("gasPrice").set(UnitType.Terran_SCV, 0);
        fields.get("buildTime").set(UnitType.Terran_SCV, 300);
        fields.get("supplyRequired").set(UnitType.Terran_SCV, 2);
        fields.get("supplyProvided").set(UnitType.Terran_SCV, 0);
        fields.get("spaceRequired").set(UnitType.Terran_SCV, 1);
        fields.get("spaceProvided").set(UnitType.Terran_SCV, 0);
        fields.get("buildScore").set(UnitType.Terran_SCV, 50);
        fields.get("destroyScore").set(UnitType.Terran_SCV, 100);
        fields.get("size").set(UnitType.Terran_SCV, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Terran_SCV, 1);
        fields.get("tileHeight").set(UnitType.Terran_SCV, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_SCV, 11);
        fields.get("dimensionUp").set(UnitType.Terran_SCV, 11);
        fields.get("dimensionRight").set(UnitType.Terran_SCV, 11);
        fields.get("dimensionDown").set(UnitType.Terran_SCV, 11);
        fields.get("width").set(UnitType.Terran_SCV, 23);
        fields.get("height").set(UnitType.Terran_SCV, 23);
        fields.get("seekRange").set(UnitType.Terran_SCV, 32);
        fields.get("sightRange").set(UnitType.Terran_SCV, 224);
        fields.get("groundWeapon").set(UnitType.Terran_SCV, WeaponType.Fusion_Cutter);
        fields.get("maxGroundHits").set(UnitType.Terran_SCV, 1);
        fields.get("airWeapon").set(UnitType.Terran_SCV, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_SCV, 0);
        fields.get("topSpeed").set(UnitType.Terran_SCV, 4.92);
        fields.get("acceleration").set(UnitType.Terran_SCV, 67);
        fields.get("haltDistance").set(UnitType.Terran_SCV, 12227);
        fields.get("turnRadius").set(UnitType.Terran_SCV, 40);
        fields.get("canProduce").set(UnitType.Terran_SCV, false);
        fields.get("canAttack").set(UnitType.Terran_SCV, true);
        fields.get("canMove").set(UnitType.Terran_SCV, true);
        fields.get("isFlyer").set(UnitType.Terran_SCV, false);
        fields.get("regeneratesHP").set(UnitType.Terran_SCV, false);
        fields.get("isSpellcaster").set(UnitType.Terran_SCV, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_SCV, false);
        fields.get("isInvincible").set(UnitType.Terran_SCV, false);
        fields.get("isOrganic").set(UnitType.Terran_SCV, true);
        fields.get("isMechanical").set(UnitType.Terran_SCV, true);
        fields.get("isRobotic").set(UnitType.Terran_SCV, false);
        fields.get("isDetector").set(UnitType.Terran_SCV, false);
        fields.get("isResourceContainer").set(UnitType.Terran_SCV, false);
        fields.get("isResourceDepot").set(UnitType.Terran_SCV, false);
        fields.get("isRefinery").set(UnitType.Terran_SCV, false);
        fields.get("isWorker").set(UnitType.Terran_SCV, true);
        fields.get("requiresPsi").set(UnitType.Terran_SCV, false);
        fields.get("requiresCreep").set(UnitType.Terran_SCV, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_SCV, false);
        fields.get("isBurrowable").set(UnitType.Terran_SCV, false);
        fields.get("isCloakable").set(UnitType.Terran_SCV, false);
        fields.get("isBuilding").set(UnitType.Terran_SCV, false);
        fields.get("isAddon").set(UnitType.Terran_SCV, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_SCV, false);
        fields.get("isNeutral").set(UnitType.Terran_SCV, false);
        fields.get("isHero").set(UnitType.Terran_SCV, false);
        fields.get("isPowerup").set(UnitType.Terran_SCV, false);
        fields.get("isBeacon").set(UnitType.Terran_SCV, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_SCV, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_SCV, false);
        fields.get("isSpell").set(UnitType.Terran_SCV, false);
        fields.get("producesCreep").set(UnitType.Terran_SCV, false);
        fields.get("producesLarva").set(UnitType.Terran_SCV, false);
        fields.get("isMineralField").set(UnitType.Terran_SCV, false);
        fields.get("isCritter").set(UnitType.Terran_SCV, false);
        fields.get("canBuildAddon").set(UnitType.Terran_SCV, false);
        fields.get("researchesWhat").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Wraith() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Wraith, 8);
        fields.get("race").set(UnitType.Terran_Wraith, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Wraith, new Pair(UnitType.Terran_Starport, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList(UnitType.Terran_Starport)));
        fields.get("requiredTech").set(UnitType.Terran_Wraith, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Wraith, TechType.Cloaking_Field);
        fields.get("abilities").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList(TechType.Cloaking_Field)));
        fields.get("upgrades").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons, UpgradeType.Apollo_Reactor)));
        fields.get("armorUpgrade").set(UnitType.Terran_Wraith, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Wraith, 120);
        fields.get("maxShields").set(UnitType.Terran_Wraith, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Wraith, 200);
        fields.get("armor").set(UnitType.Terran_Wraith, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Wraith, 150);
        fields.get("gasPrice").set(UnitType.Terran_Wraith, 100);
        fields.get("buildTime").set(UnitType.Terran_Wraith, 900);
        fields.get("supplyRequired").set(UnitType.Terran_Wraith, 4);
        fields.get("supplyProvided").set(UnitType.Terran_Wraith, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Wraith, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Wraith, 0);
        fields.get("buildScore").set(UnitType.Terran_Wraith, 400);
        fields.get("destroyScore").set(UnitType.Terran_Wraith, 800);
        fields.get("size").set(UnitType.Terran_Wraith, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Wraith, 1);
        fields.get("tileHeight").set(UnitType.Terran_Wraith, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Wraith, 19);
        fields.get("dimensionUp").set(UnitType.Terran_Wraith, 15);
        fields.get("dimensionRight").set(UnitType.Terran_Wraith, 18);
        fields.get("dimensionDown").set(UnitType.Terran_Wraith, 14);
        fields.get("width").set(UnitType.Terran_Wraith, 38);
        fields.get("height").set(UnitType.Terran_Wraith, 30);
        fields.get("seekRange").set(UnitType.Terran_Wraith, 0);
        fields.get("sightRange").set(UnitType.Terran_Wraith, 224);
        fields.get("groundWeapon").set(UnitType.Terran_Wraith, WeaponType.Burst_Lasers);
        fields.get("maxGroundHits").set(UnitType.Terran_Wraith, 1);
        fields.get("airWeapon").set(UnitType.Terran_Wraith, WeaponType.Gemini_Missiles);
        fields.get("maxAirHits").set(UnitType.Terran_Wraith, 1);
        fields.get("topSpeed").set(UnitType.Terran_Wraith, 6.67);
        fields.get("acceleration").set(UnitType.Terran_Wraith, 67);
        fields.get("haltDistance").set(UnitType.Terran_Wraith, 21745);
        fields.get("turnRadius").set(UnitType.Terran_Wraith, 40);
        fields.get("canProduce").set(UnitType.Terran_Wraith, false);
        fields.get("canAttack").set(UnitType.Terran_Wraith, true);
        fields.get("canMove").set(UnitType.Terran_Wraith, true);
        fields.get("isFlyer").set(UnitType.Terran_Wraith, true);
        fields.get("regeneratesHP").set(UnitType.Terran_Wraith, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Wraith, true);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Wraith, false);
        fields.get("isInvincible").set(UnitType.Terran_Wraith, false);
        fields.get("isOrganic").set(UnitType.Terran_Wraith, false);
        fields.get("isMechanical").set(UnitType.Terran_Wraith, true);
        fields.get("isRobotic").set(UnitType.Terran_Wraith, false);
        fields.get("isDetector").set(UnitType.Terran_Wraith, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Wraith, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Wraith, false);
        fields.get("isRefinery").set(UnitType.Terran_Wraith, false);
        fields.get("isWorker").set(UnitType.Terran_Wraith, false);
        fields.get("requiresPsi").set(UnitType.Terran_Wraith, false);
        fields.get("requiresCreep").set(UnitType.Terran_Wraith, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Wraith, false);
        fields.get("isBurrowable").set(UnitType.Terran_Wraith, false);
        fields.get("isCloakable").set(UnitType.Terran_Wraith, true);
        fields.get("isBuilding").set(UnitType.Terran_Wraith, false);
        fields.get("isAddon").set(UnitType.Terran_Wraith, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Wraith, false);
        fields.get("isNeutral").set(UnitType.Terran_Wraith, false);
        fields.get("isHero").set(UnitType.Terran_Wraith, false);
        fields.get("isPowerup").set(UnitType.Terran_Wraith, false);
        fields.get("isBeacon").set(UnitType.Terran_Wraith, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Wraith, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Wraith, false);
        fields.get("isSpell").set(UnitType.Terran_Wraith, false);
        fields.get("producesCreep").set(UnitType.Terran_Wraith, false);
        fields.get("producesLarva").set(UnitType.Terran_Wraith, false);
        fields.get("isMineralField").set(UnitType.Terran_Wraith, false);
        fields.get("isCritter").set(UnitType.Terran_Wraith, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Wraith, false);
        fields.get("researchesWhat").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Science_Vessel() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Science_Vessel, 9);
        fields.get("race").set(UnitType.Terran_Science_Vessel, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Science_Vessel, new Pair(UnitType.Terran_Starport, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList(UnitType.Terran_Starport, UnitType.Terran_Control_Tower, UnitType.Terran_Science_Facility)));
        fields.get("requiredTech").set(UnitType.Terran_Science_Vessel, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Science_Vessel, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList(TechType.EMP_Shockwave, TechType.Defensive_Matrix, TechType.Irradiate)));
        fields.get("upgrades").set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Titan_Reactor)));
        fields.get("armorUpgrade").set(UnitType.Terran_Science_Vessel, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Science_Vessel, 200);
        fields.get("maxShields").set(UnitType.Terran_Science_Vessel, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Science_Vessel, 200);
        fields.get("armor").set(UnitType.Terran_Science_Vessel, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Science_Vessel, 100);
        fields.get("gasPrice").set(UnitType.Terran_Science_Vessel, 225);
        fields.get("buildTime").set(UnitType.Terran_Science_Vessel, 1200);
        fields.get("supplyRequired").set(UnitType.Terran_Science_Vessel, 4);
        fields.get("supplyProvided").set(UnitType.Terran_Science_Vessel, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Science_Vessel, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Science_Vessel, 0);
        fields.get("buildScore").set(UnitType.Terran_Science_Vessel, 625);
        fields.get("destroyScore").set(UnitType.Terran_Science_Vessel, 1250);
        fields.get("size").set(UnitType.Terran_Science_Vessel, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Science_Vessel, 2);
        fields.get("tileHeight").set(UnitType.Terran_Science_Vessel, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Science_Vessel, 32);
        fields.get("dimensionUp").set(UnitType.Terran_Science_Vessel, 33);
        fields.get("dimensionRight").set(UnitType.Terran_Science_Vessel, 32);
        fields.get("dimensionDown").set(UnitType.Terran_Science_Vessel, 16);
        fields.get("width").set(UnitType.Terran_Science_Vessel, 65);
        fields.get("height").set(UnitType.Terran_Science_Vessel, 50);
        fields.get("seekRange").set(UnitType.Terran_Science_Vessel, 0);
        fields.get("sightRange").set(UnitType.Terran_Science_Vessel, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Science_Vessel, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Science_Vessel, 0);
        fields.get("airWeapon").set(UnitType.Terran_Science_Vessel, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Science_Vessel, 0);
        fields.get("topSpeed").set(UnitType.Terran_Science_Vessel, 5.0);
        fields.get("acceleration").set(UnitType.Terran_Science_Vessel, 50);
        fields.get("haltDistance").set(UnitType.Terran_Science_Vessel, 5120);
        fields.get("turnRadius").set(UnitType.Terran_Science_Vessel, 40);
        fields.get("canProduce").set(UnitType.Terran_Science_Vessel, false);
        fields.get("canAttack").set(UnitType.Terran_Science_Vessel, false);
        fields.get("canMove").set(UnitType.Terran_Science_Vessel, true);
        fields.get("isFlyer").set(UnitType.Terran_Science_Vessel, true);
        fields.get("regeneratesHP").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Science_Vessel, true);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isInvincible").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isOrganic").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isMechanical").set(UnitType.Terran_Science_Vessel, true);
        fields.get("isRobotic").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isDetector").set(UnitType.Terran_Science_Vessel, true);
        fields.get("isResourceContainer").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isRefinery").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isWorker").set(UnitType.Terran_Science_Vessel, false);
        fields.get("requiresPsi").set(UnitType.Terran_Science_Vessel, false);
        fields.get("requiresCreep").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isBurrowable").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isCloakable").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isBuilding").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isAddon").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isNeutral").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isHero").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isPowerup").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isBeacon").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isSpell").set(UnitType.Terran_Science_Vessel, false);
        fields.get("producesCreep").set(UnitType.Terran_Science_Vessel, false);
        fields.get("producesLarva").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isMineralField").set(UnitType.Terran_Science_Vessel, false);
        fields.get("isCritter").set(UnitType.Terran_Science_Vessel, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Science_Vessel, false);
        fields.get("researchesWhat").set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Gui_Montag() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Gui_Montag, 10);
        fields.get("race").set(UnitType.Hero_Gui_Montag, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Gui_Montag, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Gui_Montag, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Gui_Montag, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
        fields.get("upgrades").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Gui_Montag, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Gui_Montag, 160);
        fields.get("maxShields").set(UnitType.Hero_Gui_Montag, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Gui_Montag, 0);
        fields.get("armor").set(UnitType.Hero_Gui_Montag, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Gui_Montag, 100);
        fields.get("gasPrice").set(UnitType.Hero_Gui_Montag, 50);
        fields.get("buildTime").set(UnitType.Hero_Gui_Montag, 720);
        fields.get("supplyRequired").set(UnitType.Hero_Gui_Montag, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Gui_Montag, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Gui_Montag, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Gui_Montag, 0);
        fields.get("buildScore").set(UnitType.Hero_Gui_Montag, 0);
        fields.get("destroyScore").set(UnitType.Hero_Gui_Montag, 400);
        fields.get("size").set(UnitType.Hero_Gui_Montag, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Gui_Montag, 1);
        fields.get("tileHeight").set(UnitType.Hero_Gui_Montag, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Gui_Montag, 11);
        fields.get("dimensionUp").set(UnitType.Hero_Gui_Montag, 7);
        fields.get("dimensionRight").set(UnitType.Hero_Gui_Montag, 11);
        fields.get("dimensionDown").set(UnitType.Hero_Gui_Montag, 14);
        fields.get("width").set(UnitType.Hero_Gui_Montag, 23);
        fields.get("height").set(UnitType.Hero_Gui_Montag, 22);
        fields.get("seekRange").set(UnitType.Hero_Gui_Montag, 96);
        fields.get("sightRange").set(UnitType.Hero_Gui_Montag, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Gui_Montag, WeaponType.Flame_Thrower_Gui_Montag);
        fields.get("maxGroundHits").set(UnitType.Hero_Gui_Montag, 3);
        fields.get("airWeapon").set(UnitType.Hero_Gui_Montag, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Gui_Montag, 0);
        fields.get("topSpeed").set(UnitType.Hero_Gui_Montag, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Gui_Montag, 1);
        fields.get("haltDistance").set(UnitType.Hero_Gui_Montag, 1);
        fields.get("turnRadius").set(UnitType.Hero_Gui_Montag, 40);
        fields.get("canProduce").set(UnitType.Hero_Gui_Montag, false);
        fields.get("canAttack").set(UnitType.Hero_Gui_Montag, true);
        fields.get("canMove").set(UnitType.Hero_Gui_Montag, true);
        fields.get("isFlyer").set(UnitType.Hero_Gui_Montag, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Gui_Montag, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isInvincible").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isOrganic").set(UnitType.Hero_Gui_Montag, true);
        fields.get("isMechanical").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isRobotic").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isDetector").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isRefinery").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isWorker").set(UnitType.Hero_Gui_Montag, false);
        fields.get("requiresPsi").set(UnitType.Hero_Gui_Montag, false);
        fields.get("requiresCreep").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isBurrowable").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isCloakable").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isBuilding").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isAddon").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isNeutral").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isHero").set(UnitType.Hero_Gui_Montag, true);
        fields.get("isPowerup").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isBeacon").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isSpell").set(UnitType.Hero_Gui_Montag, false);
        fields.get("producesCreep").set(UnitType.Hero_Gui_Montag, false);
        fields.get("producesLarva").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isMineralField").set(UnitType.Hero_Gui_Montag, false);
        fields.get("isCritter").set(UnitType.Hero_Gui_Montag, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Gui_Montag, false);
        fields.get("researchesWhat").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Dropship() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Dropship, 11);
        fields.get("race").set(UnitType.Terran_Dropship, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Dropship, new Pair(UnitType.Terran_Starport, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList(UnitType.Terran_Starport, UnitType.Terran_Control_Tower)));
        fields.get("requiredTech").set(UnitType.Terran_Dropship, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Dropship, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating)));
        fields.get("armorUpgrade").set(UnitType.Terran_Dropship, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Dropship, 150);
        fields.get("maxShields").set(UnitType.Terran_Dropship, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Dropship, 0);
        fields.get("armor").set(UnitType.Terran_Dropship, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Dropship, 100);
        fields.get("gasPrice").set(UnitType.Terran_Dropship, 100);
        fields.get("buildTime").set(UnitType.Terran_Dropship, 750);
        fields.get("supplyRequired").set(UnitType.Terran_Dropship, 4);
        fields.get("supplyProvided").set(UnitType.Terran_Dropship, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Dropship, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Dropship, 8);
        fields.get("buildScore").set(UnitType.Terran_Dropship, 300);
        fields.get("destroyScore").set(UnitType.Terran_Dropship, 600);
        fields.get("size").set(UnitType.Terran_Dropship, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Dropship, 2);
        fields.get("tileHeight").set(UnitType.Terran_Dropship, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Dropship, 24);
        fields.get("dimensionUp").set(UnitType.Terran_Dropship, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Dropship, 24);
        fields.get("dimensionDown").set(UnitType.Terran_Dropship, 20);
        fields.get("width").set(UnitType.Terran_Dropship, 49);
        fields.get("height").set(UnitType.Terran_Dropship, 37);
        fields.get("seekRange").set(UnitType.Terran_Dropship, 0);
        fields.get("sightRange").set(UnitType.Terran_Dropship, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Dropship, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Dropship, 0);
        fields.get("airWeapon").set(UnitType.Terran_Dropship, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Dropship, 0);
        fields.get("topSpeed").set(UnitType.Terran_Dropship, 5.47);
        fields.get("acceleration").set(UnitType.Terran_Dropship, 17);
        fields.get("haltDistance").set(UnitType.Terran_Dropship, 37756);
        fields.get("turnRadius").set(UnitType.Terran_Dropship, 20);
        fields.get("canProduce").set(UnitType.Terran_Dropship, false);
        fields.get("canAttack").set(UnitType.Terran_Dropship, false);
        fields.get("canMove").set(UnitType.Terran_Dropship, true);
        fields.get("isFlyer").set(UnitType.Terran_Dropship, true);
        fields.get("regeneratesHP").set(UnitType.Terran_Dropship, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Dropship, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Dropship, false);
        fields.get("isInvincible").set(UnitType.Terran_Dropship, false);
        fields.get("isOrganic").set(UnitType.Terran_Dropship, false);
        fields.get("isMechanical").set(UnitType.Terran_Dropship, true);
        fields.get("isRobotic").set(UnitType.Terran_Dropship, false);
        fields.get("isDetector").set(UnitType.Terran_Dropship, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Dropship, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Dropship, false);
        fields.get("isRefinery").set(UnitType.Terran_Dropship, false);
        fields.get("isWorker").set(UnitType.Terran_Dropship, false);
        fields.get("requiresPsi").set(UnitType.Terran_Dropship, false);
        fields.get("requiresCreep").set(UnitType.Terran_Dropship, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Dropship, false);
        fields.get("isBurrowable").set(UnitType.Terran_Dropship, false);
        fields.get("isCloakable").set(UnitType.Terran_Dropship, false);
        fields.get("isBuilding").set(UnitType.Terran_Dropship, false);
        fields.get("isAddon").set(UnitType.Terran_Dropship, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Dropship, false);
        fields.get("isNeutral").set(UnitType.Terran_Dropship, false);
        fields.get("isHero").set(UnitType.Terran_Dropship, false);
        fields.get("isPowerup").set(UnitType.Terran_Dropship, false);
        fields.get("isBeacon").set(UnitType.Terran_Dropship, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Dropship, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Dropship, false);
        fields.get("isSpell").set(UnitType.Terran_Dropship, false);
        fields.get("producesCreep").set(UnitType.Terran_Dropship, false);
        fields.get("producesLarva").set(UnitType.Terran_Dropship, false);
        fields.get("isMineralField").set(UnitType.Terran_Dropship, false);
        fields.get("isCritter").set(UnitType.Terran_Dropship, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Dropship, false);
        fields.get("researchesWhat").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Battlecruiser() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Battlecruiser, 12);
        fields.get("race").set(UnitType.Terran_Battlecruiser, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Battlecruiser, new Pair(UnitType.Terran_Starport, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList(UnitType.Terran_Starport, UnitType.Terran_Control_Tower, UnitType.Terran_Physics_Lab)));
        fields.get("requiredTech").set(UnitType.Terran_Battlecruiser, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Battlecruiser, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
        fields.get("upgrades").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons, UpgradeType.Colossus_Reactor)));
        fields.get("armorUpgrade").set(UnitType.Terran_Battlecruiser, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Battlecruiser, 500);
        fields.get("maxShields").set(UnitType.Terran_Battlecruiser, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Battlecruiser, 200);
        fields.get("armor").set(UnitType.Terran_Battlecruiser, 3);
        fields.get("mineralPrice").set(UnitType.Terran_Battlecruiser, 400);
        fields.get("gasPrice").set(UnitType.Terran_Battlecruiser, 300);
        fields.get("buildTime").set(UnitType.Terran_Battlecruiser, 2000);
        fields.get("supplyRequired").set(UnitType.Terran_Battlecruiser, 12);
        fields.get("supplyProvided").set(UnitType.Terran_Battlecruiser, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Battlecruiser, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Battlecruiser, 0);
        fields.get("buildScore").set(UnitType.Terran_Battlecruiser, 1200);
        fields.get("destroyScore").set(UnitType.Terran_Battlecruiser, 2400);
        fields.get("size").set(UnitType.Terran_Battlecruiser, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Battlecruiser, 2);
        fields.get("tileHeight").set(UnitType.Terran_Battlecruiser, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Battlecruiser, 37);
        fields.get("dimensionUp").set(UnitType.Terran_Battlecruiser, 29);
        fields.get("dimensionRight").set(UnitType.Terran_Battlecruiser, 37);
        fields.get("dimensionDown").set(UnitType.Terran_Battlecruiser, 29);
        fields.get("width").set(UnitType.Terran_Battlecruiser, 75);
        fields.get("height").set(UnitType.Terran_Battlecruiser, 59);
        fields.get("seekRange").set(UnitType.Terran_Battlecruiser, 0);
        fields.get("sightRange").set(UnitType.Terran_Battlecruiser, 352);
        fields.get("groundWeapon").set(UnitType.Terran_Battlecruiser, WeaponType.ATS_Laser_Battery);
        fields.get("maxGroundHits").set(UnitType.Terran_Battlecruiser, 1);
        fields.get("airWeapon").set(UnitType.Terran_Battlecruiser, WeaponType.ATA_Laser_Battery);
        fields.get("maxAirHits").set(UnitType.Terran_Battlecruiser, 1);
        fields.get("topSpeed").set(UnitType.Terran_Battlecruiser, 2.5);
        fields.get("acceleration").set(UnitType.Terran_Battlecruiser, 27);
        fields.get("haltDistance").set(UnitType.Terran_Battlecruiser, 7585);
        fields.get("turnRadius").set(UnitType.Terran_Battlecruiser, 20);
        fields.get("canProduce").set(UnitType.Terran_Battlecruiser, false);
        fields.get("canAttack").set(UnitType.Terran_Battlecruiser, true);
        fields.get("canMove").set(UnitType.Terran_Battlecruiser, true);
        fields.get("isFlyer").set(UnitType.Terran_Battlecruiser, true);
        fields.get("regeneratesHP").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Battlecruiser, true);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isInvincible").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isOrganic").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isMechanical").set(UnitType.Terran_Battlecruiser, true);
        fields.get("isRobotic").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isDetector").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isRefinery").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isWorker").set(UnitType.Terran_Battlecruiser, false);
        fields.get("requiresPsi").set(UnitType.Terran_Battlecruiser, false);
        fields.get("requiresCreep").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isBurrowable").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isCloakable").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isBuilding").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isAddon").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isNeutral").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isHero").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isPowerup").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isBeacon").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isSpell").set(UnitType.Terran_Battlecruiser, false);
        fields.get("producesCreep").set(UnitType.Terran_Battlecruiser, false);
        fields.get("producesLarva").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isMineralField").set(UnitType.Terran_Battlecruiser, false);
        fields.get("isCritter").set(UnitType.Terran_Battlecruiser, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Battlecruiser, false);
        fields.get("researchesWhat").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Vulture_Spider_Mine() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Vulture_Spider_Mine, 13);
        fields.get("race").set(UnitType.Terran_Vulture_Spider_Mine, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Vulture_Spider_Mine, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Terran_Vulture_Spider_Mine, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Vulture_Spider_Mine, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Vulture_Spider_Mine, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Vulture_Spider_Mine, 20);
        fields.get("maxShields").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("armor").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Vulture_Spider_Mine, 1);
        fields.get("gasPrice").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("buildTime").set(UnitType.Terran_Vulture_Spider_Mine, 1);
        fields.get("supplyRequired").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Vulture_Spider_Mine, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("buildScore").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("destroyScore").set(UnitType.Terran_Vulture_Spider_Mine, 25);
        fields.get("size").set(UnitType.Terran_Vulture_Spider_Mine, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Terran_Vulture_Spider_Mine, 1);
        fields.get("tileHeight").set(UnitType.Terran_Vulture_Spider_Mine, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Vulture_Spider_Mine, 7);
        fields.get("dimensionUp").set(UnitType.Terran_Vulture_Spider_Mine, 7);
        fields.get("dimensionRight").set(UnitType.Terran_Vulture_Spider_Mine, 7);
        fields.get("dimensionDown").set(UnitType.Terran_Vulture_Spider_Mine, 7);
        fields.get("width").set(UnitType.Terran_Vulture_Spider_Mine, 15);
        fields.get("height").set(UnitType.Terran_Vulture_Spider_Mine, 15);
        fields.get("seekRange").set(UnitType.Terran_Vulture_Spider_Mine, 96);
        fields.get("sightRange").set(UnitType.Terran_Vulture_Spider_Mine, 96);
        fields.get("groundWeapon").set(UnitType.Terran_Vulture_Spider_Mine, WeaponType.Spider_Mines);
        fields.get("maxGroundHits").set(UnitType.Terran_Vulture_Spider_Mine, 1);
        fields.get("airWeapon").set(UnitType.Terran_Vulture_Spider_Mine, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Vulture_Spider_Mine, 0);
        fields.get("topSpeed").set(UnitType.Terran_Vulture_Spider_Mine, 16.0);
        fields.get("acceleration").set(UnitType.Terran_Vulture_Spider_Mine, 1);
        fields.get("haltDistance").set(UnitType.Terran_Vulture_Spider_Mine, 1);
        fields.get("turnRadius").set(UnitType.Terran_Vulture_Spider_Mine, 127);
        fields.get("canProduce").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("canAttack").set(UnitType.Terran_Vulture_Spider_Mine, true);
        fields.get("canMove").set(UnitType.Terran_Vulture_Spider_Mine, true);
        fields.get("isFlyer").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isInvincible").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isOrganic").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isMechanical").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isRobotic").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isDetector").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isRefinery").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isWorker").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("requiresPsi").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("requiresCreep").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isBurrowable").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isCloakable").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isBuilding").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isAddon").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isNeutral").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isHero").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isPowerup").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isBeacon").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isSpell").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("producesCreep").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("producesLarva").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isMineralField").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("isCritter").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Vulture_Spider_Mine, false);
        fields.get("researchesWhat").set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Nuclear_Missile() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Nuclear_Missile, 14);
        fields.get("race").set(UnitType.Terran_Nuclear_Missile, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Nuclear_Missile, new Pair(UnitType.Terran_Nuclear_Silo, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList(UnitType.Terran_Nuclear_Silo)));
        fields.get("requiredTech").set(UnitType.Terran_Nuclear_Missile, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Nuclear_Missile, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Nuclear_Missile, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Nuclear_Missile, 100);
        fields.get("maxShields").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("armor").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Nuclear_Missile, 200);
        fields.get("gasPrice").set(UnitType.Terran_Nuclear_Missile, 200);
        fields.get("buildTime").set(UnitType.Terran_Nuclear_Missile, 1500);
        fields.get("supplyRequired").set(UnitType.Terran_Nuclear_Missile, 16);
        fields.get("supplyProvided").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Nuclear_Missile, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("buildScore").set(UnitType.Terran_Nuclear_Missile, 800);
        fields.get("destroyScore").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("size").set(UnitType.Terran_Nuclear_Missile, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Terran_Nuclear_Missile, 1);
        fields.get("tileHeight").set(UnitType.Terran_Nuclear_Missile, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Nuclear_Missile, 7);
        fields.get("dimensionUp").set(UnitType.Terran_Nuclear_Missile, 14);
        fields.get("dimensionRight").set(UnitType.Terran_Nuclear_Missile, 7);
        fields.get("dimensionDown").set(UnitType.Terran_Nuclear_Missile, 14);
        fields.get("width").set(UnitType.Terran_Nuclear_Missile, 15);
        fields.get("height").set(UnitType.Terran_Nuclear_Missile, 29);
        fields.get("seekRange").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("sightRange").set(UnitType.Terran_Nuclear_Missile, 96);
        fields.get("groundWeapon").set(UnitType.Terran_Nuclear_Missile, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("airWeapon").set(UnitType.Terran_Nuclear_Missile, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Nuclear_Missile, 0);
        fields.get("topSpeed").set(UnitType.Terran_Nuclear_Missile, 33.33);
        fields.get("acceleration").set(UnitType.Terran_Nuclear_Missile, 33);
        fields.get("haltDistance").set(UnitType.Terran_Nuclear_Missile, 1103213);
        fields.get("turnRadius").set(UnitType.Terran_Nuclear_Missile, 127);
        fields.get("canProduce").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("canAttack").set(UnitType.Terran_Nuclear_Missile, true);
        fields.get("canMove").set(UnitType.Terran_Nuclear_Missile, true);
        fields.get("isFlyer").set(UnitType.Terran_Nuclear_Missile, true);
        fields.get("regeneratesHP").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isInvincible").set(UnitType.Terran_Nuclear_Missile, true);
        fields.get("isOrganic").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isMechanical").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isRobotic").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isDetector").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isRefinery").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isWorker").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("requiresPsi").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("requiresCreep").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isBurrowable").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isCloakable").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isBuilding").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isAddon").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isNeutral").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isHero").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isPowerup").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isBeacon").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isSpell").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("producesCreep").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("producesLarva").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isMineralField").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("isCritter").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Nuclear_Missile, false);
        fields.get("researchesWhat").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Civilian() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Civilian, 15);
        fields.get("race").set(UnitType.Terran_Civilian, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Civilian, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Terran_Civilian, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Civilian, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor)));
        fields.get("armorUpgrade").set(UnitType.Terran_Civilian, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Terran_Civilian, 40);
        fields.get("maxShields").set(UnitType.Terran_Civilian, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Civilian, 0);
        fields.get("armor").set(UnitType.Terran_Civilian, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Civilian, 0);
        fields.get("gasPrice").set(UnitType.Terran_Civilian, 0);
        fields.get("buildTime").set(UnitType.Terran_Civilian, 1);
        fields.get("supplyRequired").set(UnitType.Terran_Civilian, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Civilian, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Civilian, 1);
        fields.get("spaceProvided").set(UnitType.Terran_Civilian, 0);
        fields.get("buildScore").set(UnitType.Terran_Civilian, 0);
        fields.get("destroyScore").set(UnitType.Terran_Civilian, 10);
        fields.get("size").set(UnitType.Terran_Civilian, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Terran_Civilian, 1);
        fields.get("tileHeight").set(UnitType.Terran_Civilian, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Civilian, 8);
        fields.get("dimensionUp").set(UnitType.Terran_Civilian, 9);
        fields.get("dimensionRight").set(UnitType.Terran_Civilian, 8);
        fields.get("dimensionDown").set(UnitType.Terran_Civilian, 10);
        fields.get("width").set(UnitType.Terran_Civilian, 17);
        fields.get("height").set(UnitType.Terran_Civilian, 20);
        fields.get("seekRange").set(UnitType.Terran_Civilian, 0);
        fields.get("sightRange").set(UnitType.Terran_Civilian, 224);
        fields.get("groundWeapon").set(UnitType.Terran_Civilian, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Civilian, 0);
        fields.get("airWeapon").set(UnitType.Terran_Civilian, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Civilian, 0);
        fields.get("topSpeed").set(UnitType.Terran_Civilian, 4.0);
        fields.get("acceleration").set(UnitType.Terran_Civilian, 1);
        fields.get("haltDistance").set(UnitType.Terran_Civilian, 1);
        fields.get("turnRadius").set(UnitType.Terran_Civilian, 40);
        fields.get("canProduce").set(UnitType.Terran_Civilian, false);
        fields.get("canAttack").set(UnitType.Terran_Civilian, false);
        fields.get("canMove").set(UnitType.Terran_Civilian, true);
        fields.get("isFlyer").set(UnitType.Terran_Civilian, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Civilian, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Civilian, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Civilian, false);
        fields.get("isInvincible").set(UnitType.Terran_Civilian, false);
        fields.get("isOrganic").set(UnitType.Terran_Civilian, true);
        fields.get("isMechanical").set(UnitType.Terran_Civilian, false);
        fields.get("isRobotic").set(UnitType.Terran_Civilian, false);
        fields.get("isDetector").set(UnitType.Terran_Civilian, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Civilian, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Civilian, false);
        fields.get("isRefinery").set(UnitType.Terran_Civilian, false);
        fields.get("isWorker").set(UnitType.Terran_Civilian, false);
        fields.get("requiresPsi").set(UnitType.Terran_Civilian, false);
        fields.get("requiresCreep").set(UnitType.Terran_Civilian, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Civilian, false);
        fields.get("isBurrowable").set(UnitType.Terran_Civilian, false);
        fields.get("isCloakable").set(UnitType.Terran_Civilian, false);
        fields.get("isBuilding").set(UnitType.Terran_Civilian, false);
        fields.get("isAddon").set(UnitType.Terran_Civilian, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Civilian, false);
        fields.get("isNeutral").set(UnitType.Terran_Civilian, false);
        fields.get("isHero").set(UnitType.Terran_Civilian, true);
        fields.get("isPowerup").set(UnitType.Terran_Civilian, false);
        fields.get("isBeacon").set(UnitType.Terran_Civilian, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Civilian, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Civilian, false);
        fields.get("isSpell").set(UnitType.Terran_Civilian, false);
        fields.get("producesCreep").set(UnitType.Terran_Civilian, false);
        fields.get("producesLarva").set(UnitType.Terran_Civilian, false);
        fields.get("isMineralField").set(UnitType.Terran_Civilian, false);
        fields.get("isCritter").set(UnitType.Terran_Civilian, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Civilian, false);
        fields.get("researchesWhat").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Sarah_Kerrigan() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Sarah_Kerrigan, 16);
        fields.get("race").set(UnitType.Hero_Sarah_Kerrigan, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Sarah_Kerrigan, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Sarah_Kerrigan, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Sarah_Kerrigan, TechType.Personnel_Cloaking);
        fields.get("abilities").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking)));
        fields.get("upgrades").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Sarah_Kerrigan, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Sarah_Kerrigan, 250);
        fields.get("maxShields").set(UnitType.Hero_Sarah_Kerrigan, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Sarah_Kerrigan, 250);
        fields.get("armor").set(UnitType.Hero_Sarah_Kerrigan, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Sarah_Kerrigan, 50);
        fields.get("gasPrice").set(UnitType.Hero_Sarah_Kerrigan, 150);
        fields.get("buildTime").set(UnitType.Hero_Sarah_Kerrigan, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Sarah_Kerrigan, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Sarah_Kerrigan, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Sarah_Kerrigan, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Sarah_Kerrigan, 0);
        fields.get("buildScore").set(UnitType.Hero_Sarah_Kerrigan, 0);
        fields.get("destroyScore").set(UnitType.Hero_Sarah_Kerrigan, 700);
        fields.get("size").set(UnitType.Hero_Sarah_Kerrigan, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Sarah_Kerrigan, 1);
        fields.get("tileHeight").set(UnitType.Hero_Sarah_Kerrigan, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Sarah_Kerrigan, 7);
        fields.get("dimensionUp").set(UnitType.Hero_Sarah_Kerrigan, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Sarah_Kerrigan, 7);
        fields.get("dimensionDown").set(UnitType.Hero_Sarah_Kerrigan, 11);
        fields.get("width").set(UnitType.Hero_Sarah_Kerrigan, 15);
        fields.get("height").set(UnitType.Hero_Sarah_Kerrigan, 22);
        fields.get("seekRange").set(UnitType.Hero_Sarah_Kerrigan, 0);
        fields.get("sightRange").set(UnitType.Hero_Sarah_Kerrigan, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Sarah_Kerrigan, WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan);
        fields.get("maxGroundHits").set(UnitType.Hero_Sarah_Kerrigan, 1);
        fields.get("airWeapon").set(UnitType.Hero_Sarah_Kerrigan, WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan);
        fields.get("maxAirHits").set(UnitType.Hero_Sarah_Kerrigan, 1);
        fields.get("topSpeed").set(UnitType.Hero_Sarah_Kerrigan, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Sarah_Kerrigan, 1);
        fields.get("haltDistance").set(UnitType.Hero_Sarah_Kerrigan, 1);
        fields.get("turnRadius").set(UnitType.Hero_Sarah_Kerrigan, 40);
        fields.get("canProduce").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("canAttack").set(UnitType.Hero_Sarah_Kerrigan, true);
        fields.get("canMove").set(UnitType.Hero_Sarah_Kerrigan, true);
        fields.get("isFlyer").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Sarah_Kerrigan, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isInvincible").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isOrganic").set(UnitType.Hero_Sarah_Kerrigan, true);
        fields.get("isMechanical").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isRobotic").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isDetector").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isRefinery").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isWorker").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("requiresPsi").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("requiresCreep").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isBurrowable").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isCloakable").set(UnitType.Hero_Sarah_Kerrigan, true);
        fields.get("isBuilding").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isAddon").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isNeutral").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isHero").set(UnitType.Hero_Sarah_Kerrigan, true);
        fields.get("isPowerup").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isBeacon").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isSpell").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("producesCreep").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("producesLarva").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isMineralField").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("isCritter").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Sarah_Kerrigan, false);
        fields.get("researchesWhat").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Alan_Schezar() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Alan_Schezar, 17);
        fields.get("race").set(UnitType.Hero_Alan_Schezar, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Alan_Schezar, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Alan_Schezar, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Alan_Schezar, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Alan_Schezar, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Alan_Schezar, 300);
        fields.get("maxShields").set(UnitType.Hero_Alan_Schezar, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Alan_Schezar, 0);
        fields.get("armor").set(UnitType.Hero_Alan_Schezar, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Alan_Schezar, 200);
        fields.get("gasPrice").set(UnitType.Hero_Alan_Schezar, 100);
        fields.get("buildTime").set(UnitType.Hero_Alan_Schezar, 1200);
        fields.get("supplyRequired").set(UnitType.Hero_Alan_Schezar, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Alan_Schezar, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Alan_Schezar, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Alan_Schezar, 0);
        fields.get("buildScore").set(UnitType.Hero_Alan_Schezar, 0);
        fields.get("destroyScore").set(UnitType.Hero_Alan_Schezar, 800);
        fields.get("size").set(UnitType.Hero_Alan_Schezar, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Alan_Schezar, 1);
        fields.get("tileHeight").set(UnitType.Hero_Alan_Schezar, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Alan_Schezar, 16);
        fields.get("dimensionUp").set(UnitType.Hero_Alan_Schezar, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Alan_Schezar, 15);
        fields.get("dimensionDown").set(UnitType.Hero_Alan_Schezar, 15);
        fields.get("width").set(UnitType.Hero_Alan_Schezar, 32);
        fields.get("height").set(UnitType.Hero_Alan_Schezar, 32);
        fields.get("seekRange").set(UnitType.Hero_Alan_Schezar, 160);
        fields.get("sightRange").set(UnitType.Hero_Alan_Schezar, 256);
        fields.get("groundWeapon").set(UnitType.Hero_Alan_Schezar, WeaponType.Twin_Autocannons_Alan_Schezar);
        fields.get("maxGroundHits").set(UnitType.Hero_Alan_Schezar, 1);
        fields.get("airWeapon").set(UnitType.Hero_Alan_Schezar, WeaponType.Hellfire_Missile_Pack_Alan_Schezar);
        fields.get("maxAirHits").set(UnitType.Hero_Alan_Schezar, 1);
        fields.get("topSpeed").set(UnitType.Hero_Alan_Schezar, 4.57);
        fields.get("acceleration").set(UnitType.Hero_Alan_Schezar, 1);
        fields.get("haltDistance").set(UnitType.Hero_Alan_Schezar, 1);
        fields.get("turnRadius").set(UnitType.Hero_Alan_Schezar, 17);
        fields.get("canProduce").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("canAttack").set(UnitType.Hero_Alan_Schezar, true);
        fields.get("canMove").set(UnitType.Hero_Alan_Schezar, true);
        fields.get("isFlyer").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isInvincible").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isOrganic").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isMechanical").set(UnitType.Hero_Alan_Schezar, true);
        fields.get("isRobotic").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isDetector").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isRefinery").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isWorker").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("requiresPsi").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("requiresCreep").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isBurrowable").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isCloakable").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isBuilding").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isAddon").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isNeutral").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isHero").set(UnitType.Hero_Alan_Schezar, true);
        fields.get("isPowerup").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isBeacon").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isSpell").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("producesCreep").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("producesLarva").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isMineralField").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("isCritter").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Alan_Schezar, false);
        fields.get("researchesWhat").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Alan_Schezar_Turret() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("race").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("whatBuilds").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("requiredUnits").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("cloakingTech").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("abilities").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("maxHitPoints").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("maxShields").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("armor").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("mineralPrice").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("gasPrice").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("buildTime").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("supplyRequired").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("spaceProvided").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("buildScore").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("destroyScore").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("size").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("tileWidth").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("tileHeight").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("dimensionLeft").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("dimensionUp").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("dimensionRight").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("dimensionDown").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("width").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("height").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("seekRange").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("sightRange").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("groundWeapon").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("maxGroundHits").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("airWeapon").set(UnitType.Hero_Alan_Schezar_Turret, null);
        fields.get("maxAirHits").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("topSpeed").set(UnitType.Hero_Alan_Schezar_Turret, 0.0);
        fields.get("acceleration").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("haltDistance").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("turnRadius").set(UnitType.Hero_Alan_Schezar_Turret, 0);
        fields.get("canProduce").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("canAttack").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("canMove").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isFlyer").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isInvincible").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isOrganic").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isMechanical").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isRobotic").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isDetector").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isRefinery").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isWorker").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("requiresPsi").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("requiresCreep").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isBurrowable").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isCloakable").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isBuilding").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isAddon").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isNeutral").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isHero").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isPowerup").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isBeacon").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isSpell").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("producesCreep").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("producesLarva").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isMineralField").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("isCritter").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Alan_Schezar_Turret, false);
        fields.get("researchesWhat").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Jim_Raynor_Vulture() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Jim_Raynor_Vulture, 19);
        fields.get("race").set(UnitType.Hero_Jim_Raynor_Vulture, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Jim_Raynor_Vulture, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Jim_Raynor_Vulture, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Jim_Raynor_Vulture, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList(TechType.Spider_Mines)));
        fields.get("upgrades").set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Jim_Raynor_Vulture, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Jim_Raynor_Vulture, 300);
        fields.get("maxShields").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("armor").set(UnitType.Hero_Jim_Raynor_Vulture, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Jim_Raynor_Vulture, 150);
        fields.get("gasPrice").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("buildTime").set(UnitType.Hero_Jim_Raynor_Vulture, 900);
        fields.get("supplyRequired").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Jim_Raynor_Vulture, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("buildScore").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("destroyScore").set(UnitType.Hero_Jim_Raynor_Vulture, 300);
        fields.get("size").set(UnitType.Hero_Jim_Raynor_Vulture, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Hero_Jim_Raynor_Vulture, 1);
        fields.get("tileHeight").set(UnitType.Hero_Jim_Raynor_Vulture, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Jim_Raynor_Vulture, 16);
        fields.get("dimensionUp").set(UnitType.Hero_Jim_Raynor_Vulture, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Jim_Raynor_Vulture, 15);
        fields.get("dimensionDown").set(UnitType.Hero_Jim_Raynor_Vulture, 15);
        fields.get("width").set(UnitType.Hero_Jim_Raynor_Vulture, 32);
        fields.get("height").set(UnitType.Hero_Jim_Raynor_Vulture, 32);
        fields.get("seekRange").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("sightRange").set(UnitType.Hero_Jim_Raynor_Vulture, 256);
        fields.get("groundWeapon").set(UnitType.Hero_Jim_Raynor_Vulture, WeaponType.Fragmentation_Grenade_Jim_Raynor);
        fields.get("maxGroundHits").set(UnitType.Hero_Jim_Raynor_Vulture, 1);
        fields.get("airWeapon").set(UnitType.Hero_Jim_Raynor_Vulture, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
        fields.get("topSpeed").set(UnitType.Hero_Jim_Raynor_Vulture, 6.4);
        fields.get("acceleration").set(UnitType.Hero_Jim_Raynor_Vulture, 100);
        fields.get("haltDistance").set(UnitType.Hero_Jim_Raynor_Vulture, 14569);
        fields.get("turnRadius").set(UnitType.Hero_Jim_Raynor_Vulture, 40);
        fields.get("canProduce").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("canAttack").set(UnitType.Hero_Jim_Raynor_Vulture, true);
        fields.get("canMove").set(UnitType.Hero_Jim_Raynor_Vulture, true);
        fields.get("isFlyer").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isInvincible").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isOrganic").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isMechanical").set(UnitType.Hero_Jim_Raynor_Vulture, true);
        fields.get("isRobotic").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isDetector").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isRefinery").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isWorker").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("requiresPsi").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("requiresCreep").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isBurrowable").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isCloakable").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isBuilding").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isAddon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isNeutral").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isHero").set(UnitType.Hero_Jim_Raynor_Vulture, true);
        fields.get("isPowerup").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isBeacon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isSpell").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("producesCreep").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("producesLarva").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isMineralField").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("isCritter").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
        fields.get("researchesWhat").set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Jim_Raynor_Marine() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Jim_Raynor_Marine, 20);
        fields.get("race").set(UnitType.Hero_Jim_Raynor_Marine, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Jim_Raynor_Marine, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Jim_Raynor_Marine, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Jim_Raynor_Marine, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
        fields.get("upgrades").set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Jim_Raynor_Marine, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Jim_Raynor_Marine, 200);
        fields.get("maxShields").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("armor").set(UnitType.Hero_Jim_Raynor_Marine, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Jim_Raynor_Marine, 50);
        fields.get("gasPrice").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("buildTime").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("supplyRequired").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("buildScore").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("destroyScore").set(UnitType.Hero_Jim_Raynor_Marine, 200);
        fields.get("size").set(UnitType.Hero_Jim_Raynor_Marine, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("tileHeight").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Jim_Raynor_Marine, 8);
        fields.get("dimensionUp").set(UnitType.Hero_Jim_Raynor_Marine, 9);
        fields.get("dimensionRight").set(UnitType.Hero_Jim_Raynor_Marine, 8);
        fields.get("dimensionDown").set(UnitType.Hero_Jim_Raynor_Marine, 10);
        fields.get("width").set(UnitType.Hero_Jim_Raynor_Marine, 17);
        fields.get("height").set(UnitType.Hero_Jim_Raynor_Marine, 20);
        fields.get("seekRange").set(UnitType.Hero_Jim_Raynor_Marine, 0);
        fields.get("sightRange").set(UnitType.Hero_Jim_Raynor_Marine, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Jim_Raynor_Marine, WeaponType.Gauss_Rifle_Jim_Raynor);
        fields.get("maxGroundHits").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("airWeapon").set(UnitType.Hero_Jim_Raynor_Marine, WeaponType.Gauss_Rifle_Jim_Raynor);
        fields.get("maxAirHits").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("topSpeed").set(UnitType.Hero_Jim_Raynor_Marine, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("haltDistance").set(UnitType.Hero_Jim_Raynor_Marine, 1);
        fields.get("turnRadius").set(UnitType.Hero_Jim_Raynor_Marine, 40);
        fields.get("canProduce").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("canAttack").set(UnitType.Hero_Jim_Raynor_Marine, true);
        fields.get("canMove").set(UnitType.Hero_Jim_Raynor_Marine, true);
        fields.get("isFlyer").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isInvincible").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isOrganic").set(UnitType.Hero_Jim_Raynor_Marine, true);
        fields.get("isMechanical").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isRobotic").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isDetector").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isRefinery").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isWorker").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("requiresPsi").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("requiresCreep").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isBurrowable").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isCloakable").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isBuilding").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isAddon").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isNeutral").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isHero").set(UnitType.Hero_Jim_Raynor_Marine, true);
        fields.get("isPowerup").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isBeacon").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isSpell").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("producesCreep").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("producesLarva").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isMineralField").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("isCritter").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Jim_Raynor_Marine, false);
        fields.get("researchesWhat").set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Tom_Kazansky() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Tom_Kazansky, 21);
        fields.get("race").set(UnitType.Hero_Tom_Kazansky, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Tom_Kazansky, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Tom_Kazansky, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Tom_Kazansky, TechType.Cloaking_Field);
        fields.get("abilities").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList(TechType.Cloaking_Field)));
        fields.get("upgrades").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Tom_Kazansky, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Tom_Kazansky, 500);
        fields.get("maxShields").set(UnitType.Hero_Tom_Kazansky, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Tom_Kazansky, 250);
        fields.get("armor").set(UnitType.Hero_Tom_Kazansky, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Tom_Kazansky, 400);
        fields.get("gasPrice").set(UnitType.Hero_Tom_Kazansky, 200);
        fields.get("buildTime").set(UnitType.Hero_Tom_Kazansky, 1800);
        fields.get("supplyRequired").set(UnitType.Hero_Tom_Kazansky, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Tom_Kazansky, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Tom_Kazansky, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Tom_Kazansky, 0);
        fields.get("buildScore").set(UnitType.Hero_Tom_Kazansky, 0);
        fields.get("destroyScore").set(UnitType.Hero_Tom_Kazansky, 1600);
        fields.get("size").set(UnitType.Hero_Tom_Kazansky, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Tom_Kazansky, 1);
        fields.get("tileHeight").set(UnitType.Hero_Tom_Kazansky, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Tom_Kazansky, 19);
        fields.get("dimensionUp").set(UnitType.Hero_Tom_Kazansky, 15);
        fields.get("dimensionRight").set(UnitType.Hero_Tom_Kazansky, 18);
        fields.get("dimensionDown").set(UnitType.Hero_Tom_Kazansky, 14);
        fields.get("width").set(UnitType.Hero_Tom_Kazansky, 38);
        fields.get("height").set(UnitType.Hero_Tom_Kazansky, 30);
        fields.get("seekRange").set(UnitType.Hero_Tom_Kazansky, 0);
        fields.get("sightRange").set(UnitType.Hero_Tom_Kazansky, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Tom_Kazansky, WeaponType.Burst_Lasers_Tom_Kazansky);
        fields.get("maxGroundHits").set(UnitType.Hero_Tom_Kazansky, 1);
        fields.get("airWeapon").set(UnitType.Hero_Tom_Kazansky, WeaponType.Gemini_Missiles_Tom_Kazansky);
        fields.get("maxAirHits").set(UnitType.Hero_Tom_Kazansky, 1);
        fields.get("topSpeed").set(UnitType.Hero_Tom_Kazansky, 6.67);
        fields.get("acceleration").set(UnitType.Hero_Tom_Kazansky, 67);
        fields.get("haltDistance").set(UnitType.Hero_Tom_Kazansky, 21745);
        fields.get("turnRadius").set(UnitType.Hero_Tom_Kazansky, 40);
        fields.get("canProduce").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("canAttack").set(UnitType.Hero_Tom_Kazansky, true);
        fields.get("canMove").set(UnitType.Hero_Tom_Kazansky, true);
        fields.get("isFlyer").set(UnitType.Hero_Tom_Kazansky, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Tom_Kazansky, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isInvincible").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isOrganic").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isMechanical").set(UnitType.Hero_Tom_Kazansky, true);
        fields.get("isRobotic").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isDetector").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isRefinery").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isWorker").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("requiresPsi").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("requiresCreep").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isBurrowable").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isCloakable").set(UnitType.Hero_Tom_Kazansky, true);
        fields.get("isBuilding").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isAddon").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isNeutral").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isHero").set(UnitType.Hero_Tom_Kazansky, true);
        fields.get("isPowerup").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isBeacon").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isSpell").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("producesCreep").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("producesLarva").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isMineralField").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("isCritter").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Tom_Kazansky, false);
        fields.get("researchesWhat").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Magellan() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Magellan, 22);
        fields.get("race").set(UnitType.Hero_Magellan, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Magellan, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Magellan, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Magellan, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList(TechType.EMP_Shockwave, TechType.Defensive_Matrix, TechType.Irradiate)));
        fields.get("upgrades").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating)));
        fields.get("armorUpgrade").set(UnitType.Hero_Magellan, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Magellan, 800);
        fields.get("maxShields").set(UnitType.Hero_Magellan, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Magellan, 250);
        fields.get("armor").set(UnitType.Hero_Magellan, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Magellan, 50);
        fields.get("gasPrice").set(UnitType.Hero_Magellan, 600);
        fields.get("buildTime").set(UnitType.Hero_Magellan, 2400);
        fields.get("supplyRequired").set(UnitType.Hero_Magellan, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Magellan, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Magellan, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Magellan, 0);
        fields.get("buildScore").set(UnitType.Hero_Magellan, 0);
        fields.get("destroyScore").set(UnitType.Hero_Magellan, 2500);
        fields.get("size").set(UnitType.Hero_Magellan, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Magellan, 2);
        fields.get("tileHeight").set(UnitType.Hero_Magellan, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Magellan, 32);
        fields.get("dimensionUp").set(UnitType.Hero_Magellan, 33);
        fields.get("dimensionRight").set(UnitType.Hero_Magellan, 32);
        fields.get("dimensionDown").set(UnitType.Hero_Magellan, 16);
        fields.get("width").set(UnitType.Hero_Magellan, 65);
        fields.get("height").set(UnitType.Hero_Magellan, 50);
        fields.get("seekRange").set(UnitType.Hero_Magellan, 0);
        fields.get("sightRange").set(UnitType.Hero_Magellan, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Magellan, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Hero_Magellan, 0);
        fields.get("airWeapon").set(UnitType.Hero_Magellan, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Magellan, 0);
        fields.get("topSpeed").set(UnitType.Hero_Magellan, 5.0);
        fields.get("acceleration").set(UnitType.Hero_Magellan, 50);
        fields.get("haltDistance").set(UnitType.Hero_Magellan, 5120);
        fields.get("turnRadius").set(UnitType.Hero_Magellan, 40);
        fields.get("canProduce").set(UnitType.Hero_Magellan, false);
        fields.get("canAttack").set(UnitType.Hero_Magellan, false);
        fields.get("canMove").set(UnitType.Hero_Magellan, true);
        fields.get("isFlyer").set(UnitType.Hero_Magellan, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Magellan, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Magellan, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Magellan, false);
        fields.get("isInvincible").set(UnitType.Hero_Magellan, false);
        fields.get("isOrganic").set(UnitType.Hero_Magellan, false);
        fields.get("isMechanical").set(UnitType.Hero_Magellan, true);
        fields.get("isRobotic").set(UnitType.Hero_Magellan, false);
        fields.get("isDetector").set(UnitType.Hero_Magellan, true);
        fields.get("isResourceContainer").set(UnitType.Hero_Magellan, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Magellan, false);
        fields.get("isRefinery").set(UnitType.Hero_Magellan, false);
        fields.get("isWorker").set(UnitType.Hero_Magellan, false);
        fields.get("requiresPsi").set(UnitType.Hero_Magellan, false);
        fields.get("requiresCreep").set(UnitType.Hero_Magellan, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Magellan, false);
        fields.get("isBurrowable").set(UnitType.Hero_Magellan, false);
        fields.get("isCloakable").set(UnitType.Hero_Magellan, false);
        fields.get("isBuilding").set(UnitType.Hero_Magellan, false);
        fields.get("isAddon").set(UnitType.Hero_Magellan, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Magellan, false);
        fields.get("isNeutral").set(UnitType.Hero_Magellan, false);
        fields.get("isHero").set(UnitType.Hero_Magellan, true);
        fields.get("isPowerup").set(UnitType.Hero_Magellan, false);
        fields.get("isBeacon").set(UnitType.Hero_Magellan, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Magellan, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Magellan, false);
        fields.get("isSpell").set(UnitType.Hero_Magellan, false);
        fields.get("producesCreep").set(UnitType.Hero_Magellan, false);
        fields.get("producesLarva").set(UnitType.Hero_Magellan, false);
        fields.get("isMineralField").set(UnitType.Hero_Magellan, false);
        fields.get("isCritter").set(UnitType.Hero_Magellan, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Magellan, false);
        fields.get("researchesWhat").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Edmund_Duke_Tank_Mode() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 23);
        fields.get("race").set(UnitType.Hero_Edmund_Duke_Tank_Mode, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Edmund_Duke_Tank_Mode, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
        fields.get("upgrades").set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Edmund_Duke_Tank_Mode, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 400);
        fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
        fields.get("armor").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 300);
        fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 200);
        fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 4);
        fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
        fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
        fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1400);
        fields.get("size").set(UnitType.Hero_Edmund_Duke_Tank_Mode, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
        fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 16);
        fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 15);
        fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 15);
        fields.get("width").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 32);
        fields.get("height").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 32);
        fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 256);
        fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, WeaponType.Arclite_Cannon_Edmund_Duke);
        fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
        fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
        fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
        fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
        fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 13);
        fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
        fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
        fields.get("isFlyer").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isInvincible").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isOrganic").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isMechanical").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
        fields.get("isRobotic").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isDetector").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isRefinery").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isWorker").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isBurrowable").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isCloakable").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isAddon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isNeutral").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isHero").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
        fields.get("isPowerup").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isBeacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isSpell").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isMineralField").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("isCritter").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
        fields.get("researchesWhat").set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Edmund_Duke_Tank_Mode_Turret() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("race").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("whatBuilds").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("abilities").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("armor").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("size").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("width").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("height").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("groundWeapon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
        fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0.0);
        fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
        fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isFlyer").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isInvincible").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isOrganic").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isMechanical").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isRobotic").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isDetector").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isRefinery").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isWorker").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isBurrowable").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isCloakable").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isAddon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isNeutral").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isHero").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isPowerup").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isBeacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isSpell").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isMineralField").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("isCritter").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
        fields.get("researchesWhat").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Edmund_Duke_Siege_Mode() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 25);
        fields.get("race").set(UnitType.Hero_Edmund_Duke_Siege_Mode, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Edmund_Duke_Siege_Mode, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
        fields.get("upgrades").set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Edmund_Duke_Siege_Mode, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 400);
        fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("armor").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 300);
        fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 200);
        fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1400);
        fields.get("size").set(UnitType.Hero_Edmund_Duke_Siege_Mode, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
        fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 16);
        fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 15);
        fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 15);
        fields.get("width").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 32);
        fields.get("height").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 32);
        fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, WeaponType.Arclite_Shock_Cannon_Edmund_Duke);
        fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
        fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
        fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0.0);
        fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
        fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
        fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 40);
        fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Siege_Mode, true);
        fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isFlyer").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isInvincible").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isOrganic").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isMechanical").set(UnitType.Hero_Edmund_Duke_Siege_Mode, true);
        fields.get("isRobotic").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isDetector").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isRefinery").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isWorker").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isBurrowable").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isCloakable").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isAddon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isNeutral").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isHero").set(UnitType.Hero_Edmund_Duke_Siege_Mode, true);
        fields.get("isPowerup").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isBeacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isSpell").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isMineralField").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("isCritter").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
        fields.get("researchesWhat").set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Edmund_Duke_Siege_Mode_Turret() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("race").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("whatBuilds").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("abilities").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("armor").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("size").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("width").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("height").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("groundWeapon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
        fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0.0);
        fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
        fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isFlyer").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isInvincible").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isOrganic").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isMechanical").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isRobotic").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isDetector").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isRefinery").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isWorker").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isBurrowable").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isCloakable").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isAddon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isNeutral").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isHero").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isPowerup").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isBeacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isSpell").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isMineralField").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("isCritter").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
        fields.get("researchesWhat").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Arcturus_Mengsk() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Arcturus_Mengsk, 27);
        fields.get("race").set(UnitType.Hero_Arcturus_Mengsk, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Arcturus_Mengsk, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Arcturus_Mengsk, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Arcturus_Mengsk, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Arcturus_Mengsk, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Arcturus_Mengsk, 1000);
        fields.get("maxShields").set(UnitType.Hero_Arcturus_Mengsk, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Arcturus_Mengsk, 250);
        fields.get("armor").set(UnitType.Hero_Arcturus_Mengsk, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Arcturus_Mengsk, 800);
        fields.get("gasPrice").set(UnitType.Hero_Arcturus_Mengsk, 600);
        fields.get("buildTime").set(UnitType.Hero_Arcturus_Mengsk, 4800);
        fields.get("supplyRequired").set(UnitType.Hero_Arcturus_Mengsk, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Arcturus_Mengsk, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Arcturus_Mengsk, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Arcturus_Mengsk, 0);
        fields.get("buildScore").set(UnitType.Hero_Arcturus_Mengsk, 0);
        fields.get("destroyScore").set(UnitType.Hero_Arcturus_Mengsk, 4800);
        fields.get("size").set(UnitType.Hero_Arcturus_Mengsk, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Arcturus_Mengsk, 2);
        fields.get("tileHeight").set(UnitType.Hero_Arcturus_Mengsk, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Arcturus_Mengsk, 37);
        fields.get("dimensionUp").set(UnitType.Hero_Arcturus_Mengsk, 29);
        fields.get("dimensionRight").set(UnitType.Hero_Arcturus_Mengsk, 37);
        fields.get("dimensionDown").set(UnitType.Hero_Arcturus_Mengsk, 29);
        fields.get("width").set(UnitType.Hero_Arcturus_Mengsk, 75);
        fields.get("height").set(UnitType.Hero_Arcturus_Mengsk, 59);
        fields.get("seekRange").set(UnitType.Hero_Arcturus_Mengsk, 0);
        fields.get("sightRange").set(UnitType.Hero_Arcturus_Mengsk, 256);
        fields.get("groundWeapon").set(UnitType.Hero_Arcturus_Mengsk, WeaponType.ATS_Laser_Battery_Hero);
        fields.get("maxGroundHits").set(UnitType.Hero_Arcturus_Mengsk, 1);
        fields.get("airWeapon").set(UnitType.Hero_Arcturus_Mengsk, WeaponType.ATA_Laser_Battery_Hero);
        fields.get("maxAirHits").set(UnitType.Hero_Arcturus_Mengsk, 1);
        fields.get("topSpeed").set(UnitType.Hero_Arcturus_Mengsk, 2.5);
        fields.get("acceleration").set(UnitType.Hero_Arcturus_Mengsk, 27);
        fields.get("haltDistance").set(UnitType.Hero_Arcturus_Mengsk, 7585);
        fields.get("turnRadius").set(UnitType.Hero_Arcturus_Mengsk, 20);
        fields.get("canProduce").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("canAttack").set(UnitType.Hero_Arcturus_Mengsk, true);
        fields.get("canMove").set(UnitType.Hero_Arcturus_Mengsk, true);
        fields.get("isFlyer").set(UnitType.Hero_Arcturus_Mengsk, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Arcturus_Mengsk, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isInvincible").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isOrganic").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isMechanical").set(UnitType.Hero_Arcturus_Mengsk, true);
        fields.get("isRobotic").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isDetector").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isRefinery").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isWorker").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("requiresPsi").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("requiresCreep").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isBurrowable").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isCloakable").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isBuilding").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isAddon").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isNeutral").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isHero").set(UnitType.Hero_Arcturus_Mengsk, true);
        fields.get("isPowerup").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isBeacon").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isSpell").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("producesCreep").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("producesLarva").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isMineralField").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("isCritter").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Arcturus_Mengsk, false);
        fields.get("researchesWhat").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Hyperion() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Hyperion, 28);
        fields.get("race").set(UnitType.Hero_Hyperion, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Hyperion, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Hyperion, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Hyperion, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
        fields.get("upgrades").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Hyperion, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Hyperion, 850);
        fields.get("maxShields").set(UnitType.Hero_Hyperion, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Hyperion, 250);
        fields.get("armor").set(UnitType.Hero_Hyperion, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Hyperion, 800);
        fields.get("gasPrice").set(UnitType.Hero_Hyperion, 600);
        fields.get("buildTime").set(UnitType.Hero_Hyperion, 2400);
        fields.get("supplyRequired").set(UnitType.Hero_Hyperion, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Hyperion, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Hyperion, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Hyperion, 0);
        fields.get("buildScore").set(UnitType.Hero_Hyperion, 0);
        fields.get("destroyScore").set(UnitType.Hero_Hyperion, 4800);
        fields.get("size").set(UnitType.Hero_Hyperion, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Hyperion, 2);
        fields.get("tileHeight").set(UnitType.Hero_Hyperion, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Hyperion, 37);
        fields.get("dimensionUp").set(UnitType.Hero_Hyperion, 29);
        fields.get("dimensionRight").set(UnitType.Hero_Hyperion, 37);
        fields.get("dimensionDown").set(UnitType.Hero_Hyperion, 29);
        fields.get("width").set(UnitType.Hero_Hyperion, 75);
        fields.get("height").set(UnitType.Hero_Hyperion, 59);
        fields.get("seekRange").set(UnitType.Hero_Hyperion, 0);
        fields.get("sightRange").set(UnitType.Hero_Hyperion, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Hyperion, WeaponType.ATS_Laser_Battery_Hyperion);
        fields.get("maxGroundHits").set(UnitType.Hero_Hyperion, 1);
        fields.get("airWeapon").set(UnitType.Hero_Hyperion, WeaponType.ATA_Laser_Battery_Hyperion);
        fields.get("maxAirHits").set(UnitType.Hero_Hyperion, 1);
        fields.get("topSpeed").set(UnitType.Hero_Hyperion, 2.5);
        fields.get("acceleration").set(UnitType.Hero_Hyperion, 27);
        fields.get("haltDistance").set(UnitType.Hero_Hyperion, 7585);
        fields.get("turnRadius").set(UnitType.Hero_Hyperion, 20);
        fields.get("canProduce").set(UnitType.Hero_Hyperion, false);
        fields.get("canAttack").set(UnitType.Hero_Hyperion, true);
        fields.get("canMove").set(UnitType.Hero_Hyperion, true);
        fields.get("isFlyer").set(UnitType.Hero_Hyperion, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Hyperion, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Hyperion, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Hyperion, false);
        fields.get("isInvincible").set(UnitType.Hero_Hyperion, false);
        fields.get("isOrganic").set(UnitType.Hero_Hyperion, false);
        fields.get("isMechanical").set(UnitType.Hero_Hyperion, true);
        fields.get("isRobotic").set(UnitType.Hero_Hyperion, false);
        fields.get("isDetector").set(UnitType.Hero_Hyperion, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Hyperion, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Hyperion, false);
        fields.get("isRefinery").set(UnitType.Hero_Hyperion, false);
        fields.get("isWorker").set(UnitType.Hero_Hyperion, false);
        fields.get("requiresPsi").set(UnitType.Hero_Hyperion, false);
        fields.get("requiresCreep").set(UnitType.Hero_Hyperion, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Hyperion, false);
        fields.get("isBurrowable").set(UnitType.Hero_Hyperion, false);
        fields.get("isCloakable").set(UnitType.Hero_Hyperion, false);
        fields.get("isBuilding").set(UnitType.Hero_Hyperion, false);
        fields.get("isAddon").set(UnitType.Hero_Hyperion, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Hyperion, false);
        fields.get("isNeutral").set(UnitType.Hero_Hyperion, false);
        fields.get("isHero").set(UnitType.Hero_Hyperion, true);
        fields.get("isPowerup").set(UnitType.Hero_Hyperion, false);
        fields.get("isBeacon").set(UnitType.Hero_Hyperion, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Hyperion, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Hyperion, false);
        fields.get("isSpell").set(UnitType.Hero_Hyperion, false);
        fields.get("producesCreep").set(UnitType.Hero_Hyperion, false);
        fields.get("producesLarva").set(UnitType.Hero_Hyperion, false);
        fields.get("isMineralField").set(UnitType.Hero_Hyperion, false);
        fields.get("isCritter").set(UnitType.Hero_Hyperion, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Hyperion, false);
        fields.get("researchesWhat").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Norad_II() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Norad_II, 29);
        fields.get("race").set(UnitType.Hero_Norad_II, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Norad_II, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Norad_II, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Norad_II, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
        fields.get("upgrades").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Norad_II, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Norad_II, 700);
        fields.get("maxShields").set(UnitType.Hero_Norad_II, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Norad_II, 250);
        fields.get("armor").set(UnitType.Hero_Norad_II, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Norad_II, 800);
        fields.get("gasPrice").set(UnitType.Hero_Norad_II, 600);
        fields.get("buildTime").set(UnitType.Hero_Norad_II, 4800);
        fields.get("supplyRequired").set(UnitType.Hero_Norad_II, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Norad_II, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Norad_II, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Norad_II, 0);
        fields.get("buildScore").set(UnitType.Hero_Norad_II, 0);
        fields.get("destroyScore").set(UnitType.Hero_Norad_II, 4800);
        fields.get("size").set(UnitType.Hero_Norad_II, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Norad_II, 2);
        fields.get("tileHeight").set(UnitType.Hero_Norad_II, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Norad_II, 37);
        fields.get("dimensionUp").set(UnitType.Hero_Norad_II, 29);
        fields.get("dimensionRight").set(UnitType.Hero_Norad_II, 37);
        fields.get("dimensionDown").set(UnitType.Hero_Norad_II, 29);
        fields.get("width").set(UnitType.Hero_Norad_II, 75);
        fields.get("height").set(UnitType.Hero_Norad_II, 59);
        fields.get("seekRange").set(UnitType.Hero_Norad_II, 0);
        fields.get("sightRange").set(UnitType.Hero_Norad_II, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Norad_II, WeaponType.ATS_Laser_Battery_Hero);
        fields.get("maxGroundHits").set(UnitType.Hero_Norad_II, 1);
        fields.get("airWeapon").set(UnitType.Hero_Norad_II, WeaponType.ATA_Laser_Battery_Hero);
        fields.get("maxAirHits").set(UnitType.Hero_Norad_II, 1);
        fields.get("topSpeed").set(UnitType.Hero_Norad_II, 2.5);
        fields.get("acceleration").set(UnitType.Hero_Norad_II, 27);
        fields.get("haltDistance").set(UnitType.Hero_Norad_II, 7585);
        fields.get("turnRadius").set(UnitType.Hero_Norad_II, 20);
        fields.get("canProduce").set(UnitType.Hero_Norad_II, false);
        fields.get("canAttack").set(UnitType.Hero_Norad_II, true);
        fields.get("canMove").set(UnitType.Hero_Norad_II, true);
        fields.get("isFlyer").set(UnitType.Hero_Norad_II, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Norad_II, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Norad_II, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Norad_II, false);
        fields.get("isInvincible").set(UnitType.Hero_Norad_II, false);
        fields.get("isOrganic").set(UnitType.Hero_Norad_II, false);
        fields.get("isMechanical").set(UnitType.Hero_Norad_II, true);
        fields.get("isRobotic").set(UnitType.Hero_Norad_II, false);
        fields.get("isDetector").set(UnitType.Hero_Norad_II, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Norad_II, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Norad_II, false);
        fields.get("isRefinery").set(UnitType.Hero_Norad_II, false);
        fields.get("isWorker").set(UnitType.Hero_Norad_II, false);
        fields.get("requiresPsi").set(UnitType.Hero_Norad_II, false);
        fields.get("requiresCreep").set(UnitType.Hero_Norad_II, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Norad_II, false);
        fields.get("isBurrowable").set(UnitType.Hero_Norad_II, false);
        fields.get("isCloakable").set(UnitType.Hero_Norad_II, false);
        fields.get("isBuilding").set(UnitType.Hero_Norad_II, false);
        fields.get("isAddon").set(UnitType.Hero_Norad_II, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Norad_II, false);
        fields.get("isNeutral").set(UnitType.Hero_Norad_II, false);
        fields.get("isHero").set(UnitType.Hero_Norad_II, true);
        fields.get("isPowerup").set(UnitType.Hero_Norad_II, false);
        fields.get("isBeacon").set(UnitType.Hero_Norad_II, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Norad_II, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Norad_II, false);
        fields.get("isSpell").set(UnitType.Hero_Norad_II, false);
        fields.get("producesCreep").set(UnitType.Hero_Norad_II, false);
        fields.get("producesLarva").set(UnitType.Hero_Norad_II, false);
        fields.get("isMineralField").set(UnitType.Hero_Norad_II, false);
        fields.get("isCritter").set(UnitType.Hero_Norad_II, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Norad_II, false);
        fields.get("researchesWhat").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Siege_Tank_Siege_Mode() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Siege_Tank_Siege_Mode, 30);
        fields.get("race").set(UnitType.Terran_Siege_Tank_Siege_Mode, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Siege_Tank_Siege_Mode, new Pair(UnitType.Terran_Factory, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList(UnitType.Terran_Factory, UnitType.Terran_Machine_Shop)));
        fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Siege_Mode, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Siege_Mode, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
        fields.get("upgrades").set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Terran_Siege_Tank_Siege_Mode, UpgradeType.Terran_Vehicle_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Siege_Mode, 150);
        fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
        fields.get("armor").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode, 150);
        fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode, 100);
        fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Siege_Mode, 750);
        fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode, 4);
        fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
        fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
        fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Siege_Mode, 700);
        fields.get("size").set(UnitType.Terran_Siege_Tank_Siege_Mode, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
        fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Siege_Mode, 16);
        fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Siege_Mode, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Siege_Mode, 15);
        fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Siege_Mode, 15);
        fields.get("width").set(UnitType.Terran_Siege_Tank_Siege_Mode, 32);
        fields.get("height").set(UnitType.Terran_Siege_Tank_Siege_Mode, 32);
        fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
        fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Siege_Mode, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Siege_Tank_Siege_Mode, WeaponType.Arclite_Shock_Cannon);
        fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
        fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Siege_Mode, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
        fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
        fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
        fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Siege_Mode, 40);
        fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Siege_Mode, true);
        fields.get("canMove").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isFlyer").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isInvincible").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isOrganic").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isMechanical").set(UnitType.Terran_Siege_Tank_Siege_Mode, true);
        fields.get("isRobotic").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isDetector").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isRefinery").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isWorker").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isBurrowable").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isCloakable").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isAddon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isNeutral").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isHero").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isPowerup").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isBeacon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isSpell").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isMineralField").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("isCritter").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
        fields.get("researchesWhat").set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Siege_Tank_Siege_Mode_Turret() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("race").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("whatBuilds").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("requiredUnits").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("abilities").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("armor").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("size").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("width").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("height").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("groundWeapon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
        fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
        fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("canMove").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isFlyer").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isInvincible").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isOrganic").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isMechanical").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isRobotic").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isDetector").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isRefinery").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isWorker").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isBurrowable").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isCloakable").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isAddon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isNeutral").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isHero").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isPowerup").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isBeacon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isSpell").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isMineralField").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("isCritter").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
        fields.get("researchesWhat").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Firebat() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Firebat, 32);
        fields.get("race").set(UnitType.Terran_Firebat, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Firebat, new Pair(UnitType.Terran_Barracks, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList(UnitType.Terran_Barracks, UnitType.Terran_Academy)));
        fields.get("requiredTech").set(UnitType.Terran_Firebat, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Firebat, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
        fields.get("upgrades").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Terran_Firebat, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Terran_Firebat, 50);
        fields.get("maxShields").set(UnitType.Terran_Firebat, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Firebat, 0);
        fields.get("armor").set(UnitType.Terran_Firebat, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Firebat, 50);
        fields.get("gasPrice").set(UnitType.Terran_Firebat, 25);
        fields.get("buildTime").set(UnitType.Terran_Firebat, 360);
        fields.get("supplyRequired").set(UnitType.Terran_Firebat, 2);
        fields.get("supplyProvided").set(UnitType.Terran_Firebat, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Firebat, 1);
        fields.get("spaceProvided").set(UnitType.Terran_Firebat, 0);
        fields.get("buildScore").set(UnitType.Terran_Firebat, 100);
        fields.get("destroyScore").set(UnitType.Terran_Firebat, 200);
        fields.get("size").set(UnitType.Terran_Firebat, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Terran_Firebat, 1);
        fields.get("tileHeight").set(UnitType.Terran_Firebat, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Firebat, 11);
        fields.get("dimensionUp").set(UnitType.Terran_Firebat, 7);
        fields.get("dimensionRight").set(UnitType.Terran_Firebat, 11);
        fields.get("dimensionDown").set(UnitType.Terran_Firebat, 14);
        fields.get("width").set(UnitType.Terran_Firebat, 23);
        fields.get("height").set(UnitType.Terran_Firebat, 22);
        fields.get("seekRange").set(UnitType.Terran_Firebat, 96);
        fields.get("sightRange").set(UnitType.Terran_Firebat, 224);
        fields.get("groundWeapon").set(UnitType.Terran_Firebat, WeaponType.Flame_Thrower);
        fields.get("maxGroundHits").set(UnitType.Terran_Firebat, 3);
        fields.get("airWeapon").set(UnitType.Terran_Firebat, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Firebat, 0);
        fields.get("topSpeed").set(UnitType.Terran_Firebat, 4.0);
        fields.get("acceleration").set(UnitType.Terran_Firebat, 1);
        fields.get("haltDistance").set(UnitType.Terran_Firebat, 1);
        fields.get("turnRadius").set(UnitType.Terran_Firebat, 40);
        fields.get("canProduce").set(UnitType.Terran_Firebat, false);
        fields.get("canAttack").set(UnitType.Terran_Firebat, true);
        fields.get("canMove").set(UnitType.Terran_Firebat, true);
        fields.get("isFlyer").set(UnitType.Terran_Firebat, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Firebat, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Firebat, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Firebat, false);
        fields.get("isInvincible").set(UnitType.Terran_Firebat, false);
        fields.get("isOrganic").set(UnitType.Terran_Firebat, true);
        fields.get("isMechanical").set(UnitType.Terran_Firebat, false);
        fields.get("isRobotic").set(UnitType.Terran_Firebat, false);
        fields.get("isDetector").set(UnitType.Terran_Firebat, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Firebat, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Firebat, false);
        fields.get("isRefinery").set(UnitType.Terran_Firebat, false);
        fields.get("isWorker").set(UnitType.Terran_Firebat, false);
        fields.get("requiresPsi").set(UnitType.Terran_Firebat, false);
        fields.get("requiresCreep").set(UnitType.Terran_Firebat, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Firebat, false);
        fields.get("isBurrowable").set(UnitType.Terran_Firebat, false);
        fields.get("isCloakable").set(UnitType.Terran_Firebat, false);
        fields.get("isBuilding").set(UnitType.Terran_Firebat, false);
        fields.get("isAddon").set(UnitType.Terran_Firebat, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Firebat, false);
        fields.get("isNeutral").set(UnitType.Terran_Firebat, false);
        fields.get("isHero").set(UnitType.Terran_Firebat, false);
        fields.get("isPowerup").set(UnitType.Terran_Firebat, false);
        fields.get("isBeacon").set(UnitType.Terran_Firebat, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Firebat, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Firebat, false);
        fields.get("isSpell").set(UnitType.Terran_Firebat, false);
        fields.get("producesCreep").set(UnitType.Terran_Firebat, false);
        fields.get("producesLarva").set(UnitType.Terran_Firebat, false);
        fields.get("isMineralField").set(UnitType.Terran_Firebat, false);
        fields.get("isCritter").set(UnitType.Terran_Firebat, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Firebat, false);
        fields.get("researchesWhat").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Spell_Scanner_Sweep() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Spell_Scanner_Sweep, 33);
        fields.get("race").set(UnitType.Spell_Scanner_Sweep, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Spell_Scanner_Sweep, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Spell_Scanner_Sweep, TechType.None);
        fields.get("cloakingTech").set(UnitType.Spell_Scanner_Sweep, TechType.None);
        fields.get("abilities").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Spell_Scanner_Sweep, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("maxShields").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("maxEnergy").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("armor").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("mineralPrice").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("gasPrice").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("buildTime").set(UnitType.Spell_Scanner_Sweep, 1);
        fields.get("supplyRequired").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("supplyProvided").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("spaceRequired").set(UnitType.Spell_Scanner_Sweep, 255);
        fields.get("spaceProvided").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("buildScore").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("destroyScore").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("size").set(UnitType.Spell_Scanner_Sweep, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Spell_Scanner_Sweep, 1);
        fields.get("tileHeight").set(UnitType.Spell_Scanner_Sweep, 1);
        fields.get("dimensionLeft").set(UnitType.Spell_Scanner_Sweep, 13);
        fields.get("dimensionUp").set(UnitType.Spell_Scanner_Sweep, 13);
        fields.get("dimensionRight").set(UnitType.Spell_Scanner_Sweep, 13);
        fields.get("dimensionDown").set(UnitType.Spell_Scanner_Sweep, 17);
        fields.get("width").set(UnitType.Spell_Scanner_Sweep, 27);
        fields.get("height").set(UnitType.Spell_Scanner_Sweep, 31);
        fields.get("seekRange").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("sightRange").set(UnitType.Spell_Scanner_Sweep, 320);
        fields.get("groundWeapon").set(UnitType.Spell_Scanner_Sweep, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("airWeapon").set(UnitType.Spell_Scanner_Sweep, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("topSpeed").set(UnitType.Spell_Scanner_Sweep, 0.0);
        fields.get("acceleration").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("haltDistance").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("turnRadius").set(UnitType.Spell_Scanner_Sweep, 0);
        fields.get("canProduce").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("canAttack").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("canMove").set(UnitType.Spell_Scanner_Sweep, true);
        fields.get("isFlyer").set(UnitType.Spell_Scanner_Sweep, true);
        fields.get("regeneratesHP").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isSpellcaster").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("hasPermanentCloak").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isInvincible").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isOrganic").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isMechanical").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isRobotic").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isDetector").set(UnitType.Spell_Scanner_Sweep, true);
        fields.get("isResourceContainer").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isResourceDepot").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isRefinery").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isWorker").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("requiresPsi").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("requiresCreep").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isBurrowable").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isCloakable").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isBuilding").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isAddon").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isFlyingBuilding").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isNeutral").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isHero").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isPowerup").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isBeacon").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isFlagBeacon").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isSpecialBuilding").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isSpell").set(UnitType.Spell_Scanner_Sweep, true);
        fields.get("producesCreep").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("producesLarva").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isMineralField").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("isCritter").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("canBuildAddon").set(UnitType.Spell_Scanner_Sweep, false);
        fields.get("researchesWhat").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Medic() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Medic, 34);
        fields.get("race").set(UnitType.Terran_Medic, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Medic, new Pair(UnitType.Terran_Barracks, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList(UnitType.Terran_Barracks, UnitType.Terran_Academy)));
        fields.get("requiredTech").set(UnitType.Terran_Medic, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Medic, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList(TechType.Restoration, TechType.Optical_Flare, TechType.Healing)));
        fields.get("upgrades").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Caduceus_Reactor)));
        fields.get("armorUpgrade").set(UnitType.Terran_Medic, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Terran_Medic, 60);
        fields.get("maxShields").set(UnitType.Terran_Medic, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Medic, 200);
        fields.get("armor").set(UnitType.Terran_Medic, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Medic, 50);
        fields.get("gasPrice").set(UnitType.Terran_Medic, 25);
        fields.get("buildTime").set(UnitType.Terran_Medic, 450);
        fields.get("supplyRequired").set(UnitType.Terran_Medic, 2);
        fields.get("supplyProvided").set(UnitType.Terran_Medic, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Medic, 1);
        fields.get("spaceProvided").set(UnitType.Terran_Medic, 0);
        fields.get("buildScore").set(UnitType.Terran_Medic, 125);
        fields.get("destroyScore").set(UnitType.Terran_Medic, 250);
        fields.get("size").set(UnitType.Terran_Medic, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Terran_Medic, 1);
        fields.get("tileHeight").set(UnitType.Terran_Medic, 1);
        fields.get("dimensionLeft").set(UnitType.Terran_Medic, 8);
        fields.get("dimensionUp").set(UnitType.Terran_Medic, 9);
        fields.get("dimensionRight").set(UnitType.Terran_Medic, 8);
        fields.get("dimensionDown").set(UnitType.Terran_Medic, 10);
        fields.get("width").set(UnitType.Terran_Medic, 17);
        fields.get("height").set(UnitType.Terran_Medic, 20);
        fields.get("seekRange").set(UnitType.Terran_Medic, 288);
        fields.get("sightRange").set(UnitType.Terran_Medic, 288);
        fields.get("groundWeapon").set(UnitType.Terran_Medic, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Medic, 0);
        fields.get("airWeapon").set(UnitType.Terran_Medic, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Medic, 0);
        fields.get("topSpeed").set(UnitType.Terran_Medic, 4.0);
        fields.get("acceleration").set(UnitType.Terran_Medic, 1);
        fields.get("haltDistance").set(UnitType.Terran_Medic, 1);
        fields.get("turnRadius").set(UnitType.Terran_Medic, 40);
        fields.get("canProduce").set(UnitType.Terran_Medic, false);
        fields.get("canAttack").set(UnitType.Terran_Medic, false);
        fields.get("canMove").set(UnitType.Terran_Medic, true);
        fields.get("isFlyer").set(UnitType.Terran_Medic, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Medic, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Medic, true);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Medic, false);
        fields.get("isInvincible").set(UnitType.Terran_Medic, false);
        fields.get("isOrganic").set(UnitType.Terran_Medic, true);
        fields.get("isMechanical").set(UnitType.Terran_Medic, false);
        fields.get("isRobotic").set(UnitType.Terran_Medic, false);
        fields.get("isDetector").set(UnitType.Terran_Medic, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Medic, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Medic, false);
        fields.get("isRefinery").set(UnitType.Terran_Medic, false);
        fields.get("isWorker").set(UnitType.Terran_Medic, false);
        fields.get("requiresPsi").set(UnitType.Terran_Medic, false);
        fields.get("requiresCreep").set(UnitType.Terran_Medic, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Medic, false);
        fields.get("isBurrowable").set(UnitType.Terran_Medic, false);
        fields.get("isCloakable").set(UnitType.Terran_Medic, false);
        fields.get("isBuilding").set(UnitType.Terran_Medic, false);
        fields.get("isAddon").set(UnitType.Terran_Medic, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Medic, false);
        fields.get("isNeutral").set(UnitType.Terran_Medic, false);
        fields.get("isHero").set(UnitType.Terran_Medic, false);
        fields.get("isPowerup").set(UnitType.Terran_Medic, false);
        fields.get("isBeacon").set(UnitType.Terran_Medic, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Medic, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Medic, false);
        fields.get("isSpell").set(UnitType.Terran_Medic, false);
        fields.get("producesCreep").set(UnitType.Terran_Medic, false);
        fields.get("producesLarva").set(UnitType.Terran_Medic, false);
        fields.get("isMineralField").set(UnitType.Terran_Medic, false);
        fields.get("isCritter").set(UnitType.Terran_Medic, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Medic, false);
        fields.get("researchesWhat").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Larva() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Larva, 35);
        fields.get("race").set(UnitType.Zerg_Larva, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Larva, new Pair(UnitType.Zerg_Hatchery, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList(UnitType.Zerg_Hatchery)));
        fields.get("requiredTech").set(UnitType.Zerg_Larva, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Larva, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Larva, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Larva, 25);
        fields.get("maxShields").set(UnitType.Zerg_Larva, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Larva, 0);
        fields.get("armor").set(UnitType.Zerg_Larva, 10);
        fields.get("mineralPrice").set(UnitType.Zerg_Larva, 1);
        fields.get("gasPrice").set(UnitType.Zerg_Larva, 1);
        fields.get("buildTime").set(UnitType.Zerg_Larva, 1);
        fields.get("supplyRequired").set(UnitType.Zerg_Larva, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Larva, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Larva, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Larva, 0);
        fields.get("buildScore").set(UnitType.Zerg_Larva, 0);
        fields.get("destroyScore").set(UnitType.Zerg_Larva, 10);
        fields.get("size").set(UnitType.Zerg_Larva, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Zerg_Larva, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Larva, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Larva, 8);
        fields.get("dimensionUp").set(UnitType.Zerg_Larva, 8);
        fields.get("dimensionRight").set(UnitType.Zerg_Larva, 7);
        fields.get("dimensionDown").set(UnitType.Zerg_Larva, 7);
        fields.get("width").set(UnitType.Zerg_Larva, 16);
        fields.get("height").set(UnitType.Zerg_Larva, 16);
        fields.get("seekRange").set(UnitType.Zerg_Larva, 0);
        fields.get("sightRange").set(UnitType.Zerg_Larva, 128);
        fields.get("groundWeapon").set(UnitType.Zerg_Larva, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Larva, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Larva, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Larva, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Larva, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Larva, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Larva, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Larva, 20);
        fields.get("canProduce").set(UnitType.Zerg_Larva, false);
        fields.get("canAttack").set(UnitType.Zerg_Larva, false);
        fields.get("canMove").set(UnitType.Zerg_Larva, true);
        fields.get("isFlyer").set(UnitType.Zerg_Larva, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Larva, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Larva, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Larva, false);
        fields.get("isInvincible").set(UnitType.Zerg_Larva, false);
        fields.get("isOrganic").set(UnitType.Zerg_Larva, true);
        fields.get("isMechanical").set(UnitType.Zerg_Larva, false);
        fields.get("isRobotic").set(UnitType.Zerg_Larva, false);
        fields.get("isDetector").set(UnitType.Zerg_Larva, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Larva, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Larva, false);
        fields.get("isRefinery").set(UnitType.Zerg_Larva, false);
        fields.get("isWorker").set(UnitType.Zerg_Larva, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Larva, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Larva, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Larva, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Larva, false);
        fields.get("isCloakable").set(UnitType.Zerg_Larva, false);
        fields.get("isBuilding").set(UnitType.Zerg_Larva, false);
        fields.get("isAddon").set(UnitType.Zerg_Larva, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Larva, false);
        fields.get("isNeutral").set(UnitType.Zerg_Larva, false);
        fields.get("isHero").set(UnitType.Zerg_Larva, false);
        fields.get("isPowerup").set(UnitType.Zerg_Larva, false);
        fields.get("isBeacon").set(UnitType.Zerg_Larva, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Larva, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Larva, false);
        fields.get("isSpell").set(UnitType.Zerg_Larva, false);
        fields.get("producesCreep").set(UnitType.Zerg_Larva, false);
        fields.get("producesLarva").set(UnitType.Zerg_Larva, false);
        fields.get("isMineralField").set(UnitType.Zerg_Larva, false);
        fields.get("isCritter").set(UnitType.Zerg_Larva, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Larva, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Egg() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Egg, 36);
        fields.get("race").set(UnitType.Zerg_Egg, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Egg, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList(UnitType.Zerg_Larva)));
        fields.get("requiredTech").set(UnitType.Zerg_Egg, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Egg, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Egg, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Egg, 200);
        fields.get("maxShields").set(UnitType.Zerg_Egg, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Egg, 0);
        fields.get("armor").set(UnitType.Zerg_Egg, 10);
        fields.get("mineralPrice").set(UnitType.Zerg_Egg, 1);
        fields.get("gasPrice").set(UnitType.Zerg_Egg, 1);
        fields.get("buildTime").set(UnitType.Zerg_Egg, 1);
        fields.get("supplyRequired").set(UnitType.Zerg_Egg, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Egg, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Egg, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Egg, 0);
        fields.get("buildScore").set(UnitType.Zerg_Egg, 0);
        fields.get("destroyScore").set(UnitType.Zerg_Egg, 25);
        fields.get("size").set(UnitType.Zerg_Egg, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Zerg_Egg, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Egg, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Egg, 16);
        fields.get("dimensionUp").set(UnitType.Zerg_Egg, 16);
        fields.get("dimensionRight").set(UnitType.Zerg_Egg, 15);
        fields.get("dimensionDown").set(UnitType.Zerg_Egg, 15);
        fields.get("width").set(UnitType.Zerg_Egg, 32);
        fields.get("height").set(UnitType.Zerg_Egg, 32);
        fields.get("seekRange").set(UnitType.Zerg_Egg, 0);
        fields.get("sightRange").set(UnitType.Zerg_Egg, 128);
        fields.get("groundWeapon").set(UnitType.Zerg_Egg, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Egg, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Egg, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Egg, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Egg, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Egg, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Egg, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Egg, 0);
        fields.get("canProduce").set(UnitType.Zerg_Egg, false);
        fields.get("canAttack").set(UnitType.Zerg_Egg, false);
        fields.get("canMove").set(UnitType.Zerg_Egg, false);
        fields.get("isFlyer").set(UnitType.Zerg_Egg, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Egg, false);
        fields.get("isSpellcaster").set(UnitType.Zerg_Egg, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Egg, false);
        fields.get("isInvincible").set(UnitType.Zerg_Egg, false);
        fields.get("isOrganic").set(UnitType.Zerg_Egg, true);
        fields.get("isMechanical").set(UnitType.Zerg_Egg, false);
        fields.get("isRobotic").set(UnitType.Zerg_Egg, false);
        fields.get("isDetector").set(UnitType.Zerg_Egg, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Egg, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Egg, false);
        fields.get("isRefinery").set(UnitType.Zerg_Egg, false);
        fields.get("isWorker").set(UnitType.Zerg_Egg, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Egg, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Egg, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Egg, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Egg, false);
        fields.get("isCloakable").set(UnitType.Zerg_Egg, false);
        fields.get("isBuilding").set(UnitType.Zerg_Egg, false);
        fields.get("isAddon").set(UnitType.Zerg_Egg, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Egg, false);
        fields.get("isNeutral").set(UnitType.Zerg_Egg, false);
        fields.get("isHero").set(UnitType.Zerg_Egg, false);
        fields.get("isPowerup").set(UnitType.Zerg_Egg, false);
        fields.get("isBeacon").set(UnitType.Zerg_Egg, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Egg, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Egg, false);
        fields.get("isSpell").set(UnitType.Zerg_Egg, false);
        fields.get("producesCreep").set(UnitType.Zerg_Egg, false);
        fields.get("producesLarva").set(UnitType.Zerg_Egg, false);
        fields.get("isMineralField").set(UnitType.Zerg_Egg, false);
        fields.get("isCritter").set(UnitType.Zerg_Egg, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Egg, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Zergling() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Zergling, 37);
        fields.get("race").set(UnitType.Zerg_Zergling, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Zergling, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList(UnitType.Zerg_Larva, UnitType.Zerg_Spawning_Pool)));
        fields.get("requiredTech").set(UnitType.Zerg_Zergling, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Zergling, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgrades").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList(UpgradeType.Metabolic_Boost, UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks, UpgradeType.Adrenal_Glands)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Zergling, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Zergling, 35);
        fields.get("maxShields").set(UnitType.Zerg_Zergling, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Zergling, 0);
        fields.get("armor").set(UnitType.Zerg_Zergling, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Zergling, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Zergling, 0);
        fields.get("buildTime").set(UnitType.Zerg_Zergling, 420);
        fields.get("supplyRequired").set(UnitType.Zerg_Zergling, 1);
        fields.get("supplyProvided").set(UnitType.Zerg_Zergling, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Zergling, 1);
        fields.get("spaceProvided").set(UnitType.Zerg_Zergling, 0);
        fields.get("buildScore").set(UnitType.Zerg_Zergling, 25);
        fields.get("destroyScore").set(UnitType.Zerg_Zergling, 50);
        fields.get("size").set(UnitType.Zerg_Zergling, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Zerg_Zergling, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Zergling, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Zergling, 8);
        fields.get("dimensionUp").set(UnitType.Zerg_Zergling, 4);
        fields.get("dimensionRight").set(UnitType.Zerg_Zergling, 7);
        fields.get("dimensionDown").set(UnitType.Zerg_Zergling, 11);
        fields.get("width").set(UnitType.Zerg_Zergling, 16);
        fields.get("height").set(UnitType.Zerg_Zergling, 16);
        fields.get("seekRange").set(UnitType.Zerg_Zergling, 96);
        fields.get("sightRange").set(UnitType.Zerg_Zergling, 160);
        fields.get("groundWeapon").set(UnitType.Zerg_Zergling, WeaponType.Claws);
        fields.get("maxGroundHits").set(UnitType.Zerg_Zergling, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Zergling, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Zergling, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Zergling, 5.49);
        fields.get("acceleration").set(UnitType.Zerg_Zergling, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Zergling, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Zergling, 27);
        fields.get("canProduce").set(UnitType.Zerg_Zergling, false);
        fields.get("canAttack").set(UnitType.Zerg_Zergling, true);
        fields.get("canMove").set(UnitType.Zerg_Zergling, true);
        fields.get("isFlyer").set(UnitType.Zerg_Zergling, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Zergling, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Zergling, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Zergling, false);
        fields.get("isInvincible").set(UnitType.Zerg_Zergling, false);
        fields.get("isOrganic").set(UnitType.Zerg_Zergling, true);
        fields.get("isMechanical").set(UnitType.Zerg_Zergling, false);
        fields.get("isRobotic").set(UnitType.Zerg_Zergling, false);
        fields.get("isDetector").set(UnitType.Zerg_Zergling, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Zergling, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Zergling, false);
        fields.get("isRefinery").set(UnitType.Zerg_Zergling, false);
        fields.get("isWorker").set(UnitType.Zerg_Zergling, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Zergling, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Zergling, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Zergling, true);
        fields.get("isBurrowable").set(UnitType.Zerg_Zergling, true);
        fields.get("isCloakable").set(UnitType.Zerg_Zergling, false);
        fields.get("isBuilding").set(UnitType.Zerg_Zergling, false);
        fields.get("isAddon").set(UnitType.Zerg_Zergling, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Zergling, false);
        fields.get("isNeutral").set(UnitType.Zerg_Zergling, false);
        fields.get("isHero").set(UnitType.Zerg_Zergling, false);
        fields.get("isPowerup").set(UnitType.Zerg_Zergling, false);
        fields.get("isBeacon").set(UnitType.Zerg_Zergling, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Zergling, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Zergling, false);
        fields.get("isSpell").set(UnitType.Zerg_Zergling, false);
        fields.get("producesCreep").set(UnitType.Zerg_Zergling, false);
        fields.get("producesLarva").set(UnitType.Zerg_Zergling, false);
        fields.get("isMineralField").set(UnitType.Zerg_Zergling, false);
        fields.get("isCritter").set(UnitType.Zerg_Zergling, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Zergling, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Hydralisk() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Hydralisk, 38);
        fields.get("race").set(UnitType.Zerg_Hydralisk, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Hydralisk, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList(UnitType.Zerg_Larva, UnitType.Zerg_Hydralisk_Den)));
        fields.get("requiredTech").set(UnitType.Zerg_Hydralisk, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Hydralisk, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgrades").set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList(UpgradeType.Zerg_Missile_Attacks, UpgradeType.Zerg_Carapace, UpgradeType.Muscular_Augments, UpgradeType.Grooved_Spines)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Hydralisk, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Hydralisk, 80);
        fields.get("maxShields").set(UnitType.Zerg_Hydralisk, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Hydralisk, 0);
        fields.get("armor").set(UnitType.Zerg_Hydralisk, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Hydralisk, 75);
        fields.get("gasPrice").set(UnitType.Zerg_Hydralisk, 25);
        fields.get("buildTime").set(UnitType.Zerg_Hydralisk, 420);
        fields.get("supplyRequired").set(UnitType.Zerg_Hydralisk, 2);
        fields.get("supplyProvided").set(UnitType.Zerg_Hydralisk, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Hydralisk, 2);
        fields.get("spaceProvided").set(UnitType.Zerg_Hydralisk, 0);
        fields.get("buildScore").set(UnitType.Zerg_Hydralisk, 125);
        fields.get("destroyScore").set(UnitType.Zerg_Hydralisk, 350);
        fields.get("size").set(UnitType.Zerg_Hydralisk, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Zerg_Hydralisk, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Hydralisk, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Hydralisk, 10);
        fields.get("dimensionUp").set(UnitType.Zerg_Hydralisk, 10);
        fields.get("dimensionRight").set(UnitType.Zerg_Hydralisk, 10);
        fields.get("dimensionDown").set(UnitType.Zerg_Hydralisk, 12);
        fields.get("width").set(UnitType.Zerg_Hydralisk, 21);
        fields.get("height").set(UnitType.Zerg_Hydralisk, 23);
        fields.get("seekRange").set(UnitType.Zerg_Hydralisk, 0);
        fields.get("sightRange").set(UnitType.Zerg_Hydralisk, 192);
        fields.get("groundWeapon").set(UnitType.Zerg_Hydralisk, WeaponType.Needle_Spines);
        fields.get("maxGroundHits").set(UnitType.Zerg_Hydralisk, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Hydralisk, WeaponType.Needle_Spines);
        fields.get("maxAirHits").set(UnitType.Zerg_Hydralisk, 1);
        fields.get("topSpeed").set(UnitType.Zerg_Hydralisk, 3.66);
        fields.get("acceleration").set(UnitType.Zerg_Hydralisk, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Hydralisk, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Hydralisk, 27);
        fields.get("canProduce").set(UnitType.Zerg_Hydralisk, false);
        fields.get("canAttack").set(UnitType.Zerg_Hydralisk, true);
        fields.get("canMove").set(UnitType.Zerg_Hydralisk, true);
        fields.get("isFlyer").set(UnitType.Zerg_Hydralisk, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Hydralisk, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Hydralisk, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isInvincible").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isOrganic").set(UnitType.Zerg_Hydralisk, true);
        fields.get("isMechanical").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isRobotic").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isDetector").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isRefinery").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isWorker").set(UnitType.Zerg_Hydralisk, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Hydralisk, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Hydralisk, true);
        fields.get("isCloakable").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isBuilding").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isAddon").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isNeutral").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isHero").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isPowerup").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isBeacon").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isSpell").set(UnitType.Zerg_Hydralisk, false);
        fields.get("producesCreep").set(UnitType.Zerg_Hydralisk, false);
        fields.get("producesLarva").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isMineralField").set(UnitType.Zerg_Hydralisk, false);
        fields.get("isCritter").set(UnitType.Zerg_Hydralisk, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Hydralisk, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Ultralisk() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Ultralisk, 39);
        fields.get("race").set(UnitType.Zerg_Ultralisk, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Ultralisk, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList(UnitType.Zerg_Larva, UnitType.Zerg_Ultralisk_Cavern)));
        fields.get("requiredTech").set(UnitType.Zerg_Ultralisk, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Ultralisk, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks, UpgradeType.Chitinous_Plating, UpgradeType.Anabolic_Synthesis)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Ultralisk, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Ultralisk, 400);
        fields.get("maxShields").set(UnitType.Zerg_Ultralisk, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Ultralisk, 0);
        fields.get("armor").set(UnitType.Zerg_Ultralisk, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Ultralisk, 200);
        fields.get("gasPrice").set(UnitType.Zerg_Ultralisk, 200);
        fields.get("buildTime").set(UnitType.Zerg_Ultralisk, 900);
        fields.get("supplyRequired").set(UnitType.Zerg_Ultralisk, 8);
        fields.get("supplyProvided").set(UnitType.Zerg_Ultralisk, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Ultralisk, 4);
        fields.get("spaceProvided").set(UnitType.Zerg_Ultralisk, 0);
        fields.get("buildScore").set(UnitType.Zerg_Ultralisk, 650);
        fields.get("destroyScore").set(UnitType.Zerg_Ultralisk, 1300);
        fields.get("size").set(UnitType.Zerg_Ultralisk, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Ultralisk, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Ultralisk, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Ultralisk, 19);
        fields.get("dimensionUp").set(UnitType.Zerg_Ultralisk, 16);
        fields.get("dimensionRight").set(UnitType.Zerg_Ultralisk, 18);
        fields.get("dimensionDown").set(UnitType.Zerg_Ultralisk, 15);
        fields.get("width").set(UnitType.Zerg_Ultralisk, 38);
        fields.get("height").set(UnitType.Zerg_Ultralisk, 32);
        fields.get("seekRange").set(UnitType.Zerg_Ultralisk, 96);
        fields.get("sightRange").set(UnitType.Zerg_Ultralisk, 224);
        fields.get("groundWeapon").set(UnitType.Zerg_Ultralisk, WeaponType.Kaiser_Blades);
        fields.get("maxGroundHits").set(UnitType.Zerg_Ultralisk, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Ultralisk, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Ultralisk, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Ultralisk, 5.12);
        fields.get("acceleration").set(UnitType.Zerg_Ultralisk, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Ultralisk, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Ultralisk, 40);
        fields.get("canProduce").set(UnitType.Zerg_Ultralisk, false);
        fields.get("canAttack").set(UnitType.Zerg_Ultralisk, true);
        fields.get("canMove").set(UnitType.Zerg_Ultralisk, true);
        fields.get("isFlyer").set(UnitType.Zerg_Ultralisk, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Ultralisk, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Ultralisk, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isInvincible").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isOrganic").set(UnitType.Zerg_Ultralisk, true);
        fields.get("isMechanical").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isRobotic").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isDetector").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isRefinery").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isWorker").set(UnitType.Zerg_Ultralisk, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Ultralisk, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isCloakable").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isBuilding").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isAddon").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isNeutral").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isHero").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isPowerup").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isBeacon").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isSpell").set(UnitType.Zerg_Ultralisk, false);
        fields.get("producesCreep").set(UnitType.Zerg_Ultralisk, false);
        fields.get("producesLarva").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isMineralField").set(UnitType.Zerg_Ultralisk, false);
        fields.get("isCritter").set(UnitType.Zerg_Ultralisk, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Ultralisk, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Broodling() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Broodling, 40);
        fields.get("race").set(UnitType.Zerg_Broodling, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Broodling, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Zerg_Broodling, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Broodling, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Broodling, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Broodling, 30);
        fields.get("maxShields").set(UnitType.Zerg_Broodling, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Broodling, 0);
        fields.get("armor").set(UnitType.Zerg_Broodling, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Broodling, 1);
        fields.get("gasPrice").set(UnitType.Zerg_Broodling, 1);
        fields.get("buildTime").set(UnitType.Zerg_Broodling, 1);
        fields.get("supplyRequired").set(UnitType.Zerg_Broodling, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Broodling, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Broodling, 1);
        fields.get("spaceProvided").set(UnitType.Zerg_Broodling, 0);
        fields.get("buildScore").set(UnitType.Zerg_Broodling, 0);
        fields.get("destroyScore").set(UnitType.Zerg_Broodling, 25);
        fields.get("size").set(UnitType.Zerg_Broodling, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Zerg_Broodling, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Broodling, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Broodling, 9);
        fields.get("dimensionUp").set(UnitType.Zerg_Broodling, 9);
        fields.get("dimensionRight").set(UnitType.Zerg_Broodling, 9);
        fields.get("dimensionDown").set(UnitType.Zerg_Broodling, 9);
        fields.get("width").set(UnitType.Zerg_Broodling, 19);
        fields.get("height").set(UnitType.Zerg_Broodling, 19);
        fields.get("seekRange").set(UnitType.Zerg_Broodling, 96);
        fields.get("sightRange").set(UnitType.Zerg_Broodling, 160);
        fields.get("groundWeapon").set(UnitType.Zerg_Broodling, WeaponType.Toxic_Spores);
        fields.get("maxGroundHits").set(UnitType.Zerg_Broodling, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Broodling, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Broodling, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Broodling, 6.0);
        fields.get("acceleration").set(UnitType.Zerg_Broodling, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Broodling, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Broodling, 27);
        fields.get("canProduce").set(UnitType.Zerg_Broodling, false);
        fields.get("canAttack").set(UnitType.Zerg_Broodling, true);
        fields.get("canMove").set(UnitType.Zerg_Broodling, true);
        fields.get("isFlyer").set(UnitType.Zerg_Broodling, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Broodling, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Broodling, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Broodling, false);
        fields.get("isInvincible").set(UnitType.Zerg_Broodling, false);
        fields.get("isOrganic").set(UnitType.Zerg_Broodling, true);
        fields.get("isMechanical").set(UnitType.Zerg_Broodling, false);
        fields.get("isRobotic").set(UnitType.Zerg_Broodling, false);
        fields.get("isDetector").set(UnitType.Zerg_Broodling, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Broodling, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Broodling, false);
        fields.get("isRefinery").set(UnitType.Zerg_Broodling, false);
        fields.get("isWorker").set(UnitType.Zerg_Broodling, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Broodling, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Broodling, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Broodling, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Broodling, false);
        fields.get("isCloakable").set(UnitType.Zerg_Broodling, false);
        fields.get("isBuilding").set(UnitType.Zerg_Broodling, false);
        fields.get("isAddon").set(UnitType.Zerg_Broodling, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Broodling, false);
        fields.get("isNeutral").set(UnitType.Zerg_Broodling, false);
        fields.get("isHero").set(UnitType.Zerg_Broodling, false);
        fields.get("isPowerup").set(UnitType.Zerg_Broodling, false);
        fields.get("isBeacon").set(UnitType.Zerg_Broodling, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Broodling, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Broodling, false);
        fields.get("isSpell").set(UnitType.Zerg_Broodling, false);
        fields.get("producesCreep").set(UnitType.Zerg_Broodling, false);
        fields.get("producesLarva").set(UnitType.Zerg_Broodling, false);
        fields.get("isMineralField").set(UnitType.Zerg_Broodling, false);
        fields.get("isCritter").set(UnitType.Zerg_Broodling, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Broodling, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Drone() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Drone, 41);
        fields.get("race").set(UnitType.Zerg_Drone, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Drone, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList(UnitType.Zerg_Larva)));
        fields.get("requiredTech").set(UnitType.Zerg_Drone, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Drone, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgrades").set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Drone, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Drone, 40);
        fields.get("maxShields").set(UnitType.Zerg_Drone, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Drone, 0);
        fields.get("armor").set(UnitType.Zerg_Drone, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Drone, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Drone, 0);
        fields.get("buildTime").set(UnitType.Zerg_Drone, 300);
        fields.get("supplyRequired").set(UnitType.Zerg_Drone, 2);
        fields.get("supplyProvided").set(UnitType.Zerg_Drone, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Drone, 1);
        fields.get("spaceProvided").set(UnitType.Zerg_Drone, 0);
        fields.get("buildScore").set(UnitType.Zerg_Drone, 50);
        fields.get("destroyScore").set(UnitType.Zerg_Drone, 100);
        fields.get("size").set(UnitType.Zerg_Drone, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Zerg_Drone, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Drone, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Drone, 11);
        fields.get("dimensionUp").set(UnitType.Zerg_Drone, 11);
        fields.get("dimensionRight").set(UnitType.Zerg_Drone, 11);
        fields.get("dimensionDown").set(UnitType.Zerg_Drone, 11);
        fields.get("width").set(UnitType.Zerg_Drone, 23);
        fields.get("height").set(UnitType.Zerg_Drone, 23);
        fields.get("seekRange").set(UnitType.Zerg_Drone, 0);
        fields.get("sightRange").set(UnitType.Zerg_Drone, 224);
        fields.get("groundWeapon").set(UnitType.Zerg_Drone, WeaponType.Spines);
        fields.get("maxGroundHits").set(UnitType.Zerg_Drone, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Drone, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Drone, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Drone, 4.92);
        fields.get("acceleration").set(UnitType.Zerg_Drone, 67);
        fields.get("haltDistance").set(UnitType.Zerg_Drone, 12227);
        fields.get("turnRadius").set(UnitType.Zerg_Drone, 40);
        fields.get("canProduce").set(UnitType.Zerg_Drone, false);
        fields.get("canAttack").set(UnitType.Zerg_Drone, true);
        fields.get("canMove").set(UnitType.Zerg_Drone, true);
        fields.get("isFlyer").set(UnitType.Zerg_Drone, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Drone, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Drone, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Drone, false);
        fields.get("isInvincible").set(UnitType.Zerg_Drone, false);
        fields.get("isOrganic").set(UnitType.Zerg_Drone, true);
        fields.get("isMechanical").set(UnitType.Zerg_Drone, false);
        fields.get("isRobotic").set(UnitType.Zerg_Drone, false);
        fields.get("isDetector").set(UnitType.Zerg_Drone, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Drone, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Drone, false);
        fields.get("isRefinery").set(UnitType.Zerg_Drone, false);
        fields.get("isWorker").set(UnitType.Zerg_Drone, true);
        fields.get("requiresPsi").set(UnitType.Zerg_Drone, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Drone, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Drone, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Drone, true);
        fields.get("isCloakable").set(UnitType.Zerg_Drone, false);
        fields.get("isBuilding").set(UnitType.Zerg_Drone, false);
        fields.get("isAddon").set(UnitType.Zerg_Drone, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Drone, false);
        fields.get("isNeutral").set(UnitType.Zerg_Drone, false);
        fields.get("isHero").set(UnitType.Zerg_Drone, false);
        fields.get("isPowerup").set(UnitType.Zerg_Drone, false);
        fields.get("isBeacon").set(UnitType.Zerg_Drone, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Drone, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Drone, false);
        fields.get("isSpell").set(UnitType.Zerg_Drone, false);
        fields.get("producesCreep").set(UnitType.Zerg_Drone, false);
        fields.get("producesLarva").set(UnitType.Zerg_Drone, false);
        fields.get("isMineralField").set(UnitType.Zerg_Drone, false);
        fields.get("isCritter").set(UnitType.Zerg_Drone, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Drone, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Overlord() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Overlord, 42);
        fields.get("race").set(UnitType.Zerg_Overlord, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Overlord, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList(UnitType.Zerg_Larva)));
        fields.get("requiredTech").set(UnitType.Zerg_Overlord, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Overlord, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace, UpgradeType.Ventral_Sacs, UpgradeType.Antennae, UpgradeType.Pneumatized_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Overlord, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Overlord, 200);
        fields.get("maxShields").set(UnitType.Zerg_Overlord, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Overlord, 0);
        fields.get("armor").set(UnitType.Zerg_Overlord, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Overlord, 100);
        fields.get("gasPrice").set(UnitType.Zerg_Overlord, 0);
        fields.get("buildTime").set(UnitType.Zerg_Overlord, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Overlord, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Overlord, 16);
        fields.get("spaceRequired").set(UnitType.Zerg_Overlord, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Overlord, 8);
        fields.get("buildScore").set(UnitType.Zerg_Overlord, 100);
        fields.get("destroyScore").set(UnitType.Zerg_Overlord, 200);
        fields.get("size").set(UnitType.Zerg_Overlord, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Overlord, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Overlord, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Overlord, 25);
        fields.get("dimensionUp").set(UnitType.Zerg_Overlord, 25);
        fields.get("dimensionRight").set(UnitType.Zerg_Overlord, 24);
        fields.get("dimensionDown").set(UnitType.Zerg_Overlord, 24);
        fields.get("width").set(UnitType.Zerg_Overlord, 50);
        fields.get("height").set(UnitType.Zerg_Overlord, 50);
        fields.get("seekRange").set(UnitType.Zerg_Overlord, 0);
        fields.get("sightRange").set(UnitType.Zerg_Overlord, 288);
        fields.get("groundWeapon").set(UnitType.Zerg_Overlord, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Overlord, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Overlord, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Overlord, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Overlord, 0.83);
        fields.get("acceleration").set(UnitType.Zerg_Overlord, 27);
        fields.get("haltDistance").set(UnitType.Zerg_Overlord, 840);
        fields.get("turnRadius").set(UnitType.Zerg_Overlord, 20);
        fields.get("canProduce").set(UnitType.Zerg_Overlord, false);
        fields.get("canAttack").set(UnitType.Zerg_Overlord, false);
        fields.get("canMove").set(UnitType.Zerg_Overlord, true);
        fields.get("isFlyer").set(UnitType.Zerg_Overlord, true);
        fields.get("regeneratesHP").set(UnitType.Zerg_Overlord, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Overlord, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Overlord, false);
        fields.get("isInvincible").set(UnitType.Zerg_Overlord, false);
        fields.get("isOrganic").set(UnitType.Zerg_Overlord, true);
        fields.get("isMechanical").set(UnitType.Zerg_Overlord, false);
        fields.get("isRobotic").set(UnitType.Zerg_Overlord, false);
        fields.get("isDetector").set(UnitType.Zerg_Overlord, true);
        fields.get("isResourceContainer").set(UnitType.Zerg_Overlord, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Overlord, false);
        fields.get("isRefinery").set(UnitType.Zerg_Overlord, false);
        fields.get("isWorker").set(UnitType.Zerg_Overlord, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Overlord, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Overlord, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Overlord, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Overlord, false);
        fields.get("isCloakable").set(UnitType.Zerg_Overlord, false);
        fields.get("isBuilding").set(UnitType.Zerg_Overlord, false);
        fields.get("isAddon").set(UnitType.Zerg_Overlord, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Overlord, false);
        fields.get("isNeutral").set(UnitType.Zerg_Overlord, false);
        fields.get("isHero").set(UnitType.Zerg_Overlord, false);
        fields.get("isPowerup").set(UnitType.Zerg_Overlord, false);
        fields.get("isBeacon").set(UnitType.Zerg_Overlord, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Overlord, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Overlord, false);
        fields.get("isSpell").set(UnitType.Zerg_Overlord, false);
        fields.get("producesCreep").set(UnitType.Zerg_Overlord, false);
        fields.get("producesLarva").set(UnitType.Zerg_Overlord, false);
        fields.get("isMineralField").set(UnitType.Zerg_Overlord, false);
        fields.get("isCritter").set(UnitType.Zerg_Overlord, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Overlord, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Mutalisk() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Mutalisk, 43);
        fields.get("race").set(UnitType.Zerg_Mutalisk, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Mutalisk, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList(UnitType.Zerg_Larva, UnitType.Zerg_Spire)));
        fields.get("requiredTech").set(UnitType.Zerg_Mutalisk, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Mutalisk, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Mutalisk, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Mutalisk, 120);
        fields.get("maxShields").set(UnitType.Zerg_Mutalisk, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Mutalisk, 0);
        fields.get("armor").set(UnitType.Zerg_Mutalisk, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Mutalisk, 100);
        fields.get("gasPrice").set(UnitType.Zerg_Mutalisk, 100);
        fields.get("buildTime").set(UnitType.Zerg_Mutalisk, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Mutalisk, 4);
        fields.get("supplyProvided").set(UnitType.Zerg_Mutalisk, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Mutalisk, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Mutalisk, 0);
        fields.get("buildScore").set(UnitType.Zerg_Mutalisk, 300);
        fields.get("destroyScore").set(UnitType.Zerg_Mutalisk, 600);
        fields.get("size").set(UnitType.Zerg_Mutalisk, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Zerg_Mutalisk, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Mutalisk, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Mutalisk, 22);
        fields.get("dimensionUp").set(UnitType.Zerg_Mutalisk, 22);
        fields.get("dimensionRight").set(UnitType.Zerg_Mutalisk, 21);
        fields.get("dimensionDown").set(UnitType.Zerg_Mutalisk, 21);
        fields.get("width").set(UnitType.Zerg_Mutalisk, 44);
        fields.get("height").set(UnitType.Zerg_Mutalisk, 44);
        fields.get("seekRange").set(UnitType.Zerg_Mutalisk, 96);
        fields.get("sightRange").set(UnitType.Zerg_Mutalisk, 224);
        fields.get("groundWeapon").set(UnitType.Zerg_Mutalisk, WeaponType.Glave_Wurm);
        fields.get("maxGroundHits").set(UnitType.Zerg_Mutalisk, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Mutalisk, WeaponType.Glave_Wurm);
        fields.get("maxAirHits").set(UnitType.Zerg_Mutalisk, 1);
        fields.get("topSpeed").set(UnitType.Zerg_Mutalisk, 6.67);
        fields.get("acceleration").set(UnitType.Zerg_Mutalisk, 67);
        fields.get("haltDistance").set(UnitType.Zerg_Mutalisk, 21745);
        fields.get("turnRadius").set(UnitType.Zerg_Mutalisk, 40);
        fields.get("canProduce").set(UnitType.Zerg_Mutalisk, false);
        fields.get("canAttack").set(UnitType.Zerg_Mutalisk, true);
        fields.get("canMove").set(UnitType.Zerg_Mutalisk, true);
        fields.get("isFlyer").set(UnitType.Zerg_Mutalisk, true);
        fields.get("regeneratesHP").set(UnitType.Zerg_Mutalisk, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Mutalisk, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isInvincible").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isOrganic").set(UnitType.Zerg_Mutalisk, true);
        fields.get("isMechanical").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isRobotic").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isDetector").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isRefinery").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isWorker").set(UnitType.Zerg_Mutalisk, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Mutalisk, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isCloakable").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isBuilding").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isAddon").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isNeutral").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isHero").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isPowerup").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isBeacon").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isSpell").set(UnitType.Zerg_Mutalisk, false);
        fields.get("producesCreep").set(UnitType.Zerg_Mutalisk, false);
        fields.get("producesLarva").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isMineralField").set(UnitType.Zerg_Mutalisk, false);
        fields.get("isCritter").set(UnitType.Zerg_Mutalisk, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Mutalisk, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Guardian() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Guardian, 44);
        fields.get("race").set(UnitType.Zerg_Guardian, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Guardian, new Pair(UnitType.Zerg_Mutalisk, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList(UnitType.Zerg_Mutalisk, UnitType.Zerg_Greater_Spire)));
        fields.get("requiredTech").set(UnitType.Zerg_Guardian, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Guardian, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Guardian, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Guardian, 150);
        fields.get("maxShields").set(UnitType.Zerg_Guardian, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Guardian, 0);
        fields.get("armor").set(UnitType.Zerg_Guardian, 2);
        fields.get("mineralPrice").set(UnitType.Zerg_Guardian, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Guardian, 100);
        fields.get("buildTime").set(UnitType.Zerg_Guardian, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Guardian, 4);
        fields.get("supplyProvided").set(UnitType.Zerg_Guardian, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Guardian, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Guardian, 0);
        fields.get("buildScore").set(UnitType.Zerg_Guardian, 550);
        fields.get("destroyScore").set(UnitType.Zerg_Guardian, 1100);
        fields.get("size").set(UnitType.Zerg_Guardian, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Guardian, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Guardian, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Guardian, 22);
        fields.get("dimensionUp").set(UnitType.Zerg_Guardian, 22);
        fields.get("dimensionRight").set(UnitType.Zerg_Guardian, 21);
        fields.get("dimensionDown").set(UnitType.Zerg_Guardian, 21);
        fields.get("width").set(UnitType.Zerg_Guardian, 44);
        fields.get("height").set(UnitType.Zerg_Guardian, 44);
        fields.get("seekRange").set(UnitType.Zerg_Guardian, 0);
        fields.get("sightRange").set(UnitType.Zerg_Guardian, 352);
        fields.get("groundWeapon").set(UnitType.Zerg_Guardian, WeaponType.Acid_Spore);
        fields.get("maxGroundHits").set(UnitType.Zerg_Guardian, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Guardian, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Guardian, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Guardian, 2.5);
        fields.get("acceleration").set(UnitType.Zerg_Guardian, 27);
        fields.get("haltDistance").set(UnitType.Zerg_Guardian, 7585);
        fields.get("turnRadius").set(UnitType.Zerg_Guardian, 20);
        fields.get("canProduce").set(UnitType.Zerg_Guardian, false);
        fields.get("canAttack").set(UnitType.Zerg_Guardian, true);
        fields.get("canMove").set(UnitType.Zerg_Guardian, true);
        fields.get("isFlyer").set(UnitType.Zerg_Guardian, true);
        fields.get("regeneratesHP").set(UnitType.Zerg_Guardian, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Guardian, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Guardian, false);
        fields.get("isInvincible").set(UnitType.Zerg_Guardian, false);
        fields.get("isOrganic").set(UnitType.Zerg_Guardian, true);
        fields.get("isMechanical").set(UnitType.Zerg_Guardian, false);
        fields.get("isRobotic").set(UnitType.Zerg_Guardian, false);
        fields.get("isDetector").set(UnitType.Zerg_Guardian, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Guardian, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Guardian, false);
        fields.get("isRefinery").set(UnitType.Zerg_Guardian, false);
        fields.get("isWorker").set(UnitType.Zerg_Guardian, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Guardian, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Guardian, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Guardian, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Guardian, false);
        fields.get("isCloakable").set(UnitType.Zerg_Guardian, false);
        fields.get("isBuilding").set(UnitType.Zerg_Guardian, false);
        fields.get("isAddon").set(UnitType.Zerg_Guardian, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Guardian, false);
        fields.get("isNeutral").set(UnitType.Zerg_Guardian, false);
        fields.get("isHero").set(UnitType.Zerg_Guardian, false);
        fields.get("isPowerup").set(UnitType.Zerg_Guardian, false);
        fields.get("isBeacon").set(UnitType.Zerg_Guardian, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Guardian, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Guardian, false);
        fields.get("isSpell").set(UnitType.Zerg_Guardian, false);
        fields.get("producesCreep").set(UnitType.Zerg_Guardian, false);
        fields.get("producesLarva").set(UnitType.Zerg_Guardian, false);
        fields.get("isMineralField").set(UnitType.Zerg_Guardian, false);
        fields.get("isCritter").set(UnitType.Zerg_Guardian, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Guardian, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Queen() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Queen, 45);
        fields.get("race").set(UnitType.Zerg_Queen, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Queen, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList(UnitType.Zerg_Larva, UnitType.Zerg_Queens_Nest)));
        fields.get("requiredTech").set(UnitType.Zerg_Queen, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Queen, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList(TechType.Infestation, TechType.Spawn_Broodlings, TechType.Ensnare, TechType.Parasite)));
        fields.get("upgrades").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace, UpgradeType.Gamete_Meiosis)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Queen, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Queen, 120);
        fields.get("maxShields").set(UnitType.Zerg_Queen, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Queen, 200);
        fields.get("armor").set(UnitType.Zerg_Queen, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Queen, 100);
        fields.get("gasPrice").set(UnitType.Zerg_Queen, 100);
        fields.get("buildTime").set(UnitType.Zerg_Queen, 750);
        fields.get("supplyRequired").set(UnitType.Zerg_Queen, 4);
        fields.get("supplyProvided").set(UnitType.Zerg_Queen, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Queen, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Queen, 0);
        fields.get("buildScore").set(UnitType.Zerg_Queen, 400);
        fields.get("destroyScore").set(UnitType.Zerg_Queen, 800);
        fields.get("size").set(UnitType.Zerg_Queen, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Zerg_Queen, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Queen, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Queen, 24);
        fields.get("dimensionUp").set(UnitType.Zerg_Queen, 24);
        fields.get("dimensionRight").set(UnitType.Zerg_Queen, 23);
        fields.get("dimensionDown").set(UnitType.Zerg_Queen, 23);
        fields.get("width").set(UnitType.Zerg_Queen, 48);
        fields.get("height").set(UnitType.Zerg_Queen, 48);
        fields.get("seekRange").set(UnitType.Zerg_Queen, 256);
        fields.get("sightRange").set(UnitType.Zerg_Queen, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Queen, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Queen, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Queen, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Queen, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Queen, 6.67);
        fields.get("acceleration").set(UnitType.Zerg_Queen, 67);
        fields.get("haltDistance").set(UnitType.Zerg_Queen, 21745);
        fields.get("turnRadius").set(UnitType.Zerg_Queen, 40);
        fields.get("canProduce").set(UnitType.Zerg_Queen, false);
        fields.get("canAttack").set(UnitType.Zerg_Queen, false);
        fields.get("canMove").set(UnitType.Zerg_Queen, true);
        fields.get("isFlyer").set(UnitType.Zerg_Queen, true);
        fields.get("regeneratesHP").set(UnitType.Zerg_Queen, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Queen, true);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Queen, false);
        fields.get("isInvincible").set(UnitType.Zerg_Queen, false);
        fields.get("isOrganic").set(UnitType.Zerg_Queen, true);
        fields.get("isMechanical").set(UnitType.Zerg_Queen, false);
        fields.get("isRobotic").set(UnitType.Zerg_Queen, false);
        fields.get("isDetector").set(UnitType.Zerg_Queen, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Queen, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Queen, false);
        fields.get("isRefinery").set(UnitType.Zerg_Queen, false);
        fields.get("isWorker").set(UnitType.Zerg_Queen, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Queen, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Queen, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Queen, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Queen, false);
        fields.get("isCloakable").set(UnitType.Zerg_Queen, false);
        fields.get("isBuilding").set(UnitType.Zerg_Queen, false);
        fields.get("isAddon").set(UnitType.Zerg_Queen, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Queen, false);
        fields.get("isNeutral").set(UnitType.Zerg_Queen, false);
        fields.get("isHero").set(UnitType.Zerg_Queen, false);
        fields.get("isPowerup").set(UnitType.Zerg_Queen, false);
        fields.get("isBeacon").set(UnitType.Zerg_Queen, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Queen, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Queen, false);
        fields.get("isSpell").set(UnitType.Zerg_Queen, false);
        fields.get("producesCreep").set(UnitType.Zerg_Queen, false);
        fields.get("producesLarva").set(UnitType.Zerg_Queen, false);
        fields.get("isMineralField").set(UnitType.Zerg_Queen, false);
        fields.get("isCritter").set(UnitType.Zerg_Queen, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Queen, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Defiler() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Defiler, 46);
        fields.get("race").set(UnitType.Zerg_Defiler, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Defiler, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList(UnitType.Zerg_Larva, UnitType.Zerg_Defiler_Mound)));
        fields.get("requiredTech").set(UnitType.Zerg_Defiler, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Defiler, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList(TechType.Burrowing, TechType.Dark_Swarm, TechType.Plague, TechType.Consume)));
        fields.get("upgrades").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Metasynaptic_Node)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Defiler, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Defiler, 80);
        fields.get("maxShields").set(UnitType.Zerg_Defiler, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Defiler, 200);
        fields.get("armor").set(UnitType.Zerg_Defiler, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Defiler, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Defiler, 150);
        fields.get("buildTime").set(UnitType.Zerg_Defiler, 750);
        fields.get("supplyRequired").set(UnitType.Zerg_Defiler, 4);
        fields.get("supplyProvided").set(UnitType.Zerg_Defiler, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Defiler, 2);
        fields.get("spaceProvided").set(UnitType.Zerg_Defiler, 0);
        fields.get("buildScore").set(UnitType.Zerg_Defiler, 225);
        fields.get("destroyScore").set(UnitType.Zerg_Defiler, 450);
        fields.get("size").set(UnitType.Zerg_Defiler, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Zerg_Defiler, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Defiler, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Defiler, 13);
        fields.get("dimensionUp").set(UnitType.Zerg_Defiler, 12);
        fields.get("dimensionRight").set(UnitType.Zerg_Defiler, 13);
        fields.get("dimensionDown").set(UnitType.Zerg_Defiler, 12);
        fields.get("width").set(UnitType.Zerg_Defiler, 27);
        fields.get("height").set(UnitType.Zerg_Defiler, 25);
        fields.get("seekRange").set(UnitType.Zerg_Defiler, 0);
        fields.get("sightRange").set(UnitType.Zerg_Defiler, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Defiler, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Defiler, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Defiler, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Defiler, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Defiler, 4.0);
        fields.get("acceleration").set(UnitType.Zerg_Defiler, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Defiler, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Defiler, 27);
        fields.get("canProduce").set(UnitType.Zerg_Defiler, false);
        fields.get("canAttack").set(UnitType.Zerg_Defiler, false);
        fields.get("canMove").set(UnitType.Zerg_Defiler, true);
        fields.get("isFlyer").set(UnitType.Zerg_Defiler, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Defiler, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Defiler, true);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Defiler, false);
        fields.get("isInvincible").set(UnitType.Zerg_Defiler, false);
        fields.get("isOrganic").set(UnitType.Zerg_Defiler, true);
        fields.get("isMechanical").set(UnitType.Zerg_Defiler, false);
        fields.get("isRobotic").set(UnitType.Zerg_Defiler, false);
        fields.get("isDetector").set(UnitType.Zerg_Defiler, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Defiler, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Defiler, false);
        fields.get("isRefinery").set(UnitType.Zerg_Defiler, false);
        fields.get("isWorker").set(UnitType.Zerg_Defiler, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Defiler, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Defiler, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Defiler, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Defiler, true);
        fields.get("isCloakable").set(UnitType.Zerg_Defiler, false);
        fields.get("isBuilding").set(UnitType.Zerg_Defiler, false);
        fields.get("isAddon").set(UnitType.Zerg_Defiler, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Defiler, false);
        fields.get("isNeutral").set(UnitType.Zerg_Defiler, false);
        fields.get("isHero").set(UnitType.Zerg_Defiler, false);
        fields.get("isPowerup").set(UnitType.Zerg_Defiler, false);
        fields.get("isBeacon").set(UnitType.Zerg_Defiler, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Defiler, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Defiler, false);
        fields.get("isSpell").set(UnitType.Zerg_Defiler, false);
        fields.get("producesCreep").set(UnitType.Zerg_Defiler, false);
        fields.get("producesLarva").set(UnitType.Zerg_Defiler, false);
        fields.get("isMineralField").set(UnitType.Zerg_Defiler, false);
        fields.get("isCritter").set(UnitType.Zerg_Defiler, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Defiler, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Scourge() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Scourge, 47);
        fields.get("race").set(UnitType.Zerg_Scourge, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Scourge, new Pair(UnitType.Zerg_Larva, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList(UnitType.Zerg_Larva, UnitType.Zerg_Spire)));
        fields.get("requiredTech").set(UnitType.Zerg_Scourge, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Scourge, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Scourge, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Scourge, 25);
        fields.get("maxShields").set(UnitType.Zerg_Scourge, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Scourge, 0);
        fields.get("armor").set(UnitType.Zerg_Scourge, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Scourge, 25);
        fields.get("gasPrice").set(UnitType.Zerg_Scourge, 75);
        fields.get("buildTime").set(UnitType.Zerg_Scourge, 450);
        fields.get("supplyRequired").set(UnitType.Zerg_Scourge, 1);
        fields.get("supplyProvided").set(UnitType.Zerg_Scourge, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Scourge, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Scourge, 0);
        fields.get("buildScore").set(UnitType.Zerg_Scourge, 100);
        fields.get("destroyScore").set(UnitType.Zerg_Scourge, 200);
        fields.get("size").set(UnitType.Zerg_Scourge, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Zerg_Scourge, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Scourge, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Scourge, 12);
        fields.get("dimensionUp").set(UnitType.Zerg_Scourge, 12);
        fields.get("dimensionRight").set(UnitType.Zerg_Scourge, 11);
        fields.get("dimensionDown").set(UnitType.Zerg_Scourge, 11);
        fields.get("width").set(UnitType.Zerg_Scourge, 24);
        fields.get("height").set(UnitType.Zerg_Scourge, 24);
        fields.get("seekRange").set(UnitType.Zerg_Scourge, 96);
        fields.get("sightRange").set(UnitType.Zerg_Scourge, 160);
        fields.get("groundWeapon").set(UnitType.Zerg_Scourge, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Scourge, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Scourge, WeaponType.Suicide_Scourge);
        fields.get("maxAirHits").set(UnitType.Zerg_Scourge, 1);
        fields.get("topSpeed").set(UnitType.Zerg_Scourge, 6.67);
        fields.get("acceleration").set(UnitType.Zerg_Scourge, 107);
        fields.get("haltDistance").set(UnitType.Zerg_Scourge, 13616);
        fields.get("turnRadius").set(UnitType.Zerg_Scourge, 40);
        fields.get("canProduce").set(UnitType.Zerg_Scourge, false);
        fields.get("canAttack").set(UnitType.Zerg_Scourge, true);
        fields.get("canMove").set(UnitType.Zerg_Scourge, true);
        fields.get("isFlyer").set(UnitType.Zerg_Scourge, true);
        fields.get("regeneratesHP").set(UnitType.Zerg_Scourge, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Scourge, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Scourge, false);
        fields.get("isInvincible").set(UnitType.Zerg_Scourge, false);
        fields.get("isOrganic").set(UnitType.Zerg_Scourge, true);
        fields.get("isMechanical").set(UnitType.Zerg_Scourge, false);
        fields.get("isRobotic").set(UnitType.Zerg_Scourge, false);
        fields.get("isDetector").set(UnitType.Zerg_Scourge, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Scourge, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Scourge, false);
        fields.get("isRefinery").set(UnitType.Zerg_Scourge, false);
        fields.get("isWorker").set(UnitType.Zerg_Scourge, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Scourge, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Scourge, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Scourge, true);
        fields.get("isBurrowable").set(UnitType.Zerg_Scourge, false);
        fields.get("isCloakable").set(UnitType.Zerg_Scourge, false);
        fields.get("isBuilding").set(UnitType.Zerg_Scourge, false);
        fields.get("isAddon").set(UnitType.Zerg_Scourge, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Scourge, false);
        fields.get("isNeutral").set(UnitType.Zerg_Scourge, false);
        fields.get("isHero").set(UnitType.Zerg_Scourge, false);
        fields.get("isPowerup").set(UnitType.Zerg_Scourge, false);
        fields.get("isBeacon").set(UnitType.Zerg_Scourge, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Scourge, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Scourge, false);
        fields.get("isSpell").set(UnitType.Zerg_Scourge, false);
        fields.get("producesCreep").set(UnitType.Zerg_Scourge, false);
        fields.get("producesLarva").set(UnitType.Zerg_Scourge, false);
        fields.get("isMineralField").set(UnitType.Zerg_Scourge, false);
        fields.get("isCritter").set(UnitType.Zerg_Scourge, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Scourge, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Torrasque() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Torrasque, 48);
        fields.get("race").set(UnitType.Hero_Torrasque, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Torrasque, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Torrasque, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Torrasque, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
        fields.get("armorUpgrade").set(UnitType.Hero_Torrasque, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Torrasque, 800);
        fields.get("maxShields").set(UnitType.Hero_Torrasque, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Torrasque, 0);
        fields.get("armor").set(UnitType.Hero_Torrasque, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Torrasque, 400);
        fields.get("gasPrice").set(UnitType.Hero_Torrasque, 400);
        fields.get("buildTime").set(UnitType.Hero_Torrasque, 1800);
        fields.get("supplyRequired").set(UnitType.Hero_Torrasque, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Torrasque, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Torrasque, 4);
        fields.get("spaceProvided").set(UnitType.Hero_Torrasque, 0);
        fields.get("buildScore").set(UnitType.Hero_Torrasque, 0);
        fields.get("destroyScore").set(UnitType.Hero_Torrasque, 2600);
        fields.get("size").set(UnitType.Hero_Torrasque, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Torrasque, 2);
        fields.get("tileHeight").set(UnitType.Hero_Torrasque, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Torrasque, 19);
        fields.get("dimensionUp").set(UnitType.Hero_Torrasque, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Torrasque, 18);
        fields.get("dimensionDown").set(UnitType.Hero_Torrasque, 15);
        fields.get("width").set(UnitType.Hero_Torrasque, 38);
        fields.get("height").set(UnitType.Hero_Torrasque, 32);
        fields.get("seekRange").set(UnitType.Hero_Torrasque, 96);
        fields.get("sightRange").set(UnitType.Hero_Torrasque, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Torrasque, WeaponType.Kaiser_Blades_Torrasque);
        fields.get("maxGroundHits").set(UnitType.Hero_Torrasque, 1);
        fields.get("airWeapon").set(UnitType.Hero_Torrasque, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Torrasque, 0);
        fields.get("topSpeed").set(UnitType.Hero_Torrasque, 5.12);
        fields.get("acceleration").set(UnitType.Hero_Torrasque, 1);
        fields.get("haltDistance").set(UnitType.Hero_Torrasque, 1);
        fields.get("turnRadius").set(UnitType.Hero_Torrasque, 40);
        fields.get("canProduce").set(UnitType.Hero_Torrasque, false);
        fields.get("canAttack").set(UnitType.Hero_Torrasque, true);
        fields.get("canMove").set(UnitType.Hero_Torrasque, true);
        fields.get("isFlyer").set(UnitType.Hero_Torrasque, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Torrasque, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Torrasque, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Torrasque, false);
        fields.get("isInvincible").set(UnitType.Hero_Torrasque, false);
        fields.get("isOrganic").set(UnitType.Hero_Torrasque, true);
        fields.get("isMechanical").set(UnitType.Hero_Torrasque, false);
        fields.get("isRobotic").set(UnitType.Hero_Torrasque, false);
        fields.get("isDetector").set(UnitType.Hero_Torrasque, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Torrasque, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Torrasque, false);
        fields.get("isRefinery").set(UnitType.Hero_Torrasque, false);
        fields.get("isWorker").set(UnitType.Hero_Torrasque, false);
        fields.get("requiresPsi").set(UnitType.Hero_Torrasque, false);
        fields.get("requiresCreep").set(UnitType.Hero_Torrasque, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Torrasque, false);
        fields.get("isBurrowable").set(UnitType.Hero_Torrasque, false);
        fields.get("isCloakable").set(UnitType.Hero_Torrasque, false);
        fields.get("isBuilding").set(UnitType.Hero_Torrasque, false);
        fields.get("isAddon").set(UnitType.Hero_Torrasque, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Torrasque, false);
        fields.get("isNeutral").set(UnitType.Hero_Torrasque, false);
        fields.get("isHero").set(UnitType.Hero_Torrasque, true);
        fields.get("isPowerup").set(UnitType.Hero_Torrasque, false);
        fields.get("isBeacon").set(UnitType.Hero_Torrasque, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Torrasque, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Torrasque, false);
        fields.get("isSpell").set(UnitType.Hero_Torrasque, false);
        fields.get("producesCreep").set(UnitType.Hero_Torrasque, false);
        fields.get("producesLarva").set(UnitType.Hero_Torrasque, false);
        fields.get("isMineralField").set(UnitType.Hero_Torrasque, false);
        fields.get("isCritter").set(UnitType.Hero_Torrasque, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Torrasque, false);
        fields.get("researchesWhat").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Matriarch() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Matriarch, 49);
        fields.get("race").set(UnitType.Hero_Matriarch, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Matriarch, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Matriarch, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Matriarch, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList(TechType.Infestation, TechType.Spawn_Broodlings, TechType.Ensnare, TechType.Parasite)));
        fields.get("upgrades").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Hero_Matriarch, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Matriarch, 300);
        fields.get("maxShields").set(UnitType.Hero_Matriarch, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Matriarch, 250);
        fields.get("armor").set(UnitType.Hero_Matriarch, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Matriarch, 200);
        fields.get("gasPrice").set(UnitType.Hero_Matriarch, 300);
        fields.get("buildTime").set(UnitType.Hero_Matriarch, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Matriarch, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Matriarch, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Matriarch, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Matriarch, 0);
        fields.get("buildScore").set(UnitType.Hero_Matriarch, 0);
        fields.get("destroyScore").set(UnitType.Hero_Matriarch, 1600);
        fields.get("size").set(UnitType.Hero_Matriarch, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Hero_Matriarch, 2);
        fields.get("tileHeight").set(UnitType.Hero_Matriarch, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Matriarch, 24);
        fields.get("dimensionUp").set(UnitType.Hero_Matriarch, 24);
        fields.get("dimensionRight").set(UnitType.Hero_Matriarch, 23);
        fields.get("dimensionDown").set(UnitType.Hero_Matriarch, 23);
        fields.get("width").set(UnitType.Hero_Matriarch, 48);
        fields.get("height").set(UnitType.Hero_Matriarch, 48);
        fields.get("seekRange").set(UnitType.Hero_Matriarch, 256);
        fields.get("sightRange").set(UnitType.Hero_Matriarch, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Matriarch, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Hero_Matriarch, 0);
        fields.get("airWeapon").set(UnitType.Hero_Matriarch, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Matriarch, 0);
        fields.get("topSpeed").set(UnitType.Hero_Matriarch, 6.67);
        fields.get("acceleration").set(UnitType.Hero_Matriarch, 67);
        fields.get("haltDistance").set(UnitType.Hero_Matriarch, 21745);
        fields.get("turnRadius").set(UnitType.Hero_Matriarch, 40);
        fields.get("canProduce").set(UnitType.Hero_Matriarch, false);
        fields.get("canAttack").set(UnitType.Hero_Matriarch, false);
        fields.get("canMove").set(UnitType.Hero_Matriarch, true);
        fields.get("isFlyer").set(UnitType.Hero_Matriarch, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Matriarch, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Matriarch, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Matriarch, false);
        fields.get("isInvincible").set(UnitType.Hero_Matriarch, false);
        fields.get("isOrganic").set(UnitType.Hero_Matriarch, true);
        fields.get("isMechanical").set(UnitType.Hero_Matriarch, false);
        fields.get("isRobotic").set(UnitType.Hero_Matriarch, false);
        fields.get("isDetector").set(UnitType.Hero_Matriarch, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Matriarch, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Matriarch, false);
        fields.get("isRefinery").set(UnitType.Hero_Matriarch, false);
        fields.get("isWorker").set(UnitType.Hero_Matriarch, false);
        fields.get("requiresPsi").set(UnitType.Hero_Matriarch, false);
        fields.get("requiresCreep").set(UnitType.Hero_Matriarch, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Matriarch, false);
        fields.get("isBurrowable").set(UnitType.Hero_Matriarch, false);
        fields.get("isCloakable").set(UnitType.Hero_Matriarch, false);
        fields.get("isBuilding").set(UnitType.Hero_Matriarch, false);
        fields.get("isAddon").set(UnitType.Hero_Matriarch, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Matriarch, false);
        fields.get("isNeutral").set(UnitType.Hero_Matriarch, false);
        fields.get("isHero").set(UnitType.Hero_Matriarch, true);
        fields.get("isPowerup").set(UnitType.Hero_Matriarch, false);
        fields.get("isBeacon").set(UnitType.Hero_Matriarch, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Matriarch, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Matriarch, false);
        fields.get("isSpell").set(UnitType.Hero_Matriarch, false);
        fields.get("producesCreep").set(UnitType.Hero_Matriarch, false);
        fields.get("producesLarva").set(UnitType.Hero_Matriarch, false);
        fields.get("isMineralField").set(UnitType.Hero_Matriarch, false);
        fields.get("isCritter").set(UnitType.Hero_Matriarch, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Matriarch, false);
        fields.get("researchesWhat").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Infested_Terran() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Infested_Terran, 50);
        fields.get("race").set(UnitType.Zerg_Infested_Terran, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Infested_Terran, new Pair(UnitType.Zerg_Infested_Command_Center, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList(UnitType.Zerg_Infested_Command_Center)));
        fields.get("requiredTech").set(UnitType.Zerg_Infested_Terran, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Infested_Terran, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgrades").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Infested_Terran, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Infested_Terran, 60);
        fields.get("maxShields").set(UnitType.Zerg_Infested_Terran, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Infested_Terran, 0);
        fields.get("armor").set(UnitType.Zerg_Infested_Terran, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Infested_Terran, 100);
        fields.get("gasPrice").set(UnitType.Zerg_Infested_Terran, 50);
        fields.get("buildTime").set(UnitType.Zerg_Infested_Terran, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Infested_Terran, 2);
        fields.get("supplyProvided").set(UnitType.Zerg_Infested_Terran, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Infested_Terran, 1);
        fields.get("spaceProvided").set(UnitType.Zerg_Infested_Terran, 0);
        fields.get("buildScore").set(UnitType.Zerg_Infested_Terran, 200);
        fields.get("destroyScore").set(UnitType.Zerg_Infested_Terran, 400);
        fields.get("size").set(UnitType.Zerg_Infested_Terran, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Zerg_Infested_Terran, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Infested_Terran, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Infested_Terran, 8);
        fields.get("dimensionUp").set(UnitType.Zerg_Infested_Terran, 9);
        fields.get("dimensionRight").set(UnitType.Zerg_Infested_Terran, 8);
        fields.get("dimensionDown").set(UnitType.Zerg_Infested_Terran, 10);
        fields.get("width").set(UnitType.Zerg_Infested_Terran, 17);
        fields.get("height").set(UnitType.Zerg_Infested_Terran, 20);
        fields.get("seekRange").set(UnitType.Zerg_Infested_Terran, 96);
        fields.get("sightRange").set(UnitType.Zerg_Infested_Terran, 160);
        fields.get("groundWeapon").set(UnitType.Zerg_Infested_Terran, WeaponType.Suicide_Infested_Terran);
        fields.get("maxGroundHits").set(UnitType.Zerg_Infested_Terran, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Infested_Terran, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Infested_Terran, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Infested_Terran, 5.82);
        fields.get("acceleration").set(UnitType.Zerg_Infested_Terran, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Infested_Terran, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Infested_Terran, 40);
        fields.get("canProduce").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("canAttack").set(UnitType.Zerg_Infested_Terran, true);
        fields.get("canMove").set(UnitType.Zerg_Infested_Terran, true);
        fields.get("isFlyer").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Infested_Terran, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isInvincible").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isOrganic").set(UnitType.Zerg_Infested_Terran, true);
        fields.get("isMechanical").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isRobotic").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isDetector").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isRefinery").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isWorker").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Infested_Terran, true);
        fields.get("isCloakable").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isBuilding").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isAddon").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isNeutral").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isHero").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isPowerup").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isBeacon").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isSpell").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("producesCreep").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("producesLarva").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isMineralField").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("isCritter").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Infested_Terran, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Infested_Kerrigan() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Infested_Kerrigan, 51);
        fields.get("race").set(UnitType.Hero_Infested_Kerrigan, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Infested_Kerrigan, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Infested_Kerrigan, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Infested_Kerrigan, TechType.Personnel_Cloaking);
        fields.get("abilities").set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList(TechType.Personnel_Cloaking, TechType.Ensnare, TechType.Psionic_Storm, TechType.Consume)));
        fields.get("upgrades").set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
        fields.get("armorUpgrade").set(UnitType.Hero_Infested_Kerrigan, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Infested_Kerrigan, 400);
        fields.get("maxShields").set(UnitType.Hero_Infested_Kerrigan, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Infested_Kerrigan, 250);
        fields.get("armor").set(UnitType.Hero_Infested_Kerrigan, 2);
        fields.get("mineralPrice").set(UnitType.Hero_Infested_Kerrigan, 200);
        fields.get("gasPrice").set(UnitType.Hero_Infested_Kerrigan, 300);
        fields.get("buildTime").set(UnitType.Hero_Infested_Kerrigan, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Infested_Kerrigan, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Infested_Kerrigan, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Infested_Kerrigan, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Infested_Kerrigan, 0);
        fields.get("buildScore").set(UnitType.Hero_Infested_Kerrigan, 0);
        fields.get("destroyScore").set(UnitType.Hero_Infested_Kerrigan, 4000);
        fields.get("size").set(UnitType.Hero_Infested_Kerrigan, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Infested_Kerrigan, 1);
        fields.get("tileHeight").set(UnitType.Hero_Infested_Kerrigan, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Infested_Kerrigan, 7);
        fields.get("dimensionUp").set(UnitType.Hero_Infested_Kerrigan, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Infested_Kerrigan, 7);
        fields.get("dimensionDown").set(UnitType.Hero_Infested_Kerrigan, 11);
        fields.get("width").set(UnitType.Hero_Infested_Kerrigan, 15);
        fields.get("height").set(UnitType.Hero_Infested_Kerrigan, 22);
        fields.get("seekRange").set(UnitType.Hero_Infested_Kerrigan, 96);
        fields.get("sightRange").set(UnitType.Hero_Infested_Kerrigan, 288);
        fields.get("groundWeapon").set(UnitType.Hero_Infested_Kerrigan, WeaponType.Claws_Infested_Kerrigan);
        fields.get("maxGroundHits").set(UnitType.Hero_Infested_Kerrigan, 1);
        fields.get("airWeapon").set(UnitType.Hero_Infested_Kerrigan, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Infested_Kerrigan, 0);
        fields.get("topSpeed").set(UnitType.Hero_Infested_Kerrigan, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Infested_Kerrigan, 1);
        fields.get("haltDistance").set(UnitType.Hero_Infested_Kerrigan, 1);
        fields.get("turnRadius").set(UnitType.Hero_Infested_Kerrigan, 40);
        fields.get("canProduce").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("canAttack").set(UnitType.Hero_Infested_Kerrigan, true);
        fields.get("canMove").set(UnitType.Hero_Infested_Kerrigan, true);
        fields.get("isFlyer").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Infested_Kerrigan, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Infested_Kerrigan, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isInvincible").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isOrganic").set(UnitType.Hero_Infested_Kerrigan, true);
        fields.get("isMechanical").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isRobotic").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isDetector").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isRefinery").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isWorker").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("requiresPsi").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("requiresCreep").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isBurrowable").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isCloakable").set(UnitType.Hero_Infested_Kerrigan, true);
        fields.get("isBuilding").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isAddon").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isNeutral").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isHero").set(UnitType.Hero_Infested_Kerrigan, true);
        fields.get("isPowerup").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isBeacon").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isSpell").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("producesCreep").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("producesLarva").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isMineralField").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("isCritter").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Infested_Kerrigan, false);
        fields.get("researchesWhat").set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Unclean_One() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Unclean_One, 52);
        fields.get("race").set(UnitType.Hero_Unclean_One, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Unclean_One, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Unclean_One, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Unclean_One, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList(TechType.Burrowing, TechType.Dark_Swarm, TechType.Plague, TechType.Consume)));
        fields.get("upgrades").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Hero_Unclean_One, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Unclean_One, 250);
        fields.get("maxShields").set(UnitType.Hero_Unclean_One, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Unclean_One, 250);
        fields.get("armor").set(UnitType.Hero_Unclean_One, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Unclean_One, 50);
        fields.get("gasPrice").set(UnitType.Hero_Unclean_One, 200);
        fields.get("buildTime").set(UnitType.Hero_Unclean_One, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Unclean_One, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Unclean_One, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Unclean_One, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Unclean_One, 0);
        fields.get("buildScore").set(UnitType.Hero_Unclean_One, 0);
        fields.get("destroyScore").set(UnitType.Hero_Unclean_One, 900);
        fields.get("size").set(UnitType.Hero_Unclean_One, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Hero_Unclean_One, 1);
        fields.get("tileHeight").set(UnitType.Hero_Unclean_One, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Unclean_One, 13);
        fields.get("dimensionUp").set(UnitType.Hero_Unclean_One, 12);
        fields.get("dimensionRight").set(UnitType.Hero_Unclean_One, 13);
        fields.get("dimensionDown").set(UnitType.Hero_Unclean_One, 12);
        fields.get("width").set(UnitType.Hero_Unclean_One, 27);
        fields.get("height").set(UnitType.Hero_Unclean_One, 25);
        fields.get("seekRange").set(UnitType.Hero_Unclean_One, 0);
        fields.get("sightRange").set(UnitType.Hero_Unclean_One, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Unclean_One, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Hero_Unclean_One, 0);
        fields.get("airWeapon").set(UnitType.Hero_Unclean_One, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Unclean_One, 0);
        fields.get("topSpeed").set(UnitType.Hero_Unclean_One, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Unclean_One, 1);
        fields.get("haltDistance").set(UnitType.Hero_Unclean_One, 1);
        fields.get("turnRadius").set(UnitType.Hero_Unclean_One, 27);
        fields.get("canProduce").set(UnitType.Hero_Unclean_One, false);
        fields.get("canAttack").set(UnitType.Hero_Unclean_One, false);
        fields.get("canMove").set(UnitType.Hero_Unclean_One, true);
        fields.get("isFlyer").set(UnitType.Hero_Unclean_One, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Unclean_One, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Unclean_One, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Unclean_One, false);
        fields.get("isInvincible").set(UnitType.Hero_Unclean_One, false);
        fields.get("isOrganic").set(UnitType.Hero_Unclean_One, true);
        fields.get("isMechanical").set(UnitType.Hero_Unclean_One, false);
        fields.get("isRobotic").set(UnitType.Hero_Unclean_One, false);
        fields.get("isDetector").set(UnitType.Hero_Unclean_One, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Unclean_One, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Unclean_One, false);
        fields.get("isRefinery").set(UnitType.Hero_Unclean_One, false);
        fields.get("isWorker").set(UnitType.Hero_Unclean_One, false);
        fields.get("requiresPsi").set(UnitType.Hero_Unclean_One, false);
        fields.get("requiresCreep").set(UnitType.Hero_Unclean_One, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Unclean_One, false);
        fields.get("isBurrowable").set(UnitType.Hero_Unclean_One, true);
        fields.get("isCloakable").set(UnitType.Hero_Unclean_One, false);
        fields.get("isBuilding").set(UnitType.Hero_Unclean_One, false);
        fields.get("isAddon").set(UnitType.Hero_Unclean_One, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Unclean_One, false);
        fields.get("isNeutral").set(UnitType.Hero_Unclean_One, false);
        fields.get("isHero").set(UnitType.Hero_Unclean_One, true);
        fields.get("isPowerup").set(UnitType.Hero_Unclean_One, false);
        fields.get("isBeacon").set(UnitType.Hero_Unclean_One, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Unclean_One, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Unclean_One, false);
        fields.get("isSpell").set(UnitType.Hero_Unclean_One, false);
        fields.get("producesCreep").set(UnitType.Hero_Unclean_One, false);
        fields.get("producesLarva").set(UnitType.Hero_Unclean_One, false);
        fields.get("isMineralField").set(UnitType.Hero_Unclean_One, false);
        fields.get("isCritter").set(UnitType.Hero_Unclean_One, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Unclean_One, false);
        fields.get("researchesWhat").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Hunter_Killer() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Hunter_Killer, 53);
        fields.get("race").set(UnitType.Hero_Hunter_Killer, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Hunter_Killer, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Hunter_Killer, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Hunter_Killer, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgrades").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList(UpgradeType.Zerg_Missile_Attacks, UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Hero_Hunter_Killer, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Hunter_Killer, 160);
        fields.get("maxShields").set(UnitType.Hero_Hunter_Killer, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Hunter_Killer, 0);
        fields.get("armor").set(UnitType.Hero_Hunter_Killer, 2);
        fields.get("mineralPrice").set(UnitType.Hero_Hunter_Killer, 150);
        fields.get("gasPrice").set(UnitType.Hero_Hunter_Killer, 50);
        fields.get("buildTime").set(UnitType.Hero_Hunter_Killer, 780);
        fields.get("supplyRequired").set(UnitType.Hero_Hunter_Killer, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Hunter_Killer, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Hunter_Killer, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Hunter_Killer, 0);
        fields.get("buildScore").set(UnitType.Hero_Hunter_Killer, 0);
        fields.get("destroyScore").set(UnitType.Hero_Hunter_Killer, 500);
        fields.get("size").set(UnitType.Hero_Hunter_Killer, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Hero_Hunter_Killer, 1);
        fields.get("tileHeight").set(UnitType.Hero_Hunter_Killer, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Hunter_Killer, 10);
        fields.get("dimensionUp").set(UnitType.Hero_Hunter_Killer, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Hunter_Killer, 10);
        fields.get("dimensionDown").set(UnitType.Hero_Hunter_Killer, 12);
        fields.get("width").set(UnitType.Hero_Hunter_Killer, 21);
        fields.get("height").set(UnitType.Hero_Hunter_Killer, 23);
        fields.get("seekRange").set(UnitType.Hero_Hunter_Killer, 0);
        fields.get("sightRange").set(UnitType.Hero_Hunter_Killer, 256);
        fields.get("groundWeapon").set(UnitType.Hero_Hunter_Killer, WeaponType.Needle_Spines_Hunter_Killer);
        fields.get("maxGroundHits").set(UnitType.Hero_Hunter_Killer, 1);
        fields.get("airWeapon").set(UnitType.Hero_Hunter_Killer, WeaponType.Needle_Spines_Hunter_Killer);
        fields.get("maxAirHits").set(UnitType.Hero_Hunter_Killer, 1);
        fields.get("topSpeed").set(UnitType.Hero_Hunter_Killer, 3.66);
        fields.get("acceleration").set(UnitType.Hero_Hunter_Killer, 1);
        fields.get("haltDistance").set(UnitType.Hero_Hunter_Killer, 1);
        fields.get("turnRadius").set(UnitType.Hero_Hunter_Killer, 27);
        fields.get("canProduce").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("canAttack").set(UnitType.Hero_Hunter_Killer, true);
        fields.get("canMove").set(UnitType.Hero_Hunter_Killer, true);
        fields.get("isFlyer").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Hunter_Killer, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isInvincible").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isOrganic").set(UnitType.Hero_Hunter_Killer, true);
        fields.get("isMechanical").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isRobotic").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isDetector").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isRefinery").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isWorker").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("requiresPsi").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("requiresCreep").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isBurrowable").set(UnitType.Hero_Hunter_Killer, true);
        fields.get("isCloakable").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isBuilding").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isAddon").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isNeutral").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isHero").set(UnitType.Hero_Hunter_Killer, true);
        fields.get("isPowerup").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isBeacon").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isSpell").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("producesCreep").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("producesLarva").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isMineralField").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("isCritter").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Hunter_Killer, false);
        fields.get("researchesWhat").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Devouring_One() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Devouring_One, 54);
        fields.get("race").set(UnitType.Hero_Devouring_One, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Devouring_One, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Devouring_One, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Devouring_One, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgrades").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
        fields.get("armorUpgrade").set(UnitType.Hero_Devouring_One, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Devouring_One, 120);
        fields.get("maxShields").set(UnitType.Hero_Devouring_One, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Devouring_One, 0);
        fields.get("armor").set(UnitType.Hero_Devouring_One, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Devouring_One, 100);
        fields.get("gasPrice").set(UnitType.Hero_Devouring_One, 0);
        fields.get("buildTime").set(UnitType.Hero_Devouring_One, 840);
        fields.get("supplyRequired").set(UnitType.Hero_Devouring_One, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Devouring_One, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Devouring_One, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Devouring_One, 0);
        fields.get("buildScore").set(UnitType.Hero_Devouring_One, 0);
        fields.get("destroyScore").set(UnitType.Hero_Devouring_One, 100);
        fields.get("size").set(UnitType.Hero_Devouring_One, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Devouring_One, 1);
        fields.get("tileHeight").set(UnitType.Hero_Devouring_One, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Devouring_One, 8);
        fields.get("dimensionUp").set(UnitType.Hero_Devouring_One, 4);
        fields.get("dimensionRight").set(UnitType.Hero_Devouring_One, 7);
        fields.get("dimensionDown").set(UnitType.Hero_Devouring_One, 11);
        fields.get("width").set(UnitType.Hero_Devouring_One, 16);
        fields.get("height").set(UnitType.Hero_Devouring_One, 16);
        fields.get("seekRange").set(UnitType.Hero_Devouring_One, 96);
        fields.get("sightRange").set(UnitType.Hero_Devouring_One, 160);
        fields.get("groundWeapon").set(UnitType.Hero_Devouring_One, WeaponType.Claws_Devouring_One);
        fields.get("maxGroundHits").set(UnitType.Hero_Devouring_One, 1);
        fields.get("airWeapon").set(UnitType.Hero_Devouring_One, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Devouring_One, 0);
        fields.get("topSpeed").set(UnitType.Hero_Devouring_One, 5.49);
        fields.get("acceleration").set(UnitType.Hero_Devouring_One, 1);
        fields.get("haltDistance").set(UnitType.Hero_Devouring_One, 1);
        fields.get("turnRadius").set(UnitType.Hero_Devouring_One, 27);
        fields.get("canProduce").set(UnitType.Hero_Devouring_One, false);
        fields.get("canAttack").set(UnitType.Hero_Devouring_One, true);
        fields.get("canMove").set(UnitType.Hero_Devouring_One, true);
        fields.get("isFlyer").set(UnitType.Hero_Devouring_One, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Devouring_One, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Devouring_One, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Devouring_One, false);
        fields.get("isInvincible").set(UnitType.Hero_Devouring_One, false);
        fields.get("isOrganic").set(UnitType.Hero_Devouring_One, true);
        fields.get("isMechanical").set(UnitType.Hero_Devouring_One, false);
        fields.get("isRobotic").set(UnitType.Hero_Devouring_One, false);
        fields.get("isDetector").set(UnitType.Hero_Devouring_One, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Devouring_One, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Devouring_One, false);
        fields.get("isRefinery").set(UnitType.Hero_Devouring_One, false);
        fields.get("isWorker").set(UnitType.Hero_Devouring_One, false);
        fields.get("requiresPsi").set(UnitType.Hero_Devouring_One, false);
        fields.get("requiresCreep").set(UnitType.Hero_Devouring_One, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Devouring_One, true);
        fields.get("isBurrowable").set(UnitType.Hero_Devouring_One, true);
        fields.get("isCloakable").set(UnitType.Hero_Devouring_One, false);
        fields.get("isBuilding").set(UnitType.Hero_Devouring_One, false);
        fields.get("isAddon").set(UnitType.Hero_Devouring_One, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Devouring_One, false);
        fields.get("isNeutral").set(UnitType.Hero_Devouring_One, false);
        fields.get("isHero").set(UnitType.Hero_Devouring_One, true);
        fields.get("isPowerup").set(UnitType.Hero_Devouring_One, false);
        fields.get("isBeacon").set(UnitType.Hero_Devouring_One, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Devouring_One, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Devouring_One, false);
        fields.get("isSpell").set(UnitType.Hero_Devouring_One, false);
        fields.get("producesCreep").set(UnitType.Hero_Devouring_One, false);
        fields.get("producesLarva").set(UnitType.Hero_Devouring_One, false);
        fields.get("isMineralField").set(UnitType.Hero_Devouring_One, false);
        fields.get("isCritter").set(UnitType.Hero_Devouring_One, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Devouring_One, false);
        fields.get("researchesWhat").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Kukulza_Mutalisk() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Kukulza_Mutalisk, 55);
        fields.get("race").set(UnitType.Hero_Kukulza_Mutalisk, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Kukulza_Mutalisk, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Kukulza_Mutalisk, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Kukulza_Mutalisk, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Hero_Kukulza_Mutalisk, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Kukulza_Mutalisk, 300);
        fields.get("maxShields").set(UnitType.Hero_Kukulza_Mutalisk, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Kukulza_Mutalisk, 0);
        fields.get("armor").set(UnitType.Hero_Kukulza_Mutalisk, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Kukulza_Mutalisk, 200);
        fields.get("gasPrice").set(UnitType.Hero_Kukulza_Mutalisk, 200);
        fields.get("buildTime").set(UnitType.Hero_Kukulza_Mutalisk, 1200);
        fields.get("supplyRequired").set(UnitType.Hero_Kukulza_Mutalisk, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Kukulza_Mutalisk, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Kukulza_Mutalisk, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Kukulza_Mutalisk, 0);
        fields.get("buildScore").set(UnitType.Hero_Kukulza_Mutalisk, 0);
        fields.get("destroyScore").set(UnitType.Hero_Kukulza_Mutalisk, 1200);
        fields.get("size").set(UnitType.Hero_Kukulza_Mutalisk, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Kukulza_Mutalisk, 2);
        fields.get("tileHeight").set(UnitType.Hero_Kukulza_Mutalisk, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Kukulza_Mutalisk, 22);
        fields.get("dimensionUp").set(UnitType.Hero_Kukulza_Mutalisk, 22);
        fields.get("dimensionRight").set(UnitType.Hero_Kukulza_Mutalisk, 21);
        fields.get("dimensionDown").set(UnitType.Hero_Kukulza_Mutalisk, 21);
        fields.get("width").set(UnitType.Hero_Kukulza_Mutalisk, 44);
        fields.get("height").set(UnitType.Hero_Kukulza_Mutalisk, 44);
        fields.get("seekRange").set(UnitType.Hero_Kukulza_Mutalisk, 96);
        fields.get("sightRange").set(UnitType.Hero_Kukulza_Mutalisk, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Kukulza_Mutalisk, WeaponType.Glave_Wurm_Kukulza);
        fields.get("maxGroundHits").set(UnitType.Hero_Kukulza_Mutalisk, 1);
        fields.get("airWeapon").set(UnitType.Hero_Kukulza_Mutalisk, WeaponType.Glave_Wurm_Kukulza);
        fields.get("maxAirHits").set(UnitType.Hero_Kukulza_Mutalisk, 1);
        fields.get("topSpeed").set(UnitType.Hero_Kukulza_Mutalisk, 6.67);
        fields.get("acceleration").set(UnitType.Hero_Kukulza_Mutalisk, 67);
        fields.get("haltDistance").set(UnitType.Hero_Kukulza_Mutalisk, 21745);
        fields.get("turnRadius").set(UnitType.Hero_Kukulza_Mutalisk, 40);
        fields.get("canProduce").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("canAttack").set(UnitType.Hero_Kukulza_Mutalisk, true);
        fields.get("canMove").set(UnitType.Hero_Kukulza_Mutalisk, true);
        fields.get("isFlyer").set(UnitType.Hero_Kukulza_Mutalisk, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Kukulza_Mutalisk, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isInvincible").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isOrganic").set(UnitType.Hero_Kukulza_Mutalisk, true);
        fields.get("isMechanical").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isRobotic").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isDetector").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isRefinery").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isWorker").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("requiresPsi").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("requiresCreep").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isBurrowable").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isCloakable").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isBuilding").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isAddon").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isNeutral").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isHero").set(UnitType.Hero_Kukulza_Mutalisk, true);
        fields.get("isPowerup").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isBeacon").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isSpell").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("producesCreep").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("producesLarva").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isMineralField").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("isCritter").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Kukulza_Mutalisk, false);
        fields.get("researchesWhat").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Kukulza_Guardian() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Kukulza_Guardian, 56);
        fields.get("race").set(UnitType.Hero_Kukulza_Guardian, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Kukulza_Guardian, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Kukulza_Guardian, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Kukulza_Guardian, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Hero_Kukulza_Guardian, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Kukulza_Guardian, 400);
        fields.get("maxShields").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("armor").set(UnitType.Hero_Kukulza_Guardian, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Kukulza_Guardian, 100);
        fields.get("gasPrice").set(UnitType.Hero_Kukulza_Guardian, 200);
        fields.get("buildTime").set(UnitType.Hero_Kukulza_Guardian, 1200);
        fields.get("supplyRequired").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Kukulza_Guardian, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("buildScore").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("destroyScore").set(UnitType.Hero_Kukulza_Guardian, 2200);
        fields.get("size").set(UnitType.Hero_Kukulza_Guardian, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Kukulza_Guardian, 2);
        fields.get("tileHeight").set(UnitType.Hero_Kukulza_Guardian, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Kukulza_Guardian, 22);
        fields.get("dimensionUp").set(UnitType.Hero_Kukulza_Guardian, 22);
        fields.get("dimensionRight").set(UnitType.Hero_Kukulza_Guardian, 21);
        fields.get("dimensionDown").set(UnitType.Hero_Kukulza_Guardian, 21);
        fields.get("width").set(UnitType.Hero_Kukulza_Guardian, 44);
        fields.get("height").set(UnitType.Hero_Kukulza_Guardian, 44);
        fields.get("seekRange").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("sightRange").set(UnitType.Hero_Kukulza_Guardian, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Kukulza_Guardian, WeaponType.Acid_Spore_Kukulza);
        fields.get("maxGroundHits").set(UnitType.Hero_Kukulza_Guardian, 1);
        fields.get("airWeapon").set(UnitType.Hero_Kukulza_Guardian, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Kukulza_Guardian, 0);
        fields.get("topSpeed").set(UnitType.Hero_Kukulza_Guardian, 2.5);
        fields.get("acceleration").set(UnitType.Hero_Kukulza_Guardian, 27);
        fields.get("haltDistance").set(UnitType.Hero_Kukulza_Guardian, 7585);
        fields.get("turnRadius").set(UnitType.Hero_Kukulza_Guardian, 20);
        fields.get("canProduce").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("canAttack").set(UnitType.Hero_Kukulza_Guardian, true);
        fields.get("canMove").set(UnitType.Hero_Kukulza_Guardian, true);
        fields.get("isFlyer").set(UnitType.Hero_Kukulza_Guardian, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Kukulza_Guardian, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isInvincible").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isOrganic").set(UnitType.Hero_Kukulza_Guardian, true);
        fields.get("isMechanical").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isRobotic").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isDetector").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isRefinery").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isWorker").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("requiresPsi").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("requiresCreep").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isBurrowable").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isCloakable").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isBuilding").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isAddon").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isNeutral").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isHero").set(UnitType.Hero_Kukulza_Guardian, true);
        fields.get("isPowerup").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isBeacon").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isSpell").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("producesCreep").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("producesLarva").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isMineralField").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("isCritter").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Kukulza_Guardian, false);
        fields.get("researchesWhat").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Yggdrasill() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Yggdrasill, 57);
        fields.get("race").set(UnitType.Hero_Yggdrasill, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Yggdrasill, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Yggdrasill, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Yggdrasill, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Hero_Yggdrasill, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Yggdrasill, 1000);
        fields.get("maxShields").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("armor").set(UnitType.Hero_Yggdrasill, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Yggdrasill, 200);
        fields.get("gasPrice").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("buildTime").set(UnitType.Hero_Yggdrasill, 1200);
        fields.get("supplyRequired").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Yggdrasill, 60);
        fields.get("spaceRequired").set(UnitType.Hero_Yggdrasill, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Yggdrasill, 8);
        fields.get("buildScore").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("destroyScore").set(UnitType.Hero_Yggdrasill, 400);
        fields.get("size").set(UnitType.Hero_Yggdrasill, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Yggdrasill, 2);
        fields.get("tileHeight").set(UnitType.Hero_Yggdrasill, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Yggdrasill, 25);
        fields.get("dimensionUp").set(UnitType.Hero_Yggdrasill, 25);
        fields.get("dimensionRight").set(UnitType.Hero_Yggdrasill, 24);
        fields.get("dimensionDown").set(UnitType.Hero_Yggdrasill, 24);
        fields.get("width").set(UnitType.Hero_Yggdrasill, 50);
        fields.get("height").set(UnitType.Hero_Yggdrasill, 50);
        fields.get("seekRange").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("sightRange").set(UnitType.Hero_Yggdrasill, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Yggdrasill, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("airWeapon").set(UnitType.Hero_Yggdrasill, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Yggdrasill, 0);
        fields.get("topSpeed").set(UnitType.Hero_Yggdrasill, 0.83);
        fields.get("acceleration").set(UnitType.Hero_Yggdrasill, 27);
        fields.get("haltDistance").set(UnitType.Hero_Yggdrasill, 840);
        fields.get("turnRadius").set(UnitType.Hero_Yggdrasill, 20);
        fields.get("canProduce").set(UnitType.Hero_Yggdrasill, false);
        fields.get("canAttack").set(UnitType.Hero_Yggdrasill, false);
        fields.get("canMove").set(UnitType.Hero_Yggdrasill, true);
        fields.get("isFlyer").set(UnitType.Hero_Yggdrasill, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Yggdrasill, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Yggdrasill, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isInvincible").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isOrganic").set(UnitType.Hero_Yggdrasill, true);
        fields.get("isMechanical").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isRobotic").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isDetector").set(UnitType.Hero_Yggdrasill, true);
        fields.get("isResourceContainer").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isRefinery").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isWorker").set(UnitType.Hero_Yggdrasill, false);
        fields.get("requiresPsi").set(UnitType.Hero_Yggdrasill, false);
        fields.get("requiresCreep").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isBurrowable").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isCloakable").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isBuilding").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isAddon").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isNeutral").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isHero").set(UnitType.Hero_Yggdrasill, true);
        fields.get("isPowerup").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isBeacon").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isSpell").set(UnitType.Hero_Yggdrasill, false);
        fields.get("producesCreep").set(UnitType.Hero_Yggdrasill, false);
        fields.get("producesLarva").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isMineralField").set(UnitType.Hero_Yggdrasill, false);
        fields.get("isCritter").set(UnitType.Hero_Yggdrasill, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Yggdrasill, false);
        fields.get("researchesWhat").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Valkyrie() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Valkyrie, 58);
        fields.get("race").set(UnitType.Terran_Valkyrie, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Valkyrie, new Pair(UnitType.Terran_Starport, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList(UnitType.Terran_Starport, UnitType.Terran_Control_Tower, UnitType.Terran_Armory)));
        fields.get("requiredTech").set(UnitType.Terran_Valkyrie, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Valkyrie, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Terran_Valkyrie, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Terran_Valkyrie, 200);
        fields.get("maxShields").set(UnitType.Terran_Valkyrie, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Valkyrie, 0);
        fields.get("armor").set(UnitType.Terran_Valkyrie, 2);
        fields.get("mineralPrice").set(UnitType.Terran_Valkyrie, 250);
        fields.get("gasPrice").set(UnitType.Terran_Valkyrie, 125);
        fields.get("buildTime").set(UnitType.Terran_Valkyrie, 750);
        fields.get("supplyRequired").set(UnitType.Terran_Valkyrie, 6);
        fields.get("supplyProvided").set(UnitType.Terran_Valkyrie, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Valkyrie, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Valkyrie, 0);
        fields.get("buildScore").set(UnitType.Terran_Valkyrie, 400);
        fields.get("destroyScore").set(UnitType.Terran_Valkyrie, 800);
        fields.get("size").set(UnitType.Terran_Valkyrie, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Valkyrie, 2);
        fields.get("tileHeight").set(UnitType.Terran_Valkyrie, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Valkyrie, 24);
        fields.get("dimensionUp").set(UnitType.Terran_Valkyrie, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Valkyrie, 24);
        fields.get("dimensionDown").set(UnitType.Terran_Valkyrie, 20);
        fields.get("width").set(UnitType.Terran_Valkyrie, 49);
        fields.get("height").set(UnitType.Terran_Valkyrie, 37);
        fields.get("seekRange").set(UnitType.Terran_Valkyrie, 0);
        fields.get("sightRange").set(UnitType.Terran_Valkyrie, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Valkyrie, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Valkyrie, 0);
        fields.get("airWeapon").set(UnitType.Terran_Valkyrie, WeaponType.Halo_Rockets);
        fields.get("maxAirHits").set(UnitType.Terran_Valkyrie, 4);
        fields.get("topSpeed").set(UnitType.Terran_Valkyrie, 6.6);
        fields.get("acceleration").set(UnitType.Terran_Valkyrie, 65);
        fields.get("haltDistance").set(UnitType.Terran_Valkyrie, 21901);
        fields.get("turnRadius").set(UnitType.Terran_Valkyrie, 30);
        fields.get("canProduce").set(UnitType.Terran_Valkyrie, false);
        fields.get("canAttack").set(UnitType.Terran_Valkyrie, true);
        fields.get("canMove").set(UnitType.Terran_Valkyrie, true);
        fields.get("isFlyer").set(UnitType.Terran_Valkyrie, true);
        fields.get("regeneratesHP").set(UnitType.Terran_Valkyrie, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Valkyrie, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Valkyrie, false);
        fields.get("isInvincible").set(UnitType.Terran_Valkyrie, false);
        fields.get("isOrganic").set(UnitType.Terran_Valkyrie, false);
        fields.get("isMechanical").set(UnitType.Terran_Valkyrie, true);
        fields.get("isRobotic").set(UnitType.Terran_Valkyrie, false);
        fields.get("isDetector").set(UnitType.Terran_Valkyrie, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Valkyrie, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Valkyrie, false);
        fields.get("isRefinery").set(UnitType.Terran_Valkyrie, false);
        fields.get("isWorker").set(UnitType.Terran_Valkyrie, false);
        fields.get("requiresPsi").set(UnitType.Terran_Valkyrie, false);
        fields.get("requiresCreep").set(UnitType.Terran_Valkyrie, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Valkyrie, false);
        fields.get("isBurrowable").set(UnitType.Terran_Valkyrie, false);
        fields.get("isCloakable").set(UnitType.Terran_Valkyrie, false);
        fields.get("isBuilding").set(UnitType.Terran_Valkyrie, false);
        fields.get("isAddon").set(UnitType.Terran_Valkyrie, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Valkyrie, false);
        fields.get("isNeutral").set(UnitType.Terran_Valkyrie, false);
        fields.get("isHero").set(UnitType.Terran_Valkyrie, false);
        fields.get("isPowerup").set(UnitType.Terran_Valkyrie, false);
        fields.get("isBeacon").set(UnitType.Terran_Valkyrie, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Valkyrie, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Valkyrie, false);
        fields.get("isSpell").set(UnitType.Terran_Valkyrie, false);
        fields.get("producesCreep").set(UnitType.Terran_Valkyrie, false);
        fields.get("producesLarva").set(UnitType.Terran_Valkyrie, false);
        fields.get("isMineralField").set(UnitType.Terran_Valkyrie, false);
        fields.get("isCritter").set(UnitType.Terran_Valkyrie, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Valkyrie, false);
        fields.get("researchesWhat").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Cocoon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Cocoon, 59);
        fields.get("race").set(UnitType.Zerg_Cocoon, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Cocoon, new Pair(UnitType.Zerg_Mutalisk, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList(UnitType.Zerg_Mutalisk, UnitType.Zerg_Greater_Spire)));
        fields.get("requiredTech").set(UnitType.Zerg_Cocoon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Cocoon, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Cocoon, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Cocoon, 200);
        fields.get("maxShields").set(UnitType.Zerg_Cocoon, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Cocoon, 0);
        fields.get("armor").set(UnitType.Zerg_Cocoon, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Cocoon, 1);
        fields.get("gasPrice").set(UnitType.Zerg_Cocoon, 1);
        fields.get("buildTime").set(UnitType.Zerg_Cocoon, 1);
        fields.get("supplyRequired").set(UnitType.Zerg_Cocoon, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Cocoon, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Cocoon, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Cocoon, 0);
        fields.get("buildScore").set(UnitType.Zerg_Cocoon, 0);
        fields.get("destroyScore").set(UnitType.Zerg_Cocoon, 1100);
        fields.get("size").set(UnitType.Zerg_Cocoon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Cocoon, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Cocoon, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Cocoon, 16);
        fields.get("dimensionUp").set(UnitType.Zerg_Cocoon, 16);
        fields.get("dimensionRight").set(UnitType.Zerg_Cocoon, 15);
        fields.get("dimensionDown").set(UnitType.Zerg_Cocoon, 15);
        fields.get("width").set(UnitType.Zerg_Cocoon, 32);
        fields.get("height").set(UnitType.Zerg_Cocoon, 32);
        fields.get("seekRange").set(UnitType.Zerg_Cocoon, 0);
        fields.get("sightRange").set(UnitType.Zerg_Cocoon, 128);
        fields.get("groundWeapon").set(UnitType.Zerg_Cocoon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Cocoon, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Cocoon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Cocoon, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Cocoon, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Cocoon, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Cocoon, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Cocoon, 0);
        fields.get("canProduce").set(UnitType.Zerg_Cocoon, false);
        fields.get("canAttack").set(UnitType.Zerg_Cocoon, false);
        fields.get("canMove").set(UnitType.Zerg_Cocoon, false);
        fields.get("isFlyer").set(UnitType.Zerg_Cocoon, true);
        fields.get("regeneratesHP").set(UnitType.Zerg_Cocoon, false);
        fields.get("isSpellcaster").set(UnitType.Zerg_Cocoon, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Cocoon, false);
        fields.get("isInvincible").set(UnitType.Zerg_Cocoon, false);
        fields.get("isOrganic").set(UnitType.Zerg_Cocoon, true);
        fields.get("isMechanical").set(UnitType.Zerg_Cocoon, false);
        fields.get("isRobotic").set(UnitType.Zerg_Cocoon, false);
        fields.get("isDetector").set(UnitType.Zerg_Cocoon, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Cocoon, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Cocoon, false);
        fields.get("isRefinery").set(UnitType.Zerg_Cocoon, false);
        fields.get("isWorker").set(UnitType.Zerg_Cocoon, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Cocoon, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Cocoon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Cocoon, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Cocoon, false);
        fields.get("isCloakable").set(UnitType.Zerg_Cocoon, false);
        fields.get("isBuilding").set(UnitType.Zerg_Cocoon, false);
        fields.get("isAddon").set(UnitType.Zerg_Cocoon, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Cocoon, false);
        fields.get("isNeutral").set(UnitType.Zerg_Cocoon, false);
        fields.get("isHero").set(UnitType.Zerg_Cocoon, false);
        fields.get("isPowerup").set(UnitType.Zerg_Cocoon, false);
        fields.get("isBeacon").set(UnitType.Zerg_Cocoon, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Cocoon, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Cocoon, false);
        fields.get("isSpell").set(UnitType.Zerg_Cocoon, false);
        fields.get("producesCreep").set(UnitType.Zerg_Cocoon, false);
        fields.get("producesLarva").set(UnitType.Zerg_Cocoon, false);
        fields.get("isMineralField").set(UnitType.Zerg_Cocoon, false);
        fields.get("isCritter").set(UnitType.Zerg_Cocoon, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Cocoon, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Corsair() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Corsair, 60);
        fields.get("race").set(UnitType.Protoss_Corsair, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Corsair, new Pair(UnitType.Protoss_Stargate, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList(UnitType.Protoss_Stargate)));
        fields.get("requiredTech").set(UnitType.Protoss_Corsair, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Corsair, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList(TechType.Disruption_Web)));
        fields.get("upgrades").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList(UpgradeType.Argus_Jewel, UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Corsair, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Corsair, 100);
        fields.get("maxShields").set(UnitType.Protoss_Corsair, 80);
        fields.get("maxEnergy").set(UnitType.Protoss_Corsair, 200);
        fields.get("armor").set(UnitType.Protoss_Corsair, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Corsair, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Corsair, 100);
        fields.get("buildTime").set(UnitType.Protoss_Corsair, 600);
        fields.get("supplyRequired").set(UnitType.Protoss_Corsair, 4);
        fields.get("supplyProvided").set(UnitType.Protoss_Corsair, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Corsair, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Corsair, 0);
        fields.get("buildScore").set(UnitType.Protoss_Corsair, 350);
        fields.get("destroyScore").set(UnitType.Protoss_Corsair, 700);
        fields.get("size").set(UnitType.Protoss_Corsair, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Protoss_Corsair, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Corsair, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Corsair, 18);
        fields.get("dimensionUp").set(UnitType.Protoss_Corsair, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Corsair, 17);
        fields.get("dimensionDown").set(UnitType.Protoss_Corsair, 15);
        fields.get("width").set(UnitType.Protoss_Corsair, 36);
        fields.get("height").set(UnitType.Protoss_Corsair, 32);
        fields.get("seekRange").set(UnitType.Protoss_Corsair, 288);
        fields.get("sightRange").set(UnitType.Protoss_Corsair, 288);
        fields.get("groundWeapon").set(UnitType.Protoss_Corsair, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Corsair, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Corsair, WeaponType.Neutron_Flare);
        fields.get("maxAirHits").set(UnitType.Protoss_Corsair, 1);
        fields.get("topSpeed").set(UnitType.Protoss_Corsair, 6.67);
        fields.get("acceleration").set(UnitType.Protoss_Corsair, 67);
        fields.get("haltDistance").set(UnitType.Protoss_Corsair, 17067);
        fields.get("turnRadius").set(UnitType.Protoss_Corsair, 30);
        fields.get("canProduce").set(UnitType.Protoss_Corsair, false);
        fields.get("canAttack").set(UnitType.Protoss_Corsair, true);
        fields.get("canMove").set(UnitType.Protoss_Corsair, true);
        fields.get("isFlyer").set(UnitType.Protoss_Corsair, true);
        fields.get("regeneratesHP").set(UnitType.Protoss_Corsair, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Corsair, true);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Corsair, false);
        fields.get("isInvincible").set(UnitType.Protoss_Corsair, false);
        fields.get("isOrganic").set(UnitType.Protoss_Corsair, false);
        fields.get("isMechanical").set(UnitType.Protoss_Corsair, true);
        fields.get("isRobotic").set(UnitType.Protoss_Corsair, false);
        fields.get("isDetector").set(UnitType.Protoss_Corsair, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Corsair, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Corsair, false);
        fields.get("isRefinery").set(UnitType.Protoss_Corsair, false);
        fields.get("isWorker").set(UnitType.Protoss_Corsair, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Corsair, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Corsair, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Corsair, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Corsair, false);
        fields.get("isCloakable").set(UnitType.Protoss_Corsair, false);
        fields.get("isBuilding").set(UnitType.Protoss_Corsair, false);
        fields.get("isAddon").set(UnitType.Protoss_Corsair, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Corsair, false);
        fields.get("isNeutral").set(UnitType.Protoss_Corsair, false);
        fields.get("isHero").set(UnitType.Protoss_Corsair, false);
        fields.get("isPowerup").set(UnitType.Protoss_Corsair, false);
        fields.get("isBeacon").set(UnitType.Protoss_Corsair, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Corsair, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Corsair, false);
        fields.get("isSpell").set(UnitType.Protoss_Corsair, false);
        fields.get("producesCreep").set(UnitType.Protoss_Corsair, false);
        fields.get("producesLarva").set(UnitType.Protoss_Corsair, false);
        fields.get("isMineralField").set(UnitType.Protoss_Corsair, false);
        fields.get("isCritter").set(UnitType.Protoss_Corsair, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Corsair, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Dark_Templar() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Dark_Templar, 61);
        fields.get("race").set(UnitType.Protoss_Dark_Templar, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Dark_Templar, new Pair(UnitType.Protoss_Gateway, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList(UnitType.Protoss_Gateway, UnitType.Protoss_Templar_Archives)));
        fields.get("requiredTech").set(UnitType.Protoss_Dark_Templar, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Dark_Templar, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList(TechType.Dark_Archon_Meld)));
        fields.get("upgrades").set(UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Dark_Templar, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Dark_Templar, 80);
        fields.get("maxShields").set(UnitType.Protoss_Dark_Templar, 40);
        fields.get("maxEnergy").set(UnitType.Protoss_Dark_Templar, 0);
        fields.get("armor").set(UnitType.Protoss_Dark_Templar, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Dark_Templar, 125);
        fields.get("gasPrice").set(UnitType.Protoss_Dark_Templar, 100);
        fields.get("buildTime").set(UnitType.Protoss_Dark_Templar, 750);
        fields.get("supplyRequired").set(UnitType.Protoss_Dark_Templar, 4);
        fields.get("supplyProvided").set(UnitType.Protoss_Dark_Templar, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Dark_Templar, 2);
        fields.get("spaceProvided").set(UnitType.Protoss_Dark_Templar, 0);
        fields.get("buildScore").set(UnitType.Protoss_Dark_Templar, 325);
        fields.get("destroyScore").set(UnitType.Protoss_Dark_Templar, 650);
        fields.get("size").set(UnitType.Protoss_Dark_Templar, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Protoss_Dark_Templar, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Dark_Templar, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Dark_Templar, 12);
        fields.get("dimensionUp").set(UnitType.Protoss_Dark_Templar, 6);
        fields.get("dimensionRight").set(UnitType.Protoss_Dark_Templar, 11);
        fields.get("dimensionDown").set(UnitType.Protoss_Dark_Templar, 19);
        fields.get("width").set(UnitType.Protoss_Dark_Templar, 24);
        fields.get("height").set(UnitType.Protoss_Dark_Templar, 26);
        fields.get("seekRange").set(UnitType.Protoss_Dark_Templar, 96);
        fields.get("sightRange").set(UnitType.Protoss_Dark_Templar, 224);
        fields.get("groundWeapon").set(UnitType.Protoss_Dark_Templar, WeaponType.Warp_Blades);
        fields.get("maxGroundHits").set(UnitType.Protoss_Dark_Templar, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Dark_Templar, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Dark_Templar, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Dark_Templar, 4.92);
        fields.get("acceleration").set(UnitType.Protoss_Dark_Templar, 27);
        fields.get("haltDistance").set(UnitType.Protoss_Dark_Templar, 13474);
        fields.get("turnRadius").set(UnitType.Protoss_Dark_Templar, 40);
        fields.get("canProduce").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("canAttack").set(UnitType.Protoss_Dark_Templar, true);
        fields.get("canMove").set(UnitType.Protoss_Dark_Templar, true);
        fields.get("isFlyer").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Dark_Templar, true);
        fields.get("isInvincible").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isOrganic").set(UnitType.Protoss_Dark_Templar, true);
        fields.get("isMechanical").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isRobotic").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isDetector").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isRefinery").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isWorker").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isCloakable").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isBuilding").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isAddon").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isNeutral").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isHero").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isPowerup").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isBeacon").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isSpell").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("producesCreep").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("producesLarva").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isMineralField").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("isCritter").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Dark_Templar, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Devourer() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Devourer, 62);
        fields.get("race").set(UnitType.Zerg_Devourer, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Devourer, new Pair(UnitType.Zerg_Mutalisk, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList(UnitType.Zerg_Mutalisk, UnitType.Zerg_Greater_Spire)));
        fields.get("requiredTech").set(UnitType.Zerg_Devourer, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Devourer, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Devourer, UpgradeType.Zerg_Flyer_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Devourer, 250);
        fields.get("maxShields").set(UnitType.Zerg_Devourer, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Devourer, 0);
        fields.get("armor").set(UnitType.Zerg_Devourer, 2);
        fields.get("mineralPrice").set(UnitType.Zerg_Devourer, 150);
        fields.get("gasPrice").set(UnitType.Zerg_Devourer, 50);
        fields.get("buildTime").set(UnitType.Zerg_Devourer, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Devourer, 4);
        fields.get("supplyProvided").set(UnitType.Zerg_Devourer, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Devourer, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Devourer, 0);
        fields.get("buildScore").set(UnitType.Zerg_Devourer, 550);
        fields.get("destroyScore").set(UnitType.Zerg_Devourer, 1100);
        fields.get("size").set(UnitType.Zerg_Devourer, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Devourer, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Devourer, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Devourer, 22);
        fields.get("dimensionUp").set(UnitType.Zerg_Devourer, 22);
        fields.get("dimensionRight").set(UnitType.Zerg_Devourer, 21);
        fields.get("dimensionDown").set(UnitType.Zerg_Devourer, 21);
        fields.get("width").set(UnitType.Zerg_Devourer, 44);
        fields.get("height").set(UnitType.Zerg_Devourer, 44);
        fields.get("seekRange").set(UnitType.Zerg_Devourer, 224);
        fields.get("sightRange").set(UnitType.Zerg_Devourer, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Devourer, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Devourer, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Devourer, WeaponType.Corrosive_Acid);
        fields.get("maxAirHits").set(UnitType.Zerg_Devourer, 1);
        fields.get("topSpeed").set(UnitType.Zerg_Devourer, 5.0);
        fields.get("acceleration").set(UnitType.Zerg_Devourer, 48);
        fields.get("haltDistance").set(UnitType.Zerg_Devourer, 17067);
        fields.get("turnRadius").set(UnitType.Zerg_Devourer, 30);
        fields.get("canProduce").set(UnitType.Zerg_Devourer, false);
        fields.get("canAttack").set(UnitType.Zerg_Devourer, true);
        fields.get("canMove").set(UnitType.Zerg_Devourer, true);
        fields.get("isFlyer").set(UnitType.Zerg_Devourer, true);
        fields.get("regeneratesHP").set(UnitType.Zerg_Devourer, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Devourer, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Devourer, false);
        fields.get("isInvincible").set(UnitType.Zerg_Devourer, false);
        fields.get("isOrganic").set(UnitType.Zerg_Devourer, true);
        fields.get("isMechanical").set(UnitType.Zerg_Devourer, false);
        fields.get("isRobotic").set(UnitType.Zerg_Devourer, false);
        fields.get("isDetector").set(UnitType.Zerg_Devourer, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Devourer, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Devourer, false);
        fields.get("isRefinery").set(UnitType.Zerg_Devourer, false);
        fields.get("isWorker").set(UnitType.Zerg_Devourer, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Devourer, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Devourer, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Devourer, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Devourer, false);
        fields.get("isCloakable").set(UnitType.Zerg_Devourer, false);
        fields.get("isBuilding").set(UnitType.Zerg_Devourer, false);
        fields.get("isAddon").set(UnitType.Zerg_Devourer, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Devourer, false);
        fields.get("isNeutral").set(UnitType.Zerg_Devourer, false);
        fields.get("isHero").set(UnitType.Zerg_Devourer, false);
        fields.get("isPowerup").set(UnitType.Zerg_Devourer, false);
        fields.get("isBeacon").set(UnitType.Zerg_Devourer, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Devourer, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Devourer, false);
        fields.get("isSpell").set(UnitType.Zerg_Devourer, false);
        fields.get("producesCreep").set(UnitType.Zerg_Devourer, false);
        fields.get("producesLarva").set(UnitType.Zerg_Devourer, false);
        fields.get("isMineralField").set(UnitType.Zerg_Devourer, false);
        fields.get("isCritter").set(UnitType.Zerg_Devourer, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Devourer, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Dark_Archon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Dark_Archon, 63);
        fields.get("race").set(UnitType.Protoss_Dark_Archon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Dark_Archon, new Pair(UnitType.Protoss_Dark_Templar, 2));
        fields.get("requiredUnits").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList(UnitType.Protoss_Dark_Templar)));
        fields.get("requiredTech").set(UnitType.Protoss_Dark_Archon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Dark_Archon, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList(TechType.Mind_Control, TechType.Feedback, TechType.Maelstrom)));
        fields.get("upgrades").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor, UpgradeType.Argus_Talisman)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Dark_Archon, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Dark_Archon, 25);
        fields.get("maxShields").set(UnitType.Protoss_Dark_Archon, 200);
        fields.get("maxEnergy").set(UnitType.Protoss_Dark_Archon, 200);
        fields.get("armor").set(UnitType.Protoss_Dark_Archon, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Dark_Archon, 0);
        fields.get("gasPrice").set(UnitType.Protoss_Dark_Archon, 0);
        fields.get("buildTime").set(UnitType.Protoss_Dark_Archon, 300);
        fields.get("supplyRequired").set(UnitType.Protoss_Dark_Archon, 8);
        fields.get("supplyProvided").set(UnitType.Protoss_Dark_Archon, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Dark_Archon, 4);
        fields.get("spaceProvided").set(UnitType.Protoss_Dark_Archon, 0);
        fields.get("buildScore").set(UnitType.Protoss_Dark_Archon, 650);
        fields.get("destroyScore").set(UnitType.Protoss_Dark_Archon, 1300);
        fields.get("size").set(UnitType.Protoss_Dark_Archon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Dark_Archon, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Dark_Archon, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Dark_Archon, 16);
        fields.get("dimensionUp").set(UnitType.Protoss_Dark_Archon, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Dark_Archon, 15);
        fields.get("dimensionDown").set(UnitType.Protoss_Dark_Archon, 15);
        fields.get("width").set(UnitType.Protoss_Dark_Archon, 32);
        fields.get("height").set(UnitType.Protoss_Dark_Archon, 32);
        fields.get("seekRange").set(UnitType.Protoss_Dark_Archon, 224);
        fields.get("sightRange").set(UnitType.Protoss_Dark_Archon, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Dark_Archon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Dark_Archon, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Dark_Archon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Dark_Archon, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Dark_Archon, 4.92);
        fields.get("acceleration").set(UnitType.Protoss_Dark_Archon, 160);
        fields.get("haltDistance").set(UnitType.Protoss_Dark_Archon, 5120);
        fields.get("turnRadius").set(UnitType.Protoss_Dark_Archon, 40);
        fields.get("canProduce").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("canAttack").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("canMove").set(UnitType.Protoss_Dark_Archon, true);
        fields.get("isFlyer").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Dark_Archon, true);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isInvincible").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isOrganic").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isMechanical").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isRobotic").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isDetector").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isRefinery").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isWorker").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isCloakable").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isBuilding").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isAddon").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isNeutral").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isHero").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isPowerup").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isBeacon").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isSpell").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("producesCreep").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("producesLarva").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isMineralField").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("isCritter").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Dark_Archon, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Probe() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Probe, 64);
        fields.get("race").set(UnitType.Protoss_Probe, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Probe, new Pair(UnitType.Protoss_Nexus, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList(UnitType.Protoss_Nexus)));
        fields.get("requiredTech").set(UnitType.Protoss_Probe, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Probe, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Probe, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Probe, 20);
        fields.get("maxShields").set(UnitType.Protoss_Probe, 20);
        fields.get("maxEnergy").set(UnitType.Protoss_Probe, 0);
        fields.get("armor").set(UnitType.Protoss_Probe, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Probe, 50);
        fields.get("gasPrice").set(UnitType.Protoss_Probe, 0);
        fields.get("buildTime").set(UnitType.Protoss_Probe, 300);
        fields.get("supplyRequired").set(UnitType.Protoss_Probe, 2);
        fields.get("supplyProvided").set(UnitType.Protoss_Probe, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Probe, 1);
        fields.get("spaceProvided").set(UnitType.Protoss_Probe, 0);
        fields.get("buildScore").set(UnitType.Protoss_Probe, 50);
        fields.get("destroyScore").set(UnitType.Protoss_Probe, 100);
        fields.get("size").set(UnitType.Protoss_Probe, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Protoss_Probe, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Probe, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Probe, 11);
        fields.get("dimensionUp").set(UnitType.Protoss_Probe, 11);
        fields.get("dimensionRight").set(UnitType.Protoss_Probe, 11);
        fields.get("dimensionDown").set(UnitType.Protoss_Probe, 11);
        fields.get("width").set(UnitType.Protoss_Probe, 23);
        fields.get("height").set(UnitType.Protoss_Probe, 23);
        fields.get("seekRange").set(UnitType.Protoss_Probe, 0);
        fields.get("sightRange").set(UnitType.Protoss_Probe, 256);
        fields.get("groundWeapon").set(UnitType.Protoss_Probe, WeaponType.Particle_Beam);
        fields.get("maxGroundHits").set(UnitType.Protoss_Probe, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Probe, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Probe, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Probe, 4.92);
        fields.get("acceleration").set(UnitType.Protoss_Probe, 67);
        fields.get("haltDistance").set(UnitType.Protoss_Probe, 12227);
        fields.get("turnRadius").set(UnitType.Protoss_Probe, 40);
        fields.get("canProduce").set(UnitType.Protoss_Probe, false);
        fields.get("canAttack").set(UnitType.Protoss_Probe, true);
        fields.get("canMove").set(UnitType.Protoss_Probe, true);
        fields.get("isFlyer").set(UnitType.Protoss_Probe, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Probe, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Probe, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Probe, false);
        fields.get("isInvincible").set(UnitType.Protoss_Probe, false);
        fields.get("isOrganic").set(UnitType.Protoss_Probe, false);
        fields.get("isMechanical").set(UnitType.Protoss_Probe, true);
        fields.get("isRobotic").set(UnitType.Protoss_Probe, true);
        fields.get("isDetector").set(UnitType.Protoss_Probe, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Probe, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Probe, false);
        fields.get("isRefinery").set(UnitType.Protoss_Probe, false);
        fields.get("isWorker").set(UnitType.Protoss_Probe, true);
        fields.get("requiresPsi").set(UnitType.Protoss_Probe, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Probe, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Probe, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Probe, false);
        fields.get("isCloakable").set(UnitType.Protoss_Probe, false);
        fields.get("isBuilding").set(UnitType.Protoss_Probe, false);
        fields.get("isAddon").set(UnitType.Protoss_Probe, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Probe, false);
        fields.get("isNeutral").set(UnitType.Protoss_Probe, false);
        fields.get("isHero").set(UnitType.Protoss_Probe, false);
        fields.get("isPowerup").set(UnitType.Protoss_Probe, false);
        fields.get("isBeacon").set(UnitType.Protoss_Probe, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Probe, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Probe, false);
        fields.get("isSpell").set(UnitType.Protoss_Probe, false);
        fields.get("producesCreep").set(UnitType.Protoss_Probe, false);
        fields.get("producesLarva").set(UnitType.Protoss_Probe, false);
        fields.get("isMineralField").set(UnitType.Protoss_Probe, false);
        fields.get("isCritter").set(UnitType.Protoss_Probe, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Probe, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Zealot() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Zealot, 65);
        fields.get("race").set(UnitType.Protoss_Zealot, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Zealot, new Pair(UnitType.Protoss_Gateway, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList(UnitType.Protoss_Gateway)));
        fields.get("requiredTech").set(UnitType.Protoss_Zealot, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Zealot, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor, UpgradeType.Leg_Enhancements)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Zealot, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Zealot, 100);
        fields.get("maxShields").set(UnitType.Protoss_Zealot, 60);
        fields.get("maxEnergy").set(UnitType.Protoss_Zealot, 0);
        fields.get("armor").set(UnitType.Protoss_Zealot, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Zealot, 100);
        fields.get("gasPrice").set(UnitType.Protoss_Zealot, 0);
        fields.get("buildTime").set(UnitType.Protoss_Zealot, 600);
        fields.get("supplyRequired").set(UnitType.Protoss_Zealot, 4);
        fields.get("supplyProvided").set(UnitType.Protoss_Zealot, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Zealot, 2);
        fields.get("spaceProvided").set(UnitType.Protoss_Zealot, 0);
        fields.get("buildScore").set(UnitType.Protoss_Zealot, 100);
        fields.get("destroyScore").set(UnitType.Protoss_Zealot, 200);
        fields.get("size").set(UnitType.Protoss_Zealot, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Protoss_Zealot, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Zealot, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Zealot, 11);
        fields.get("dimensionUp").set(UnitType.Protoss_Zealot, 5);
        fields.get("dimensionRight").set(UnitType.Protoss_Zealot, 11);
        fields.get("dimensionDown").set(UnitType.Protoss_Zealot, 13);
        fields.get("width").set(UnitType.Protoss_Zealot, 23);
        fields.get("height").set(UnitType.Protoss_Zealot, 19);
        fields.get("seekRange").set(UnitType.Protoss_Zealot, 96);
        fields.get("sightRange").set(UnitType.Protoss_Zealot, 224);
        fields.get("groundWeapon").set(UnitType.Protoss_Zealot, WeaponType.Psi_Blades);
        fields.get("maxGroundHits").set(UnitType.Protoss_Zealot, 2);
        fields.get("airWeapon").set(UnitType.Protoss_Zealot, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Zealot, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Zealot, 4.0);
        fields.get("acceleration").set(UnitType.Protoss_Zealot, 1);
        fields.get("haltDistance").set(UnitType.Protoss_Zealot, 1);
        fields.get("turnRadius").set(UnitType.Protoss_Zealot, 40);
        fields.get("canProduce").set(UnitType.Protoss_Zealot, false);
        fields.get("canAttack").set(UnitType.Protoss_Zealot, true);
        fields.get("canMove").set(UnitType.Protoss_Zealot, true);
        fields.get("isFlyer").set(UnitType.Protoss_Zealot, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Zealot, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Zealot, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Zealot, false);
        fields.get("isInvincible").set(UnitType.Protoss_Zealot, false);
        fields.get("isOrganic").set(UnitType.Protoss_Zealot, true);
        fields.get("isMechanical").set(UnitType.Protoss_Zealot, false);
        fields.get("isRobotic").set(UnitType.Protoss_Zealot, false);
        fields.get("isDetector").set(UnitType.Protoss_Zealot, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Zealot, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Zealot, false);
        fields.get("isRefinery").set(UnitType.Protoss_Zealot, false);
        fields.get("isWorker").set(UnitType.Protoss_Zealot, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Zealot, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Zealot, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Zealot, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Zealot, false);
        fields.get("isCloakable").set(UnitType.Protoss_Zealot, false);
        fields.get("isBuilding").set(UnitType.Protoss_Zealot, false);
        fields.get("isAddon").set(UnitType.Protoss_Zealot, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Zealot, false);
        fields.get("isNeutral").set(UnitType.Protoss_Zealot, false);
        fields.get("isHero").set(UnitType.Protoss_Zealot, false);
        fields.get("isPowerup").set(UnitType.Protoss_Zealot, false);
        fields.get("isBeacon").set(UnitType.Protoss_Zealot, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Zealot, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Zealot, false);
        fields.get("isSpell").set(UnitType.Protoss_Zealot, false);
        fields.get("producesCreep").set(UnitType.Protoss_Zealot, false);
        fields.get("producesLarva").set(UnitType.Protoss_Zealot, false);
        fields.get("isMineralField").set(UnitType.Protoss_Zealot, false);
        fields.get("isCritter").set(UnitType.Protoss_Zealot, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Zealot, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Dragoon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Dragoon, 66);
        fields.get("race").set(UnitType.Protoss_Dragoon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Dragoon, new Pair(UnitType.Protoss_Gateway, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList(UnitType.Protoss_Gateway, UnitType.Protoss_Cybernetics_Core)));
        fields.get("requiredTech").set(UnitType.Protoss_Dragoon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Dragoon, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor, UpgradeType.Singularity_Charge)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Dragoon, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Dragoon, 100);
        fields.get("maxShields").set(UnitType.Protoss_Dragoon, 80);
        fields.get("maxEnergy").set(UnitType.Protoss_Dragoon, 0);
        fields.get("armor").set(UnitType.Protoss_Dragoon, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Dragoon, 125);
        fields.get("gasPrice").set(UnitType.Protoss_Dragoon, 50);
        fields.get("buildTime").set(UnitType.Protoss_Dragoon, 750);
        fields.get("supplyRequired").set(UnitType.Protoss_Dragoon, 4);
        fields.get("supplyProvided").set(UnitType.Protoss_Dragoon, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Dragoon, 4);
        fields.get("spaceProvided").set(UnitType.Protoss_Dragoon, 0);
        fields.get("buildScore").set(UnitType.Protoss_Dragoon, 250);
        fields.get("destroyScore").set(UnitType.Protoss_Dragoon, 500);
        fields.get("size").set(UnitType.Protoss_Dragoon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Dragoon, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Dragoon, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Dragoon, 15);
        fields.get("dimensionUp").set(UnitType.Protoss_Dragoon, 15);
        fields.get("dimensionRight").set(UnitType.Protoss_Dragoon, 16);
        fields.get("dimensionDown").set(UnitType.Protoss_Dragoon, 16);
        fields.get("width").set(UnitType.Protoss_Dragoon, 32);
        fields.get("height").set(UnitType.Protoss_Dragoon, 32);
        fields.get("seekRange").set(UnitType.Protoss_Dragoon, 0);
        fields.get("sightRange").set(UnitType.Protoss_Dragoon, 256);
        fields.get("groundWeapon").set(UnitType.Protoss_Dragoon, WeaponType.Phase_Disruptor);
        fields.get("maxGroundHits").set(UnitType.Protoss_Dragoon, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Dragoon, WeaponType.Phase_Disruptor);
        fields.get("maxAirHits").set(UnitType.Protoss_Dragoon, 1);
        fields.get("topSpeed").set(UnitType.Protoss_Dragoon, 5.0);
        fields.get("acceleration").set(UnitType.Protoss_Dragoon, 1);
        fields.get("haltDistance").set(UnitType.Protoss_Dragoon, 1);
        fields.get("turnRadius").set(UnitType.Protoss_Dragoon, 40);
        fields.get("canProduce").set(UnitType.Protoss_Dragoon, false);
        fields.get("canAttack").set(UnitType.Protoss_Dragoon, true);
        fields.get("canMove").set(UnitType.Protoss_Dragoon, true);
        fields.get("isFlyer").set(UnitType.Protoss_Dragoon, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Dragoon, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Dragoon, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Dragoon, false);
        fields.get("isInvincible").set(UnitType.Protoss_Dragoon, false);
        fields.get("isOrganic").set(UnitType.Protoss_Dragoon, false);
        fields.get("isMechanical").set(UnitType.Protoss_Dragoon, true);
        fields.get("isRobotic").set(UnitType.Protoss_Dragoon, false);
        fields.get("isDetector").set(UnitType.Protoss_Dragoon, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Dragoon, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Dragoon, false);
        fields.get("isRefinery").set(UnitType.Protoss_Dragoon, false);
        fields.get("isWorker").set(UnitType.Protoss_Dragoon, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Dragoon, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Dragoon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Dragoon, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Dragoon, false);
        fields.get("isCloakable").set(UnitType.Protoss_Dragoon, false);
        fields.get("isBuilding").set(UnitType.Protoss_Dragoon, false);
        fields.get("isAddon").set(UnitType.Protoss_Dragoon, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Dragoon, false);
        fields.get("isNeutral").set(UnitType.Protoss_Dragoon, false);
        fields.get("isHero").set(UnitType.Protoss_Dragoon, false);
        fields.get("isPowerup").set(UnitType.Protoss_Dragoon, false);
        fields.get("isBeacon").set(UnitType.Protoss_Dragoon, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Dragoon, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Dragoon, false);
        fields.get("isSpell").set(UnitType.Protoss_Dragoon, false);
        fields.get("producesCreep").set(UnitType.Protoss_Dragoon, false);
        fields.get("producesLarva").set(UnitType.Protoss_Dragoon, false);
        fields.get("isMineralField").set(UnitType.Protoss_Dragoon, false);
        fields.get("isCritter").set(UnitType.Protoss_Dragoon, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Dragoon, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_High_Templar() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_High_Templar, 67);
        fields.get("race").set(UnitType.Protoss_High_Templar, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_High_Templar, new Pair(UnitType.Protoss_Gateway, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList(UnitType.Protoss_Gateway, UnitType.Protoss_Templar_Archives)));
        fields.get("requiredTech").set(UnitType.Protoss_High_Templar, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_High_Templar, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList(TechType.Psionic_Storm, TechType.Hallucination, TechType.Archon_Warp)));
        fields.get("upgrades").set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Armor, UpgradeType.Khaydarin_Amulet)));
        fields.get("armorUpgrade").set(UnitType.Protoss_High_Templar, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_High_Templar, 40);
        fields.get("maxShields").set(UnitType.Protoss_High_Templar, 40);
        fields.get("maxEnergy").set(UnitType.Protoss_High_Templar, 200);
        fields.get("armor").set(UnitType.Protoss_High_Templar, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_High_Templar, 50);
        fields.get("gasPrice").set(UnitType.Protoss_High_Templar, 150);
        fields.get("buildTime").set(UnitType.Protoss_High_Templar, 750);
        fields.get("supplyRequired").set(UnitType.Protoss_High_Templar, 4);
        fields.get("supplyProvided").set(UnitType.Protoss_High_Templar, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_High_Templar, 2);
        fields.get("spaceProvided").set(UnitType.Protoss_High_Templar, 0);
        fields.get("buildScore").set(UnitType.Protoss_High_Templar, 350);
        fields.get("destroyScore").set(UnitType.Protoss_High_Templar, 700);
        fields.get("size").set(UnitType.Protoss_High_Templar, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Protoss_High_Templar, 1);
        fields.get("tileHeight").set(UnitType.Protoss_High_Templar, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_High_Templar, 12);
        fields.get("dimensionUp").set(UnitType.Protoss_High_Templar, 10);
        fields.get("dimensionRight").set(UnitType.Protoss_High_Templar, 11);
        fields.get("dimensionDown").set(UnitType.Protoss_High_Templar, 13);
        fields.get("width").set(UnitType.Protoss_High_Templar, 24);
        fields.get("height").set(UnitType.Protoss_High_Templar, 24);
        fields.get("seekRange").set(UnitType.Protoss_High_Templar, 96);
        fields.get("sightRange").set(UnitType.Protoss_High_Templar, 224);
        fields.get("groundWeapon").set(UnitType.Protoss_High_Templar, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_High_Templar, 0);
        fields.get("airWeapon").set(UnitType.Protoss_High_Templar, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_High_Templar, 0);
        fields.get("topSpeed").set(UnitType.Protoss_High_Templar, 3.2);
        fields.get("acceleration").set(UnitType.Protoss_High_Templar, 27);
        fields.get("haltDistance").set(UnitType.Protoss_High_Templar, 13474);
        fields.get("turnRadius").set(UnitType.Protoss_High_Templar, 40);
        fields.get("canProduce").set(UnitType.Protoss_High_Templar, false);
        fields.get("canAttack").set(UnitType.Protoss_High_Templar, false);
        fields.get("canMove").set(UnitType.Protoss_High_Templar, true);
        fields.get("isFlyer").set(UnitType.Protoss_High_Templar, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_High_Templar, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_High_Templar, true);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_High_Templar, false);
        fields.get("isInvincible").set(UnitType.Protoss_High_Templar, false);
        fields.get("isOrganic").set(UnitType.Protoss_High_Templar, true);
        fields.get("isMechanical").set(UnitType.Protoss_High_Templar, false);
        fields.get("isRobotic").set(UnitType.Protoss_High_Templar, false);
        fields.get("isDetector").set(UnitType.Protoss_High_Templar, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_High_Templar, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_High_Templar, false);
        fields.get("isRefinery").set(UnitType.Protoss_High_Templar, false);
        fields.get("isWorker").set(UnitType.Protoss_High_Templar, false);
        fields.get("requiresPsi").set(UnitType.Protoss_High_Templar, false);
        fields.get("requiresCreep").set(UnitType.Protoss_High_Templar, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_High_Templar, false);
        fields.get("isBurrowable").set(UnitType.Protoss_High_Templar, false);
        fields.get("isCloakable").set(UnitType.Protoss_High_Templar, false);
        fields.get("isBuilding").set(UnitType.Protoss_High_Templar, false);
        fields.get("isAddon").set(UnitType.Protoss_High_Templar, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_High_Templar, false);
        fields.get("isNeutral").set(UnitType.Protoss_High_Templar, false);
        fields.get("isHero").set(UnitType.Protoss_High_Templar, false);
        fields.get("isPowerup").set(UnitType.Protoss_High_Templar, false);
        fields.get("isBeacon").set(UnitType.Protoss_High_Templar, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_High_Templar, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_High_Templar, false);
        fields.get("isSpell").set(UnitType.Protoss_High_Templar, false);
        fields.get("producesCreep").set(UnitType.Protoss_High_Templar, false);
        fields.get("producesLarva").set(UnitType.Protoss_High_Templar, false);
        fields.get("isMineralField").set(UnitType.Protoss_High_Templar, false);
        fields.get("isCritter").set(UnitType.Protoss_High_Templar, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_High_Templar, false);
        fields.get("researchesWhat").set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Archon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Archon, 68);
        fields.get("race").set(UnitType.Protoss_Archon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Archon, new Pair(UnitType.Protoss_High_Templar, 2));
        fields.get("requiredUnits").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList(UnitType.Protoss_High_Templar)));
        fields.get("requiredTech").set(UnitType.Protoss_Archon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Archon, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Archon, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Archon, 10);
        fields.get("maxShields").set(UnitType.Protoss_Archon, 350);
        fields.get("maxEnergy").set(UnitType.Protoss_Archon, 0);
        fields.get("armor").set(UnitType.Protoss_Archon, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Archon, 0);
        fields.get("gasPrice").set(UnitType.Protoss_Archon, 0);
        fields.get("buildTime").set(UnitType.Protoss_Archon, 300);
        fields.get("supplyRequired").set(UnitType.Protoss_Archon, 8);
        fields.get("supplyProvided").set(UnitType.Protoss_Archon, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Archon, 4);
        fields.get("spaceProvided").set(UnitType.Protoss_Archon, 0);
        fields.get("buildScore").set(UnitType.Protoss_Archon, 700);
        fields.get("destroyScore").set(UnitType.Protoss_Archon, 1400);
        fields.get("size").set(UnitType.Protoss_Archon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Archon, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Archon, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Archon, 16);
        fields.get("dimensionUp").set(UnitType.Protoss_Archon, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Archon, 15);
        fields.get("dimensionDown").set(UnitType.Protoss_Archon, 15);
        fields.get("width").set(UnitType.Protoss_Archon, 32);
        fields.get("height").set(UnitType.Protoss_Archon, 32);
        fields.get("seekRange").set(UnitType.Protoss_Archon, 96);
        fields.get("sightRange").set(UnitType.Protoss_Archon, 256);
        fields.get("groundWeapon").set(UnitType.Protoss_Archon, WeaponType.Psionic_Shockwave);
        fields.get("maxGroundHits").set(UnitType.Protoss_Archon, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Archon, WeaponType.Psionic_Shockwave);
        fields.get("maxAirHits").set(UnitType.Protoss_Archon, 1);
        fields.get("topSpeed").set(UnitType.Protoss_Archon, 4.92);
        fields.get("acceleration").set(UnitType.Protoss_Archon, 160);
        fields.get("haltDistance").set(UnitType.Protoss_Archon, 5120);
        fields.get("turnRadius").set(UnitType.Protoss_Archon, 40);
        fields.get("canProduce").set(UnitType.Protoss_Archon, false);
        fields.get("canAttack").set(UnitType.Protoss_Archon, true);
        fields.get("canMove").set(UnitType.Protoss_Archon, true);
        fields.get("isFlyer").set(UnitType.Protoss_Archon, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Archon, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Archon, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Archon, false);
        fields.get("isInvincible").set(UnitType.Protoss_Archon, false);
        fields.get("isOrganic").set(UnitType.Protoss_Archon, false);
        fields.get("isMechanical").set(UnitType.Protoss_Archon, false);
        fields.get("isRobotic").set(UnitType.Protoss_Archon, false);
        fields.get("isDetector").set(UnitType.Protoss_Archon, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Archon, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Archon, false);
        fields.get("isRefinery").set(UnitType.Protoss_Archon, false);
        fields.get("isWorker").set(UnitType.Protoss_Archon, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Archon, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Archon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Archon, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Archon, false);
        fields.get("isCloakable").set(UnitType.Protoss_Archon, false);
        fields.get("isBuilding").set(UnitType.Protoss_Archon, false);
        fields.get("isAddon").set(UnitType.Protoss_Archon, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Archon, false);
        fields.get("isNeutral").set(UnitType.Protoss_Archon, false);
        fields.get("isHero").set(UnitType.Protoss_Archon, false);
        fields.get("isPowerup").set(UnitType.Protoss_Archon, false);
        fields.get("isBeacon").set(UnitType.Protoss_Archon, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Archon, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Archon, false);
        fields.get("isSpell").set(UnitType.Protoss_Archon, false);
        fields.get("producesCreep").set(UnitType.Protoss_Archon, false);
        fields.get("producesLarva").set(UnitType.Protoss_Archon, false);
        fields.get("isMineralField").set(UnitType.Protoss_Archon, false);
        fields.get("isCritter").set(UnitType.Protoss_Archon, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Archon, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Shuttle() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Shuttle, 69);
        fields.get("race").set(UnitType.Protoss_Shuttle, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Shuttle, new Pair(UnitType.Protoss_Robotics_Facility, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList(UnitType.Protoss_Robotics_Facility)));
        fields.get("requiredTech").set(UnitType.Protoss_Shuttle, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Shuttle, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Armor, UpgradeType.Gravitic_Drive)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Shuttle, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Shuttle, 80);
        fields.get("maxShields").set(UnitType.Protoss_Shuttle, 60);
        fields.get("maxEnergy").set(UnitType.Protoss_Shuttle, 0);
        fields.get("armor").set(UnitType.Protoss_Shuttle, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Shuttle, 200);
        fields.get("gasPrice").set(UnitType.Protoss_Shuttle, 0);
        fields.get("buildTime").set(UnitType.Protoss_Shuttle, 900);
        fields.get("supplyRequired").set(UnitType.Protoss_Shuttle, 4);
        fields.get("supplyProvided").set(UnitType.Protoss_Shuttle, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Shuttle, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Shuttle, 8);
        fields.get("buildScore").set(UnitType.Protoss_Shuttle, 200);
        fields.get("destroyScore").set(UnitType.Protoss_Shuttle, 400);
        fields.get("size").set(UnitType.Protoss_Shuttle, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Shuttle, 2);
        fields.get("tileHeight").set(UnitType.Protoss_Shuttle, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Shuttle, 20);
        fields.get("dimensionUp").set(UnitType.Protoss_Shuttle, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Shuttle, 19);
        fields.get("dimensionDown").set(UnitType.Protoss_Shuttle, 15);
        fields.get("width").set(UnitType.Protoss_Shuttle, 40);
        fields.get("height").set(UnitType.Protoss_Shuttle, 32);
        fields.get("seekRange").set(UnitType.Protoss_Shuttle, 0);
        fields.get("sightRange").set(UnitType.Protoss_Shuttle, 256);
        fields.get("groundWeapon").set(UnitType.Protoss_Shuttle, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Shuttle, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Shuttle, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Shuttle, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Shuttle, 4.43);
        fields.get("acceleration").set(UnitType.Protoss_Shuttle, 17);
        fields.get("haltDistance").set(UnitType.Protoss_Shuttle, 37756);
        fields.get("turnRadius").set(UnitType.Protoss_Shuttle, 20);
        fields.get("canProduce").set(UnitType.Protoss_Shuttle, false);
        fields.get("canAttack").set(UnitType.Protoss_Shuttle, false);
        fields.get("canMove").set(UnitType.Protoss_Shuttle, true);
        fields.get("isFlyer").set(UnitType.Protoss_Shuttle, true);
        fields.get("regeneratesHP").set(UnitType.Protoss_Shuttle, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Shuttle, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Shuttle, false);
        fields.get("isInvincible").set(UnitType.Protoss_Shuttle, false);
        fields.get("isOrganic").set(UnitType.Protoss_Shuttle, false);
        fields.get("isMechanical").set(UnitType.Protoss_Shuttle, true);
        fields.get("isRobotic").set(UnitType.Protoss_Shuttle, true);
        fields.get("isDetector").set(UnitType.Protoss_Shuttle, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Shuttle, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Shuttle, false);
        fields.get("isRefinery").set(UnitType.Protoss_Shuttle, false);
        fields.get("isWorker").set(UnitType.Protoss_Shuttle, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Shuttle, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Shuttle, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Shuttle, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Shuttle, false);
        fields.get("isCloakable").set(UnitType.Protoss_Shuttle, false);
        fields.get("isBuilding").set(UnitType.Protoss_Shuttle, false);
        fields.get("isAddon").set(UnitType.Protoss_Shuttle, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Shuttle, false);
        fields.get("isNeutral").set(UnitType.Protoss_Shuttle, false);
        fields.get("isHero").set(UnitType.Protoss_Shuttle, false);
        fields.get("isPowerup").set(UnitType.Protoss_Shuttle, false);
        fields.get("isBeacon").set(UnitType.Protoss_Shuttle, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Shuttle, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Shuttle, false);
        fields.get("isSpell").set(UnitType.Protoss_Shuttle, false);
        fields.get("producesCreep").set(UnitType.Protoss_Shuttle, false);
        fields.get("producesLarva").set(UnitType.Protoss_Shuttle, false);
        fields.get("isMineralField").set(UnitType.Protoss_Shuttle, false);
        fields.get("isCritter").set(UnitType.Protoss_Shuttle, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Shuttle, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Scout() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Scout, 70);
        fields.get("race").set(UnitType.Protoss_Scout, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Scout, new Pair(UnitType.Protoss_Stargate, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList(UnitType.Protoss_Stargate)));
        fields.get("requiredTech").set(UnitType.Protoss_Scout, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Scout, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor, UpgradeType.Apial_Sensors, UpgradeType.Gravitic_Thrusters)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Scout, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Scout, 150);
        fields.get("maxShields").set(UnitType.Protoss_Scout, 100);
        fields.get("maxEnergy").set(UnitType.Protoss_Scout, 0);
        fields.get("armor").set(UnitType.Protoss_Scout, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Scout, 275);
        fields.get("gasPrice").set(UnitType.Protoss_Scout, 125);
        fields.get("buildTime").set(UnitType.Protoss_Scout, 1200);
        fields.get("supplyRequired").set(UnitType.Protoss_Scout, 6);
        fields.get("supplyProvided").set(UnitType.Protoss_Scout, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Scout, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Scout, 0);
        fields.get("buildScore").set(UnitType.Protoss_Scout, 650);
        fields.get("destroyScore").set(UnitType.Protoss_Scout, 1300);
        fields.get("size").set(UnitType.Protoss_Scout, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Scout, 2);
        fields.get("tileHeight").set(UnitType.Protoss_Scout, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Scout, 18);
        fields.get("dimensionUp").set(UnitType.Protoss_Scout, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Scout, 17);
        fields.get("dimensionDown").set(UnitType.Protoss_Scout, 15);
        fields.get("width").set(UnitType.Protoss_Scout, 36);
        fields.get("height").set(UnitType.Protoss_Scout, 32);
        fields.get("seekRange").set(UnitType.Protoss_Scout, 0);
        fields.get("sightRange").set(UnitType.Protoss_Scout, 256);
        fields.get("groundWeapon").set(UnitType.Protoss_Scout, WeaponType.Dual_Photon_Blasters);
        fields.get("maxGroundHits").set(UnitType.Protoss_Scout, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Scout, WeaponType.Anti_Matter_Missiles);
        fields.get("maxAirHits").set(UnitType.Protoss_Scout, 1);
        fields.get("topSpeed").set(UnitType.Protoss_Scout, 5.0);
        fields.get("acceleration").set(UnitType.Protoss_Scout, 48);
        fields.get("haltDistance").set(UnitType.Protoss_Scout, 17067);
        fields.get("turnRadius").set(UnitType.Protoss_Scout, 30);
        fields.get("canProduce").set(UnitType.Protoss_Scout, false);
        fields.get("canAttack").set(UnitType.Protoss_Scout, true);
        fields.get("canMove").set(UnitType.Protoss_Scout, true);
        fields.get("isFlyer").set(UnitType.Protoss_Scout, true);
        fields.get("regeneratesHP").set(UnitType.Protoss_Scout, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Scout, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Scout, false);
        fields.get("isInvincible").set(UnitType.Protoss_Scout, false);
        fields.get("isOrganic").set(UnitType.Protoss_Scout, false);
        fields.get("isMechanical").set(UnitType.Protoss_Scout, true);
        fields.get("isRobotic").set(UnitType.Protoss_Scout, false);
        fields.get("isDetector").set(UnitType.Protoss_Scout, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Scout, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Scout, false);
        fields.get("isRefinery").set(UnitType.Protoss_Scout, false);
        fields.get("isWorker").set(UnitType.Protoss_Scout, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Scout, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Scout, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Scout, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Scout, false);
        fields.get("isCloakable").set(UnitType.Protoss_Scout, false);
        fields.get("isBuilding").set(UnitType.Protoss_Scout, false);
        fields.get("isAddon").set(UnitType.Protoss_Scout, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Scout, false);
        fields.get("isNeutral").set(UnitType.Protoss_Scout, false);
        fields.get("isHero").set(UnitType.Protoss_Scout, false);
        fields.get("isPowerup").set(UnitType.Protoss_Scout, false);
        fields.get("isBeacon").set(UnitType.Protoss_Scout, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Scout, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Scout, false);
        fields.get("isSpell").set(UnitType.Protoss_Scout, false);
        fields.get("producesCreep").set(UnitType.Protoss_Scout, false);
        fields.get("producesLarva").set(UnitType.Protoss_Scout, false);
        fields.get("isMineralField").set(UnitType.Protoss_Scout, false);
        fields.get("isCritter").set(UnitType.Protoss_Scout, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Scout, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Arbiter() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Arbiter, 71);
        fields.get("race").set(UnitType.Protoss_Arbiter, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Arbiter, new Pair(UnitType.Protoss_Stargate, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList(UnitType.Protoss_Stargate, UnitType.Protoss_Arbiter_Tribunal)));
        fields.get("requiredTech").set(UnitType.Protoss_Arbiter, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Arbiter, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList(TechType.Recall, TechType.Stasis_Field)));
        fields.get("upgrades").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor, UpgradeType.Khaydarin_Core)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Arbiter, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Arbiter, 200);
        fields.get("maxShields").set(UnitType.Protoss_Arbiter, 150);
        fields.get("maxEnergy").set(UnitType.Protoss_Arbiter, 200);
        fields.get("armor").set(UnitType.Protoss_Arbiter, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Arbiter, 100);
        fields.get("gasPrice").set(UnitType.Protoss_Arbiter, 350);
        fields.get("buildTime").set(UnitType.Protoss_Arbiter, 2400);
        fields.get("supplyRequired").set(UnitType.Protoss_Arbiter, 8);
        fields.get("supplyProvided").set(UnitType.Protoss_Arbiter, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Arbiter, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Arbiter, 0);
        fields.get("buildScore").set(UnitType.Protoss_Arbiter, 1025);
        fields.get("destroyScore").set(UnitType.Protoss_Arbiter, 2050);
        fields.get("size").set(UnitType.Protoss_Arbiter, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Arbiter, 2);
        fields.get("tileHeight").set(UnitType.Protoss_Arbiter, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Arbiter, 22);
        fields.get("dimensionUp").set(UnitType.Protoss_Arbiter, 22);
        fields.get("dimensionRight").set(UnitType.Protoss_Arbiter, 21);
        fields.get("dimensionDown").set(UnitType.Protoss_Arbiter, 21);
        fields.get("width").set(UnitType.Protoss_Arbiter, 44);
        fields.get("height").set(UnitType.Protoss_Arbiter, 44);
        fields.get("seekRange").set(UnitType.Protoss_Arbiter, 0);
        fields.get("sightRange").set(UnitType.Protoss_Arbiter, 288);
        fields.get("groundWeapon").set(UnitType.Protoss_Arbiter, WeaponType.Phase_Disruptor_Cannon);
        fields.get("maxGroundHits").set(UnitType.Protoss_Arbiter, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Arbiter, WeaponType.Phase_Disruptor_Cannon);
        fields.get("maxAirHits").set(UnitType.Protoss_Arbiter, 1);
        fields.get("topSpeed").set(UnitType.Protoss_Arbiter, 5.0);
        fields.get("acceleration").set(UnitType.Protoss_Arbiter, 33);
        fields.get("haltDistance").set(UnitType.Protoss_Arbiter, 24824);
        fields.get("turnRadius").set(UnitType.Protoss_Arbiter, 40);
        fields.get("canProduce").set(UnitType.Protoss_Arbiter, false);
        fields.get("canAttack").set(UnitType.Protoss_Arbiter, true);
        fields.get("canMove").set(UnitType.Protoss_Arbiter, true);
        fields.get("isFlyer").set(UnitType.Protoss_Arbiter, true);
        fields.get("regeneratesHP").set(UnitType.Protoss_Arbiter, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Arbiter, true);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Arbiter, false);
        fields.get("isInvincible").set(UnitType.Protoss_Arbiter, false);
        fields.get("isOrganic").set(UnitType.Protoss_Arbiter, false);
        fields.get("isMechanical").set(UnitType.Protoss_Arbiter, true);
        fields.get("isRobotic").set(UnitType.Protoss_Arbiter, false);
        fields.get("isDetector").set(UnitType.Protoss_Arbiter, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Arbiter, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Arbiter, false);
        fields.get("isRefinery").set(UnitType.Protoss_Arbiter, false);
        fields.get("isWorker").set(UnitType.Protoss_Arbiter, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Arbiter, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Arbiter, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Arbiter, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Arbiter, false);
        fields.get("isCloakable").set(UnitType.Protoss_Arbiter, false);
        fields.get("isBuilding").set(UnitType.Protoss_Arbiter, false);
        fields.get("isAddon").set(UnitType.Protoss_Arbiter, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Arbiter, false);
        fields.get("isNeutral").set(UnitType.Protoss_Arbiter, false);
        fields.get("isHero").set(UnitType.Protoss_Arbiter, false);
        fields.get("isPowerup").set(UnitType.Protoss_Arbiter, false);
        fields.get("isBeacon").set(UnitType.Protoss_Arbiter, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Arbiter, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Arbiter, false);
        fields.get("isSpell").set(UnitType.Protoss_Arbiter, false);
        fields.get("producesCreep").set(UnitType.Protoss_Arbiter, false);
        fields.get("producesLarva").set(UnitType.Protoss_Arbiter, false);
        fields.get("isMineralField").set(UnitType.Protoss_Arbiter, false);
        fields.get("isCritter").set(UnitType.Protoss_Arbiter, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Arbiter, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Carrier() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Carrier, 72);
        fields.get("race").set(UnitType.Protoss_Carrier, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Carrier, new Pair(UnitType.Protoss_Stargate, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList(UnitType.Protoss_Stargate, UnitType.Protoss_Fleet_Beacon)));
        fields.get("requiredTech").set(UnitType.Protoss_Carrier, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Carrier, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor, UpgradeType.Carrier_Capacity)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Carrier, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Carrier, 300);
        fields.get("maxShields").set(UnitType.Protoss_Carrier, 150);
        fields.get("maxEnergy").set(UnitType.Protoss_Carrier, 0);
        fields.get("armor").set(UnitType.Protoss_Carrier, 4);
        fields.get("mineralPrice").set(UnitType.Protoss_Carrier, 350);
        fields.get("gasPrice").set(UnitType.Protoss_Carrier, 250);
        fields.get("buildTime").set(UnitType.Protoss_Carrier, 2100);
        fields.get("supplyRequired").set(UnitType.Protoss_Carrier, 12);
        fields.get("supplyProvided").set(UnitType.Protoss_Carrier, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Carrier, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Carrier, 0);
        fields.get("buildScore").set(UnitType.Protoss_Carrier, 950);
        fields.get("destroyScore").set(UnitType.Protoss_Carrier, 1900);
        fields.get("size").set(UnitType.Protoss_Carrier, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Carrier, 2);
        fields.get("tileHeight").set(UnitType.Protoss_Carrier, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Carrier, 32);
        fields.get("dimensionUp").set(UnitType.Protoss_Carrier, 32);
        fields.get("dimensionRight").set(UnitType.Protoss_Carrier, 31);
        fields.get("dimensionDown").set(UnitType.Protoss_Carrier, 31);
        fields.get("width").set(UnitType.Protoss_Carrier, 64);
        fields.get("height").set(UnitType.Protoss_Carrier, 64);
        fields.get("seekRange").set(UnitType.Protoss_Carrier, 256);
        fields.get("sightRange").set(UnitType.Protoss_Carrier, 352);
        fields.get("groundWeapon").set(UnitType.Protoss_Carrier, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Carrier, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Carrier, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Carrier, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Carrier, 3.33);
        fields.get("acceleration").set(UnitType.Protoss_Carrier, 27);
        fields.get("haltDistance").set(UnitType.Protoss_Carrier, 13474);
        fields.get("turnRadius").set(UnitType.Protoss_Carrier, 20);
        fields.get("canProduce").set(UnitType.Protoss_Carrier, true);
        fields.get("canAttack").set(UnitType.Protoss_Carrier, true);
        fields.get("canMove").set(UnitType.Protoss_Carrier, true);
        fields.get("isFlyer").set(UnitType.Protoss_Carrier, true);
        fields.get("regeneratesHP").set(UnitType.Protoss_Carrier, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Carrier, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Carrier, false);
        fields.get("isInvincible").set(UnitType.Protoss_Carrier, false);
        fields.get("isOrganic").set(UnitType.Protoss_Carrier, false);
        fields.get("isMechanical").set(UnitType.Protoss_Carrier, true);
        fields.get("isRobotic").set(UnitType.Protoss_Carrier, false);
        fields.get("isDetector").set(UnitType.Protoss_Carrier, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Carrier, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Carrier, false);
        fields.get("isRefinery").set(UnitType.Protoss_Carrier, false);
        fields.get("isWorker").set(UnitType.Protoss_Carrier, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Carrier, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Carrier, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Carrier, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Carrier, false);
        fields.get("isCloakable").set(UnitType.Protoss_Carrier, false);
        fields.get("isBuilding").set(UnitType.Protoss_Carrier, false);
        fields.get("isAddon").set(UnitType.Protoss_Carrier, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Carrier, false);
        fields.get("isNeutral").set(UnitType.Protoss_Carrier, false);
        fields.get("isHero").set(UnitType.Protoss_Carrier, false);
        fields.get("isPowerup").set(UnitType.Protoss_Carrier, false);
        fields.get("isBeacon").set(UnitType.Protoss_Carrier, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Carrier, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Carrier, false);
        fields.get("isSpell").set(UnitType.Protoss_Carrier, false);
        fields.get("producesCreep").set(UnitType.Protoss_Carrier, false);
        fields.get("producesLarva").set(UnitType.Protoss_Carrier, false);
        fields.get("isMineralField").set(UnitType.Protoss_Carrier, false);
        fields.get("isCritter").set(UnitType.Protoss_Carrier, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Carrier, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Interceptor() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Interceptor, 73);
        fields.get("race").set(UnitType.Protoss_Interceptor, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Interceptor, new Pair(UnitType.Protoss_Carrier, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList(UnitType.Protoss_Carrier)));
        fields.get("requiredTech").set(UnitType.Protoss_Interceptor, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Interceptor, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Interceptor, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Interceptor, 40);
        fields.get("maxShields").set(UnitType.Protoss_Interceptor, 40);
        fields.get("maxEnergy").set(UnitType.Protoss_Interceptor, 0);
        fields.get("armor").set(UnitType.Protoss_Interceptor, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Interceptor, 25);
        fields.get("gasPrice").set(UnitType.Protoss_Interceptor, 0);
        fields.get("buildTime").set(UnitType.Protoss_Interceptor, 300);
        fields.get("supplyRequired").set(UnitType.Protoss_Interceptor, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Interceptor, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Interceptor, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Interceptor, 0);
        fields.get("buildScore").set(UnitType.Protoss_Interceptor, 30);
        fields.get("destroyScore").set(UnitType.Protoss_Interceptor, 60);
        fields.get("size").set(UnitType.Protoss_Interceptor, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Protoss_Interceptor, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Interceptor, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Interceptor, 8);
        fields.get("dimensionUp").set(UnitType.Protoss_Interceptor, 8);
        fields.get("dimensionRight").set(UnitType.Protoss_Interceptor, 7);
        fields.get("dimensionDown").set(UnitType.Protoss_Interceptor, 7);
        fields.get("width").set(UnitType.Protoss_Interceptor, 16);
        fields.get("height").set(UnitType.Protoss_Interceptor, 16);
        fields.get("seekRange").set(UnitType.Protoss_Interceptor, 0);
        fields.get("sightRange").set(UnitType.Protoss_Interceptor, 192);
        fields.get("groundWeapon").set(UnitType.Protoss_Interceptor, WeaponType.Pulse_Cannon);
        fields.get("maxGroundHits").set(UnitType.Protoss_Interceptor, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Interceptor, WeaponType.Pulse_Cannon);
        fields.get("maxAirHits").set(UnitType.Protoss_Interceptor, 1);
        fields.get("topSpeed").set(UnitType.Protoss_Interceptor, 13.33);
        fields.get("acceleration").set(UnitType.Protoss_Interceptor, 427);
        fields.get("haltDistance").set(UnitType.Protoss_Interceptor, 13640);
        fields.get("turnRadius").set(UnitType.Protoss_Interceptor, 40);
        fields.get("canProduce").set(UnitType.Protoss_Interceptor, false);
        fields.get("canAttack").set(UnitType.Protoss_Interceptor, true);
        fields.get("canMove").set(UnitType.Protoss_Interceptor, true);
        fields.get("isFlyer").set(UnitType.Protoss_Interceptor, true);
        fields.get("regeneratesHP").set(UnitType.Protoss_Interceptor, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Interceptor, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Interceptor, false);
        fields.get("isInvincible").set(UnitType.Protoss_Interceptor, false);
        fields.get("isOrganic").set(UnitType.Protoss_Interceptor, false);
        fields.get("isMechanical").set(UnitType.Protoss_Interceptor, true);
        fields.get("isRobotic").set(UnitType.Protoss_Interceptor, false);
        fields.get("isDetector").set(UnitType.Protoss_Interceptor, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Interceptor, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Interceptor, false);
        fields.get("isRefinery").set(UnitType.Protoss_Interceptor, false);
        fields.get("isWorker").set(UnitType.Protoss_Interceptor, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Interceptor, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Interceptor, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Interceptor, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Interceptor, false);
        fields.get("isCloakable").set(UnitType.Protoss_Interceptor, false);
        fields.get("isBuilding").set(UnitType.Protoss_Interceptor, false);
        fields.get("isAddon").set(UnitType.Protoss_Interceptor, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Interceptor, false);
        fields.get("isNeutral").set(UnitType.Protoss_Interceptor, false);
        fields.get("isHero").set(UnitType.Protoss_Interceptor, false);
        fields.get("isPowerup").set(UnitType.Protoss_Interceptor, false);
        fields.get("isBeacon").set(UnitType.Protoss_Interceptor, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Interceptor, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Interceptor, false);
        fields.get("isSpell").set(UnitType.Protoss_Interceptor, false);
        fields.get("producesCreep").set(UnitType.Protoss_Interceptor, false);
        fields.get("producesLarva").set(UnitType.Protoss_Interceptor, false);
        fields.get("isMineralField").set(UnitType.Protoss_Interceptor, false);
        fields.get("isCritter").set(UnitType.Protoss_Interceptor, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Interceptor, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Dark_Templar() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Dark_Templar, 74);
        fields.get("race").set(UnitType.Hero_Dark_Templar, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Dark_Templar, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Dark_Templar, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Dark_Templar, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Dark_Templar, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Dark_Templar, 40);
        fields.get("maxShields").set(UnitType.Hero_Dark_Templar, 80);
        fields.get("maxEnergy").set(UnitType.Hero_Dark_Templar, 0);
        fields.get("armor").set(UnitType.Hero_Dark_Templar, 0);
        fields.get("mineralPrice").set(UnitType.Hero_Dark_Templar, 150);
        fields.get("gasPrice").set(UnitType.Hero_Dark_Templar, 150);
        fields.get("buildTime").set(UnitType.Hero_Dark_Templar, 750);
        fields.get("supplyRequired").set(UnitType.Hero_Dark_Templar, 2);
        fields.get("supplyProvided").set(UnitType.Hero_Dark_Templar, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Dark_Templar, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Dark_Templar, 0);
        fields.get("buildScore").set(UnitType.Hero_Dark_Templar, 0);
        fields.get("destroyScore").set(UnitType.Hero_Dark_Templar, 400);
        fields.get("size").set(UnitType.Hero_Dark_Templar, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Dark_Templar, 1);
        fields.get("tileHeight").set(UnitType.Hero_Dark_Templar, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Dark_Templar, 12);
        fields.get("dimensionUp").set(UnitType.Hero_Dark_Templar, 6);
        fields.get("dimensionRight").set(UnitType.Hero_Dark_Templar, 11);
        fields.get("dimensionDown").set(UnitType.Hero_Dark_Templar, 19);
        fields.get("width").set(UnitType.Hero_Dark_Templar, 24);
        fields.get("height").set(UnitType.Hero_Dark_Templar, 26);
        fields.get("seekRange").set(UnitType.Hero_Dark_Templar, 96);
        fields.get("sightRange").set(UnitType.Hero_Dark_Templar, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Dark_Templar, WeaponType.Warp_Blades_Hero);
        fields.get("maxGroundHits").set(UnitType.Hero_Dark_Templar, 1);
        fields.get("airWeapon").set(UnitType.Hero_Dark_Templar, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Dark_Templar, 0);
        fields.get("topSpeed").set(UnitType.Hero_Dark_Templar, 4.92);
        fields.get("acceleration").set(UnitType.Hero_Dark_Templar, 27);
        fields.get("haltDistance").set(UnitType.Hero_Dark_Templar, 13474);
        fields.get("turnRadius").set(UnitType.Hero_Dark_Templar, 40);
        fields.get("canProduce").set(UnitType.Hero_Dark_Templar, false);
        fields.get("canAttack").set(UnitType.Hero_Dark_Templar, true);
        fields.get("canMove").set(UnitType.Hero_Dark_Templar, true);
        fields.get("isFlyer").set(UnitType.Hero_Dark_Templar, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Dark_Templar, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Dark_Templar, true);
        fields.get("isInvincible").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isOrganic").set(UnitType.Hero_Dark_Templar, true);
        fields.get("isMechanical").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isRobotic").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isDetector").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isRefinery").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isWorker").set(UnitType.Hero_Dark_Templar, false);
        fields.get("requiresPsi").set(UnitType.Hero_Dark_Templar, false);
        fields.get("requiresCreep").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isBurrowable").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isCloakable").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isBuilding").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isAddon").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isNeutral").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isHero").set(UnitType.Hero_Dark_Templar, true);
        fields.get("isPowerup").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isBeacon").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isSpell").set(UnitType.Hero_Dark_Templar, false);
        fields.get("producesCreep").set(UnitType.Hero_Dark_Templar, false);
        fields.get("producesLarva").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isMineralField").set(UnitType.Hero_Dark_Templar, false);
        fields.get("isCritter").set(UnitType.Hero_Dark_Templar, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Dark_Templar, false);
        fields.get("researchesWhat").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Zeratul() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Zeratul, 75);
        fields.get("race").set(UnitType.Hero_Zeratul, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Zeratul, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Zeratul, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Zeratul, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Zeratul, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Zeratul, 60);
        fields.get("maxShields").set(UnitType.Hero_Zeratul, 400);
        fields.get("maxEnergy").set(UnitType.Hero_Zeratul, 0);
        fields.get("armor").set(UnitType.Hero_Zeratul, 0);
        fields.get("mineralPrice").set(UnitType.Hero_Zeratul, 100);
        fields.get("gasPrice").set(UnitType.Hero_Zeratul, 300);
        fields.get("buildTime").set(UnitType.Hero_Zeratul, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Zeratul, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Zeratul, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Zeratul, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Zeratul, 0);
        fields.get("buildScore").set(UnitType.Hero_Zeratul, 0);
        fields.get("destroyScore").set(UnitType.Hero_Zeratul, 800);
        fields.get("size").set(UnitType.Hero_Zeratul, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Zeratul, 1);
        fields.get("tileHeight").set(UnitType.Hero_Zeratul, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Zeratul, 12);
        fields.get("dimensionUp").set(UnitType.Hero_Zeratul, 6);
        fields.get("dimensionRight").set(UnitType.Hero_Zeratul, 11);
        fields.get("dimensionDown").set(UnitType.Hero_Zeratul, 19);
        fields.get("width").set(UnitType.Hero_Zeratul, 24);
        fields.get("height").set(UnitType.Hero_Zeratul, 26);
        fields.get("seekRange").set(UnitType.Hero_Zeratul, 96);
        fields.get("sightRange").set(UnitType.Hero_Zeratul, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Zeratul, WeaponType.Warp_Blades_Zeratul);
        fields.get("maxGroundHits").set(UnitType.Hero_Zeratul, 1);
        fields.get("airWeapon").set(UnitType.Hero_Zeratul, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Zeratul, 0);
        fields.get("topSpeed").set(UnitType.Hero_Zeratul, 4.92);
        fields.get("acceleration").set(UnitType.Hero_Zeratul, 27);
        fields.get("haltDistance").set(UnitType.Hero_Zeratul, 13474);
        fields.get("turnRadius").set(UnitType.Hero_Zeratul, 40);
        fields.get("canProduce").set(UnitType.Hero_Zeratul, false);
        fields.get("canAttack").set(UnitType.Hero_Zeratul, true);
        fields.get("canMove").set(UnitType.Hero_Zeratul, true);
        fields.get("isFlyer").set(UnitType.Hero_Zeratul, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Zeratul, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Zeratul, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Zeratul, true);
        fields.get("isInvincible").set(UnitType.Hero_Zeratul, false);
        fields.get("isOrganic").set(UnitType.Hero_Zeratul, true);
        fields.get("isMechanical").set(UnitType.Hero_Zeratul, false);
        fields.get("isRobotic").set(UnitType.Hero_Zeratul, false);
        fields.get("isDetector").set(UnitType.Hero_Zeratul, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Zeratul, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Zeratul, false);
        fields.get("isRefinery").set(UnitType.Hero_Zeratul, false);
        fields.get("isWorker").set(UnitType.Hero_Zeratul, false);
        fields.get("requiresPsi").set(UnitType.Hero_Zeratul, false);
        fields.get("requiresCreep").set(UnitType.Hero_Zeratul, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Zeratul, false);
        fields.get("isBurrowable").set(UnitType.Hero_Zeratul, false);
        fields.get("isCloakable").set(UnitType.Hero_Zeratul, false);
        fields.get("isBuilding").set(UnitType.Hero_Zeratul, false);
        fields.get("isAddon").set(UnitType.Hero_Zeratul, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Zeratul, false);
        fields.get("isNeutral").set(UnitType.Hero_Zeratul, false);
        fields.get("isHero").set(UnitType.Hero_Zeratul, true);
        fields.get("isPowerup").set(UnitType.Hero_Zeratul, false);
        fields.get("isBeacon").set(UnitType.Hero_Zeratul, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Zeratul, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Zeratul, false);
        fields.get("isSpell").set(UnitType.Hero_Zeratul, false);
        fields.get("producesCreep").set(UnitType.Hero_Zeratul, false);
        fields.get("producesLarva").set(UnitType.Hero_Zeratul, false);
        fields.get("isMineralField").set(UnitType.Hero_Zeratul, false);
        fields.get("isCritter").set(UnitType.Hero_Zeratul, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Zeratul, false);
        fields.get("researchesWhat").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Tassadar_Zeratul_Archon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Tassadar_Zeratul_Archon, 76);
        fields.get("race").set(UnitType.Hero_Tassadar_Zeratul_Archon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Tassadar_Zeratul_Archon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Tassadar_Zeratul_Archon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Tassadar_Zeratul_Archon, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Tassadar_Zeratul_Archon, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Tassadar_Zeratul_Archon, 100);
        fields.get("maxShields").set(UnitType.Hero_Tassadar_Zeratul_Archon, 800);
        fields.get("maxEnergy").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
        fields.get("armor").set(UnitType.Hero_Tassadar_Zeratul_Archon, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
        fields.get("gasPrice").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
        fields.get("buildTime").set(UnitType.Hero_Tassadar_Zeratul_Archon, 600);
        fields.get("supplyRequired").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Tassadar_Zeratul_Archon, 4);
        fields.get("spaceProvided").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
        fields.get("buildScore").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
        fields.get("destroyScore").set(UnitType.Hero_Tassadar_Zeratul_Archon, 2800);
        fields.get("size").set(UnitType.Hero_Tassadar_Zeratul_Archon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
        fields.get("tileHeight").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Tassadar_Zeratul_Archon, 16);
        fields.get("dimensionUp").set(UnitType.Hero_Tassadar_Zeratul_Archon, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Tassadar_Zeratul_Archon, 15);
        fields.get("dimensionDown").set(UnitType.Hero_Tassadar_Zeratul_Archon, 15);
        fields.get("width").set(UnitType.Hero_Tassadar_Zeratul_Archon, 32);
        fields.get("height").set(UnitType.Hero_Tassadar_Zeratul_Archon, 32);
        fields.get("seekRange").set(UnitType.Hero_Tassadar_Zeratul_Archon, 96);
        fields.get("sightRange").set(UnitType.Hero_Tassadar_Zeratul_Archon, 256);
        fields.get("groundWeapon").set(UnitType.Hero_Tassadar_Zeratul_Archon, WeaponType.Psionic_Shockwave_TZ_Archon);
        fields.get("maxGroundHits").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
        fields.get("airWeapon").set(UnitType.Hero_Tassadar_Zeratul_Archon, WeaponType.Psionic_Shockwave_TZ_Archon);
        fields.get("maxAirHits").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
        fields.get("topSpeed").set(UnitType.Hero_Tassadar_Zeratul_Archon, 4.92);
        fields.get("acceleration").set(UnitType.Hero_Tassadar_Zeratul_Archon, 160);
        fields.get("haltDistance").set(UnitType.Hero_Tassadar_Zeratul_Archon, 5120);
        fields.get("turnRadius").set(UnitType.Hero_Tassadar_Zeratul_Archon, 40);
        fields.get("canProduce").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("canAttack").set(UnitType.Hero_Tassadar_Zeratul_Archon, true);
        fields.get("canMove").set(UnitType.Hero_Tassadar_Zeratul_Archon, true);
        fields.get("isFlyer").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isInvincible").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isOrganic").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isMechanical").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isRobotic").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isDetector").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isRefinery").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isWorker").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("requiresPsi").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("requiresCreep").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isBurrowable").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isCloakable").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isBuilding").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isAddon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isNeutral").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isHero").set(UnitType.Hero_Tassadar_Zeratul_Archon, true);
        fields.get("isPowerup").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isBeacon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isSpell").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("producesCreep").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("producesLarva").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isMineralField").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("isCritter").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
        fields.get("researchesWhat").set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Fenix_Zealot() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Fenix_Zealot, 77);
        fields.get("race").set(UnitType.Hero_Fenix_Zealot, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Fenix_Zealot, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Fenix_Zealot, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Fenix_Zealot, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Fenix_Zealot, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Fenix_Zealot, 240);
        fields.get("maxShields").set(UnitType.Hero_Fenix_Zealot, 240);
        fields.get("maxEnergy").set(UnitType.Hero_Fenix_Zealot, 0);
        fields.get("armor").set(UnitType.Hero_Fenix_Zealot, 2);
        fields.get("mineralPrice").set(UnitType.Hero_Fenix_Zealot, 200);
        fields.get("gasPrice").set(UnitType.Hero_Fenix_Zealot, 0);
        fields.get("buildTime").set(UnitType.Hero_Fenix_Zealot, 1200);
        fields.get("supplyRequired").set(UnitType.Hero_Fenix_Zealot, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Fenix_Zealot, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Fenix_Zealot, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Fenix_Zealot, 0);
        fields.get("buildScore").set(UnitType.Hero_Fenix_Zealot, 0);
        fields.get("destroyScore").set(UnitType.Hero_Fenix_Zealot, 400);
        fields.get("size").set(UnitType.Hero_Fenix_Zealot, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Fenix_Zealot, 1);
        fields.get("tileHeight").set(UnitType.Hero_Fenix_Zealot, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Fenix_Zealot, 11);
        fields.get("dimensionUp").set(UnitType.Hero_Fenix_Zealot, 5);
        fields.get("dimensionRight").set(UnitType.Hero_Fenix_Zealot, 11);
        fields.get("dimensionDown").set(UnitType.Hero_Fenix_Zealot, 13);
        fields.get("width").set(UnitType.Hero_Fenix_Zealot, 23);
        fields.get("height").set(UnitType.Hero_Fenix_Zealot, 19);
        fields.get("seekRange").set(UnitType.Hero_Fenix_Zealot, 96);
        fields.get("sightRange").set(UnitType.Hero_Fenix_Zealot, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Fenix_Zealot, WeaponType.Psi_Blades_Fenix);
        fields.get("maxGroundHits").set(UnitType.Hero_Fenix_Zealot, 2);
        fields.get("airWeapon").set(UnitType.Hero_Fenix_Zealot, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Fenix_Zealot, 0);
        fields.get("topSpeed").set(UnitType.Hero_Fenix_Zealot, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Fenix_Zealot, 1);
        fields.get("haltDistance").set(UnitType.Hero_Fenix_Zealot, 1);
        fields.get("turnRadius").set(UnitType.Hero_Fenix_Zealot, 40);
        fields.get("canProduce").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("canAttack").set(UnitType.Hero_Fenix_Zealot, true);
        fields.get("canMove").set(UnitType.Hero_Fenix_Zealot, true);
        fields.get("isFlyer").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isInvincible").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isOrganic").set(UnitType.Hero_Fenix_Zealot, true);
        fields.get("isMechanical").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isRobotic").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isDetector").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isRefinery").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isWorker").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("requiresPsi").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("requiresCreep").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isBurrowable").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isCloakable").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isBuilding").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isAddon").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isNeutral").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isHero").set(UnitType.Hero_Fenix_Zealot, true);
        fields.get("isPowerup").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isBeacon").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isSpell").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("producesCreep").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("producesLarva").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isMineralField").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("isCritter").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Fenix_Zealot, false);
        fields.get("researchesWhat").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Fenix_Dragoon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Fenix_Dragoon, 78);
        fields.get("race").set(UnitType.Hero_Fenix_Dragoon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Fenix_Dragoon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Fenix_Dragoon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Fenix_Dragoon, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Fenix_Dragoon, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Fenix_Dragoon, 240);
        fields.get("maxShields").set(UnitType.Hero_Fenix_Dragoon, 240);
        fields.get("maxEnergy").set(UnitType.Hero_Fenix_Dragoon, 0);
        fields.get("armor").set(UnitType.Hero_Fenix_Dragoon, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Fenix_Dragoon, 300);
        fields.get("gasPrice").set(UnitType.Hero_Fenix_Dragoon, 100);
        fields.get("buildTime").set(UnitType.Hero_Fenix_Dragoon, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Fenix_Dragoon, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Fenix_Dragoon, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Fenix_Dragoon, 4);
        fields.get("spaceProvided").set(UnitType.Hero_Fenix_Dragoon, 0);
        fields.get("buildScore").set(UnitType.Hero_Fenix_Dragoon, 0);
        fields.get("destroyScore").set(UnitType.Hero_Fenix_Dragoon, 1000);
        fields.get("size").set(UnitType.Hero_Fenix_Dragoon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Fenix_Dragoon, 1);
        fields.get("tileHeight").set(UnitType.Hero_Fenix_Dragoon, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Fenix_Dragoon, 15);
        fields.get("dimensionUp").set(UnitType.Hero_Fenix_Dragoon, 15);
        fields.get("dimensionRight").set(UnitType.Hero_Fenix_Dragoon, 16);
        fields.get("dimensionDown").set(UnitType.Hero_Fenix_Dragoon, 16);
        fields.get("width").set(UnitType.Hero_Fenix_Dragoon, 32);
        fields.get("height").set(UnitType.Hero_Fenix_Dragoon, 32);
        fields.get("seekRange").set(UnitType.Hero_Fenix_Dragoon, 0);
        fields.get("sightRange").set(UnitType.Hero_Fenix_Dragoon, 256);
        fields.get("groundWeapon").set(UnitType.Hero_Fenix_Dragoon, WeaponType.Phase_Disruptor_Fenix);
        fields.get("maxGroundHits").set(UnitType.Hero_Fenix_Dragoon, 1);
        fields.get("airWeapon").set(UnitType.Hero_Fenix_Dragoon, WeaponType.Phase_Disruptor_Fenix);
        fields.get("maxAirHits").set(UnitType.Hero_Fenix_Dragoon, 1);
        fields.get("topSpeed").set(UnitType.Hero_Fenix_Dragoon, 5.0);
        fields.get("acceleration").set(UnitType.Hero_Fenix_Dragoon, 1);
        fields.get("haltDistance").set(UnitType.Hero_Fenix_Dragoon, 1);
        fields.get("turnRadius").set(UnitType.Hero_Fenix_Dragoon, 40);
        fields.get("canProduce").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("canAttack").set(UnitType.Hero_Fenix_Dragoon, true);
        fields.get("canMove").set(UnitType.Hero_Fenix_Dragoon, true);
        fields.get("isFlyer").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isInvincible").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isOrganic").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isMechanical").set(UnitType.Hero_Fenix_Dragoon, true);
        fields.get("isRobotic").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isDetector").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isRefinery").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isWorker").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("requiresPsi").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("requiresCreep").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isBurrowable").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isCloakable").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isBuilding").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isAddon").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isNeutral").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isHero").set(UnitType.Hero_Fenix_Dragoon, true);
        fields.get("isPowerup").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isBeacon").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isSpell").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("producesCreep").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("producesLarva").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isMineralField").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("isCritter").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Fenix_Dragoon, false);
        fields.get("researchesWhat").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Tassadar() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Tassadar, 79);
        fields.get("race").set(UnitType.Hero_Tassadar, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Tassadar, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Tassadar, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Tassadar, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList(TechType.Psionic_Storm, TechType.Hallucination)));
        fields.get("upgrades").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Tassadar, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Tassadar, 80);
        fields.get("maxShields").set(UnitType.Hero_Tassadar, 300);
        fields.get("maxEnergy").set(UnitType.Hero_Tassadar, 250);
        fields.get("armor").set(UnitType.Hero_Tassadar, 2);
        fields.get("mineralPrice").set(UnitType.Hero_Tassadar, 100);
        fields.get("gasPrice").set(UnitType.Hero_Tassadar, 300);
        fields.get("buildTime").set(UnitType.Hero_Tassadar, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Tassadar, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Tassadar, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Tassadar, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Tassadar, 0);
        fields.get("buildScore").set(UnitType.Hero_Tassadar, 0);
        fields.get("destroyScore").set(UnitType.Hero_Tassadar, 1400);
        fields.get("size").set(UnitType.Hero_Tassadar, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Tassadar, 1);
        fields.get("tileHeight").set(UnitType.Hero_Tassadar, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Tassadar, 12);
        fields.get("dimensionUp").set(UnitType.Hero_Tassadar, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Tassadar, 11);
        fields.get("dimensionDown").set(UnitType.Hero_Tassadar, 13);
        fields.get("width").set(UnitType.Hero_Tassadar, 24);
        fields.get("height").set(UnitType.Hero_Tassadar, 24);
        fields.get("seekRange").set(UnitType.Hero_Tassadar, 96);
        fields.get("sightRange").set(UnitType.Hero_Tassadar, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Tassadar, WeaponType.Psi_Assault);
        fields.get("maxGroundHits").set(UnitType.Hero_Tassadar, 1);
        fields.get("airWeapon").set(UnitType.Hero_Tassadar, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Tassadar, 0);
        fields.get("topSpeed").set(UnitType.Hero_Tassadar, 3.2);
        fields.get("acceleration").set(UnitType.Hero_Tassadar, 27);
        fields.get("haltDistance").set(UnitType.Hero_Tassadar, 13474);
        fields.get("turnRadius").set(UnitType.Hero_Tassadar, 40);
        fields.get("canProduce").set(UnitType.Hero_Tassadar, false);
        fields.get("canAttack").set(UnitType.Hero_Tassadar, true);
        fields.get("canMove").set(UnitType.Hero_Tassadar, true);
        fields.get("isFlyer").set(UnitType.Hero_Tassadar, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Tassadar, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Tassadar, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Tassadar, false);
        fields.get("isInvincible").set(UnitType.Hero_Tassadar, false);
        fields.get("isOrganic").set(UnitType.Hero_Tassadar, true);
        fields.get("isMechanical").set(UnitType.Hero_Tassadar, false);
        fields.get("isRobotic").set(UnitType.Hero_Tassadar, false);
        fields.get("isDetector").set(UnitType.Hero_Tassadar, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Tassadar, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Tassadar, false);
        fields.get("isRefinery").set(UnitType.Hero_Tassadar, false);
        fields.get("isWorker").set(UnitType.Hero_Tassadar, false);
        fields.get("requiresPsi").set(UnitType.Hero_Tassadar, false);
        fields.get("requiresCreep").set(UnitType.Hero_Tassadar, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Tassadar, false);
        fields.get("isBurrowable").set(UnitType.Hero_Tassadar, false);
        fields.get("isCloakable").set(UnitType.Hero_Tassadar, false);
        fields.get("isBuilding").set(UnitType.Hero_Tassadar, false);
        fields.get("isAddon").set(UnitType.Hero_Tassadar, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Tassadar, false);
        fields.get("isNeutral").set(UnitType.Hero_Tassadar, false);
        fields.get("isHero").set(UnitType.Hero_Tassadar, true);
        fields.get("isPowerup").set(UnitType.Hero_Tassadar, false);
        fields.get("isBeacon").set(UnitType.Hero_Tassadar, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Tassadar, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Tassadar, false);
        fields.get("isSpell").set(UnitType.Hero_Tassadar, false);
        fields.get("producesCreep").set(UnitType.Hero_Tassadar, false);
        fields.get("producesLarva").set(UnitType.Hero_Tassadar, false);
        fields.get("isMineralField").set(UnitType.Hero_Tassadar, false);
        fields.get("isCritter").set(UnitType.Hero_Tassadar, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Tassadar, false);
        fields.get("researchesWhat").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Mojo() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Mojo, 80);
        fields.get("race").set(UnitType.Hero_Mojo, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Mojo, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Mojo, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Mojo, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Mojo, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Mojo, 400);
        fields.get("maxShields").set(UnitType.Hero_Mojo, 400);
        fields.get("maxEnergy").set(UnitType.Hero_Mojo, 0);
        fields.get("armor").set(UnitType.Hero_Mojo, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Mojo, 600);
        fields.get("gasPrice").set(UnitType.Hero_Mojo, 300);
        fields.get("buildTime").set(UnitType.Hero_Mojo, 2400);
        fields.get("supplyRequired").set(UnitType.Hero_Mojo, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Mojo, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Mojo, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Mojo, 0);
        fields.get("buildScore").set(UnitType.Hero_Mojo, 0);
        fields.get("destroyScore").set(UnitType.Hero_Mojo, 2600);
        fields.get("size").set(UnitType.Hero_Mojo, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Mojo, 2);
        fields.get("tileHeight").set(UnitType.Hero_Mojo, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Mojo, 18);
        fields.get("dimensionUp").set(UnitType.Hero_Mojo, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Mojo, 17);
        fields.get("dimensionDown").set(UnitType.Hero_Mojo, 15);
        fields.get("width").set(UnitType.Hero_Mojo, 36);
        fields.get("height").set(UnitType.Hero_Mojo, 32);
        fields.get("seekRange").set(UnitType.Hero_Mojo, 0);
        fields.get("sightRange").set(UnitType.Hero_Mojo, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Mojo, WeaponType.Dual_Photon_Blasters_Mojo);
        fields.get("maxGroundHits").set(UnitType.Hero_Mojo, 1);
        fields.get("airWeapon").set(UnitType.Hero_Mojo, WeaponType.Anti_Matter_Missiles_Mojo);
        fields.get("maxAirHits").set(UnitType.Hero_Mojo, 1);
        fields.get("topSpeed").set(UnitType.Hero_Mojo, 5.0);
        fields.get("acceleration").set(UnitType.Hero_Mojo, 48);
        fields.get("haltDistance").set(UnitType.Hero_Mojo, 17067);
        fields.get("turnRadius").set(UnitType.Hero_Mojo, 30);
        fields.get("canProduce").set(UnitType.Hero_Mojo, false);
        fields.get("canAttack").set(UnitType.Hero_Mojo, true);
        fields.get("canMove").set(UnitType.Hero_Mojo, true);
        fields.get("isFlyer").set(UnitType.Hero_Mojo, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Mojo, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Mojo, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Mojo, false);
        fields.get("isInvincible").set(UnitType.Hero_Mojo, false);
        fields.get("isOrganic").set(UnitType.Hero_Mojo, false);
        fields.get("isMechanical").set(UnitType.Hero_Mojo, true);
        fields.get("isRobotic").set(UnitType.Hero_Mojo, false);
        fields.get("isDetector").set(UnitType.Hero_Mojo, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Mojo, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Mojo, false);
        fields.get("isRefinery").set(UnitType.Hero_Mojo, false);
        fields.get("isWorker").set(UnitType.Hero_Mojo, false);
        fields.get("requiresPsi").set(UnitType.Hero_Mojo, false);
        fields.get("requiresCreep").set(UnitType.Hero_Mojo, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Mojo, false);
        fields.get("isBurrowable").set(UnitType.Hero_Mojo, false);
        fields.get("isCloakable").set(UnitType.Hero_Mojo, false);
        fields.get("isBuilding").set(UnitType.Hero_Mojo, false);
        fields.get("isAddon").set(UnitType.Hero_Mojo, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Mojo, false);
        fields.get("isNeutral").set(UnitType.Hero_Mojo, false);
        fields.get("isHero").set(UnitType.Hero_Mojo, true);
        fields.get("isPowerup").set(UnitType.Hero_Mojo, false);
        fields.get("isBeacon").set(UnitType.Hero_Mojo, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Mojo, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Mojo, false);
        fields.get("isSpell").set(UnitType.Hero_Mojo, false);
        fields.get("producesCreep").set(UnitType.Hero_Mojo, false);
        fields.get("producesLarva").set(UnitType.Hero_Mojo, false);
        fields.get("isMineralField").set(UnitType.Hero_Mojo, false);
        fields.get("isCritter").set(UnitType.Hero_Mojo, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Mojo, false);
        fields.get("researchesWhat").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Warbringer() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Warbringer, 81);
        fields.get("race").set(UnitType.Hero_Warbringer, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Warbringer, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Warbringer, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Warbringer, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor, UpgradeType.Scarab_Damage, UpgradeType.Reaver_Capacity)));
        fields.get("armorUpgrade").set(UnitType.Hero_Warbringer, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Warbringer, 200);
        fields.get("maxShields").set(UnitType.Hero_Warbringer, 400);
        fields.get("maxEnergy").set(UnitType.Hero_Warbringer, 0);
        fields.get("armor").set(UnitType.Hero_Warbringer, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Warbringer, 400);
        fields.get("gasPrice").set(UnitType.Hero_Warbringer, 200);
        fields.get("buildTime").set(UnitType.Hero_Warbringer, 1800);
        fields.get("supplyRequired").set(UnitType.Hero_Warbringer, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Warbringer, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Warbringer, 4);
        fields.get("spaceProvided").set(UnitType.Hero_Warbringer, 0);
        fields.get("buildScore").set(UnitType.Hero_Warbringer, 0);
        fields.get("destroyScore").set(UnitType.Hero_Warbringer, 1600);
        fields.get("size").set(UnitType.Hero_Warbringer, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Warbringer, 1);
        fields.get("tileHeight").set(UnitType.Hero_Warbringer, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Warbringer, 16);
        fields.get("dimensionUp").set(UnitType.Hero_Warbringer, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Warbringer, 15);
        fields.get("dimensionDown").set(UnitType.Hero_Warbringer, 15);
        fields.get("width").set(UnitType.Hero_Warbringer, 32);
        fields.get("height").set(UnitType.Hero_Warbringer, 32);
        fields.get("seekRange").set(UnitType.Hero_Warbringer, 256);
        fields.get("sightRange").set(UnitType.Hero_Warbringer, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Warbringer, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Hero_Warbringer, 0);
        fields.get("airWeapon").set(UnitType.Hero_Warbringer, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Warbringer, 0);
        fields.get("topSpeed").set(UnitType.Hero_Warbringer, 1.78);
        fields.get("acceleration").set(UnitType.Hero_Warbringer, 1);
        fields.get("haltDistance").set(UnitType.Hero_Warbringer, 1);
        fields.get("turnRadius").set(UnitType.Hero_Warbringer, 20);
        fields.get("canProduce").set(UnitType.Hero_Warbringer, true);
        fields.get("canAttack").set(UnitType.Hero_Warbringer, true);
        fields.get("canMove").set(UnitType.Hero_Warbringer, true);
        fields.get("isFlyer").set(UnitType.Hero_Warbringer, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Warbringer, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Warbringer, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Warbringer, false);
        fields.get("isInvincible").set(UnitType.Hero_Warbringer, false);
        fields.get("isOrganic").set(UnitType.Hero_Warbringer, false);
        fields.get("isMechanical").set(UnitType.Hero_Warbringer, true);
        fields.get("isRobotic").set(UnitType.Hero_Warbringer, true);
        fields.get("isDetector").set(UnitType.Hero_Warbringer, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Warbringer, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Warbringer, false);
        fields.get("isRefinery").set(UnitType.Hero_Warbringer, false);
        fields.get("isWorker").set(UnitType.Hero_Warbringer, false);
        fields.get("requiresPsi").set(UnitType.Hero_Warbringer, false);
        fields.get("requiresCreep").set(UnitType.Hero_Warbringer, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Warbringer, false);
        fields.get("isBurrowable").set(UnitType.Hero_Warbringer, false);
        fields.get("isCloakable").set(UnitType.Hero_Warbringer, false);
        fields.get("isBuilding").set(UnitType.Hero_Warbringer, false);
        fields.get("isAddon").set(UnitType.Hero_Warbringer, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Warbringer, false);
        fields.get("isNeutral").set(UnitType.Hero_Warbringer, false);
        fields.get("isHero").set(UnitType.Hero_Warbringer, true);
        fields.get("isPowerup").set(UnitType.Hero_Warbringer, false);
        fields.get("isBeacon").set(UnitType.Hero_Warbringer, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Warbringer, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Warbringer, false);
        fields.get("isSpell").set(UnitType.Hero_Warbringer, false);
        fields.get("producesCreep").set(UnitType.Hero_Warbringer, false);
        fields.get("producesLarva").set(UnitType.Hero_Warbringer, false);
        fields.get("isMineralField").set(UnitType.Hero_Warbringer, false);
        fields.get("isCritter").set(UnitType.Hero_Warbringer, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Warbringer, false);
        fields.get("researchesWhat").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Gantrithor() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Gantrithor, 82);
        fields.get("race").set(UnitType.Hero_Gantrithor, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Gantrithor, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Gantrithor, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Gantrithor, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Gantrithor, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Gantrithor, 800);
        fields.get("maxShields").set(UnitType.Hero_Gantrithor, 500);
        fields.get("maxEnergy").set(UnitType.Hero_Gantrithor, 0);
        fields.get("armor").set(UnitType.Hero_Gantrithor, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Gantrithor, 700);
        fields.get("gasPrice").set(UnitType.Hero_Gantrithor, 600);
        fields.get("buildTime").set(UnitType.Hero_Gantrithor, 4200);
        fields.get("supplyRequired").set(UnitType.Hero_Gantrithor, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Gantrithor, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Gantrithor, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Gantrithor, 0);
        fields.get("buildScore").set(UnitType.Hero_Gantrithor, 0);
        fields.get("destroyScore").set(UnitType.Hero_Gantrithor, 3800);
        fields.get("size").set(UnitType.Hero_Gantrithor, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Gantrithor, 2);
        fields.get("tileHeight").set(UnitType.Hero_Gantrithor, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Gantrithor, 32);
        fields.get("dimensionUp").set(UnitType.Hero_Gantrithor, 32);
        fields.get("dimensionRight").set(UnitType.Hero_Gantrithor, 31);
        fields.get("dimensionDown").set(UnitType.Hero_Gantrithor, 31);
        fields.get("width").set(UnitType.Hero_Gantrithor, 64);
        fields.get("height").set(UnitType.Hero_Gantrithor, 64);
        fields.get("seekRange").set(UnitType.Hero_Gantrithor, 256);
        fields.get("sightRange").set(UnitType.Hero_Gantrithor, 288);
        fields.get("groundWeapon").set(UnitType.Hero_Gantrithor, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Hero_Gantrithor, 0);
        fields.get("airWeapon").set(UnitType.Hero_Gantrithor, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Gantrithor, 0);
        fields.get("topSpeed").set(UnitType.Hero_Gantrithor, 3.33);
        fields.get("acceleration").set(UnitType.Hero_Gantrithor, 27);
        fields.get("haltDistance").set(UnitType.Hero_Gantrithor, 13474);
        fields.get("turnRadius").set(UnitType.Hero_Gantrithor, 20);
        fields.get("canProduce").set(UnitType.Hero_Gantrithor, true);
        fields.get("canAttack").set(UnitType.Hero_Gantrithor, true);
        fields.get("canMove").set(UnitType.Hero_Gantrithor, true);
        fields.get("isFlyer").set(UnitType.Hero_Gantrithor, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Gantrithor, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Gantrithor, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Gantrithor, false);
        fields.get("isInvincible").set(UnitType.Hero_Gantrithor, false);
        fields.get("isOrganic").set(UnitType.Hero_Gantrithor, false);
        fields.get("isMechanical").set(UnitType.Hero_Gantrithor, true);
        fields.get("isRobotic").set(UnitType.Hero_Gantrithor, false);
        fields.get("isDetector").set(UnitType.Hero_Gantrithor, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Gantrithor, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Gantrithor, false);
        fields.get("isRefinery").set(UnitType.Hero_Gantrithor, false);
        fields.get("isWorker").set(UnitType.Hero_Gantrithor, false);
        fields.get("requiresPsi").set(UnitType.Hero_Gantrithor, false);
        fields.get("requiresCreep").set(UnitType.Hero_Gantrithor, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Gantrithor, false);
        fields.get("isBurrowable").set(UnitType.Hero_Gantrithor, false);
        fields.get("isCloakable").set(UnitType.Hero_Gantrithor, false);
        fields.get("isBuilding").set(UnitType.Hero_Gantrithor, false);
        fields.get("isAddon").set(UnitType.Hero_Gantrithor, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Gantrithor, false);
        fields.get("isNeutral").set(UnitType.Hero_Gantrithor, false);
        fields.get("isHero").set(UnitType.Hero_Gantrithor, true);
        fields.get("isPowerup").set(UnitType.Hero_Gantrithor, false);
        fields.get("isBeacon").set(UnitType.Hero_Gantrithor, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Gantrithor, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Gantrithor, false);
        fields.get("isSpell").set(UnitType.Hero_Gantrithor, false);
        fields.get("producesCreep").set(UnitType.Hero_Gantrithor, false);
        fields.get("producesLarva").set(UnitType.Hero_Gantrithor, false);
        fields.get("isMineralField").set(UnitType.Hero_Gantrithor, false);
        fields.get("isCritter").set(UnitType.Hero_Gantrithor, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Gantrithor, false);
        fields.get("researchesWhat").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Reaver() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Reaver, 83);
        fields.get("race").set(UnitType.Protoss_Reaver, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Reaver, new Pair(UnitType.Protoss_Robotics_Facility, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList(UnitType.Protoss_Robotics_Facility, UnitType.Protoss_Robotics_Support_Bay)));
        fields.get("requiredTech").set(UnitType.Protoss_Reaver, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Reaver, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor, UpgradeType.Scarab_Damage, UpgradeType.Reaver_Capacity)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Reaver, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Reaver, 100);
        fields.get("maxShields").set(UnitType.Protoss_Reaver, 80);
        fields.get("maxEnergy").set(UnitType.Protoss_Reaver, 0);
        fields.get("armor").set(UnitType.Protoss_Reaver, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Reaver, 200);
        fields.get("gasPrice").set(UnitType.Protoss_Reaver, 100);
        fields.get("buildTime").set(UnitType.Protoss_Reaver, 1050);
        fields.get("supplyRequired").set(UnitType.Protoss_Reaver, 8);
        fields.get("supplyProvided").set(UnitType.Protoss_Reaver, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Reaver, 4);
        fields.get("spaceProvided").set(UnitType.Protoss_Reaver, 0);
        fields.get("buildScore").set(UnitType.Protoss_Reaver, 400);
        fields.get("destroyScore").set(UnitType.Protoss_Reaver, 800);
        fields.get("size").set(UnitType.Protoss_Reaver, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Reaver, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Reaver, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Reaver, 16);
        fields.get("dimensionUp").set(UnitType.Protoss_Reaver, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Reaver, 15);
        fields.get("dimensionDown").set(UnitType.Protoss_Reaver, 15);
        fields.get("width").set(UnitType.Protoss_Reaver, 32);
        fields.get("height").set(UnitType.Protoss_Reaver, 32);
        fields.get("seekRange").set(UnitType.Protoss_Reaver, 256);
        fields.get("sightRange").set(UnitType.Protoss_Reaver, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Reaver, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Reaver, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Reaver, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Reaver, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Reaver, 1.78);
        fields.get("acceleration").set(UnitType.Protoss_Reaver, 1);
        fields.get("haltDistance").set(UnitType.Protoss_Reaver, 1);
        fields.get("turnRadius").set(UnitType.Protoss_Reaver, 20);
        fields.get("canProduce").set(UnitType.Protoss_Reaver, true);
        fields.get("canAttack").set(UnitType.Protoss_Reaver, true);
        fields.get("canMove").set(UnitType.Protoss_Reaver, true);
        fields.get("isFlyer").set(UnitType.Protoss_Reaver, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Reaver, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Reaver, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Reaver, false);
        fields.get("isInvincible").set(UnitType.Protoss_Reaver, false);
        fields.get("isOrganic").set(UnitType.Protoss_Reaver, false);
        fields.get("isMechanical").set(UnitType.Protoss_Reaver, true);
        fields.get("isRobotic").set(UnitType.Protoss_Reaver, true);
        fields.get("isDetector").set(UnitType.Protoss_Reaver, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Reaver, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Reaver, false);
        fields.get("isRefinery").set(UnitType.Protoss_Reaver, false);
        fields.get("isWorker").set(UnitType.Protoss_Reaver, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Reaver, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Reaver, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Reaver, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Reaver, false);
        fields.get("isCloakable").set(UnitType.Protoss_Reaver, false);
        fields.get("isBuilding").set(UnitType.Protoss_Reaver, false);
        fields.get("isAddon").set(UnitType.Protoss_Reaver, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Reaver, false);
        fields.get("isNeutral").set(UnitType.Protoss_Reaver, false);
        fields.get("isHero").set(UnitType.Protoss_Reaver, false);
        fields.get("isPowerup").set(UnitType.Protoss_Reaver, false);
        fields.get("isBeacon").set(UnitType.Protoss_Reaver, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Reaver, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Reaver, false);
        fields.get("isSpell").set(UnitType.Protoss_Reaver, false);
        fields.get("producesCreep").set(UnitType.Protoss_Reaver, false);
        fields.get("producesLarva").set(UnitType.Protoss_Reaver, false);
        fields.get("isMineralField").set(UnitType.Protoss_Reaver, false);
        fields.get("isCritter").set(UnitType.Protoss_Reaver, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Reaver, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Observer() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Observer, 84);
        fields.get("race").set(UnitType.Protoss_Observer, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Observer, new Pair(UnitType.Protoss_Robotics_Facility, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList(UnitType.Protoss_Robotics_Facility, UnitType.Protoss_Observatory)));
        fields.get("requiredTech").set(UnitType.Protoss_Observer, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Observer, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList(UpgradeType.Gravitic_Boosters, UpgradeType.Protoss_Plasma_Shields, UpgradeType.Sensor_Array, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Observer, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Observer, 40);
        fields.get("maxShields").set(UnitType.Protoss_Observer, 20);
        fields.get("maxEnergy").set(UnitType.Protoss_Observer, 0);
        fields.get("armor").set(UnitType.Protoss_Observer, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Observer, 25);
        fields.get("gasPrice").set(UnitType.Protoss_Observer, 75);
        fields.get("buildTime").set(UnitType.Protoss_Observer, 600);
        fields.get("supplyRequired").set(UnitType.Protoss_Observer, 2);
        fields.get("supplyProvided").set(UnitType.Protoss_Observer, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Observer, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Observer, 0);
        fields.get("buildScore").set(UnitType.Protoss_Observer, 225);
        fields.get("destroyScore").set(UnitType.Protoss_Observer, 450);
        fields.get("size").set(UnitType.Protoss_Observer, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Protoss_Observer, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Observer, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Observer, 16);
        fields.get("dimensionUp").set(UnitType.Protoss_Observer, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Observer, 15);
        fields.get("dimensionDown").set(UnitType.Protoss_Observer, 15);
        fields.get("width").set(UnitType.Protoss_Observer, 32);
        fields.get("height").set(UnitType.Protoss_Observer, 32);
        fields.get("seekRange").set(UnitType.Protoss_Observer, 0);
        fields.get("sightRange").set(UnitType.Protoss_Observer, 288);
        fields.get("groundWeapon").set(UnitType.Protoss_Observer, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Observer, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Observer, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Observer, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Observer, 3.33);
        fields.get("acceleration").set(UnitType.Protoss_Observer, 27);
        fields.get("haltDistance").set(UnitType.Protoss_Observer, 13474);
        fields.get("turnRadius").set(UnitType.Protoss_Observer, 20);
        fields.get("canProduce").set(UnitType.Protoss_Observer, false);
        fields.get("canAttack").set(UnitType.Protoss_Observer, false);
        fields.get("canMove").set(UnitType.Protoss_Observer, true);
        fields.get("isFlyer").set(UnitType.Protoss_Observer, true);
        fields.get("regeneratesHP").set(UnitType.Protoss_Observer, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Observer, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Observer, true);
        fields.get("isInvincible").set(UnitType.Protoss_Observer, false);
        fields.get("isOrganic").set(UnitType.Protoss_Observer, false);
        fields.get("isMechanical").set(UnitType.Protoss_Observer, true);
        fields.get("isRobotic").set(UnitType.Protoss_Observer, true);
        fields.get("isDetector").set(UnitType.Protoss_Observer, true);
        fields.get("isResourceContainer").set(UnitType.Protoss_Observer, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Observer, false);
        fields.get("isRefinery").set(UnitType.Protoss_Observer, false);
        fields.get("isWorker").set(UnitType.Protoss_Observer, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Observer, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Observer, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Observer, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Observer, false);
        fields.get("isCloakable").set(UnitType.Protoss_Observer, false);
        fields.get("isBuilding").set(UnitType.Protoss_Observer, false);
        fields.get("isAddon").set(UnitType.Protoss_Observer, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Observer, false);
        fields.get("isNeutral").set(UnitType.Protoss_Observer, false);
        fields.get("isHero").set(UnitType.Protoss_Observer, false);
        fields.get("isPowerup").set(UnitType.Protoss_Observer, false);
        fields.get("isBeacon").set(UnitType.Protoss_Observer, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Observer, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Observer, false);
        fields.get("isSpell").set(UnitType.Protoss_Observer, false);
        fields.get("producesCreep").set(UnitType.Protoss_Observer, false);
        fields.get("producesLarva").set(UnitType.Protoss_Observer, false);
        fields.get("isMineralField").set(UnitType.Protoss_Observer, false);
        fields.get("isCritter").set(UnitType.Protoss_Observer, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Observer, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Scarab() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Scarab, 85);
        fields.get("race").set(UnitType.Protoss_Scarab, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Scarab, new Pair(UnitType.Protoss_Reaver, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList(UnitType.Protoss_Reaver)));
        fields.get("requiredTech").set(UnitType.Protoss_Scarab, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Scarab, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Scarab, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Protoss_Scarab, 20);
        fields.get("maxShields").set(UnitType.Protoss_Scarab, 10);
        fields.get("maxEnergy").set(UnitType.Protoss_Scarab, 0);
        fields.get("armor").set(UnitType.Protoss_Scarab, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Scarab, 15);
        fields.get("gasPrice").set(UnitType.Protoss_Scarab, 0);
        fields.get("buildTime").set(UnitType.Protoss_Scarab, 105);
        fields.get("supplyRequired").set(UnitType.Protoss_Scarab, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Scarab, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Scarab, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Scarab, 0);
        fields.get("buildScore").set(UnitType.Protoss_Scarab, 0);
        fields.get("destroyScore").set(UnitType.Protoss_Scarab, 0);
        fields.get("size").set(UnitType.Protoss_Scarab, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Protoss_Scarab, 1);
        fields.get("tileHeight").set(UnitType.Protoss_Scarab, 1);
        fields.get("dimensionLeft").set(UnitType.Protoss_Scarab, 2);
        fields.get("dimensionUp").set(UnitType.Protoss_Scarab, 2);
        fields.get("dimensionRight").set(UnitType.Protoss_Scarab, 2);
        fields.get("dimensionDown").set(UnitType.Protoss_Scarab, 2);
        fields.get("width").set(UnitType.Protoss_Scarab, 5);
        fields.get("height").set(UnitType.Protoss_Scarab, 5);
        fields.get("seekRange").set(UnitType.Protoss_Scarab, 96);
        fields.get("sightRange").set(UnitType.Protoss_Scarab, 160);
        fields.get("groundWeapon").set(UnitType.Protoss_Scarab, WeaponType.Scarab);
        fields.get("maxGroundHits").set(UnitType.Protoss_Scarab, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Scarab, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Scarab, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Scarab, 16.0);
        fields.get("acceleration").set(UnitType.Protoss_Scarab, 1);
        fields.get("haltDistance").set(UnitType.Protoss_Scarab, 1);
        fields.get("turnRadius").set(UnitType.Protoss_Scarab, 27);
        fields.get("canProduce").set(UnitType.Protoss_Scarab, false);
        fields.get("canAttack").set(UnitType.Protoss_Scarab, true);
        fields.get("canMove").set(UnitType.Protoss_Scarab, true);
        fields.get("isFlyer").set(UnitType.Protoss_Scarab, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Scarab, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Scarab, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Scarab, false);
        fields.get("isInvincible").set(UnitType.Protoss_Scarab, true);
        fields.get("isOrganic").set(UnitType.Protoss_Scarab, false);
        fields.get("isMechanical").set(UnitType.Protoss_Scarab, true);
        fields.get("isRobotic").set(UnitType.Protoss_Scarab, false);
        fields.get("isDetector").set(UnitType.Protoss_Scarab, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Scarab, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Scarab, false);
        fields.get("isRefinery").set(UnitType.Protoss_Scarab, false);
        fields.get("isWorker").set(UnitType.Protoss_Scarab, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Scarab, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Scarab, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Scarab, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Scarab, false);
        fields.get("isCloakable").set(UnitType.Protoss_Scarab, false);
        fields.get("isBuilding").set(UnitType.Protoss_Scarab, false);
        fields.get("isAddon").set(UnitType.Protoss_Scarab, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Scarab, false);
        fields.get("isNeutral").set(UnitType.Protoss_Scarab, false);
        fields.get("isHero").set(UnitType.Protoss_Scarab, false);
        fields.get("isPowerup").set(UnitType.Protoss_Scarab, false);
        fields.get("isBeacon").set(UnitType.Protoss_Scarab, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Scarab, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Scarab, false);
        fields.get("isSpell").set(UnitType.Protoss_Scarab, false);
        fields.get("producesCreep").set(UnitType.Protoss_Scarab, false);
        fields.get("producesLarva").set(UnitType.Protoss_Scarab, false);
        fields.get("isMineralField").set(UnitType.Protoss_Scarab, false);
        fields.get("isCritter").set(UnitType.Protoss_Scarab, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Scarab, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Danimoth() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Danimoth, 86);
        fields.get("race").set(UnitType.Hero_Danimoth, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Danimoth, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Danimoth, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Danimoth, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList(TechType.Recall, TechType.Stasis_Field)));
        fields.get("upgrades").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Danimoth, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Danimoth, 600);
        fields.get("maxShields").set(UnitType.Hero_Danimoth, 500);
        fields.get("maxEnergy").set(UnitType.Hero_Danimoth, 250);
        fields.get("armor").set(UnitType.Hero_Danimoth, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Danimoth, 50);
        fields.get("gasPrice").set(UnitType.Hero_Danimoth, 1000);
        fields.get("buildTime").set(UnitType.Hero_Danimoth, 4800);
        fields.get("supplyRequired").set(UnitType.Hero_Danimoth, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Danimoth, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Danimoth, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Danimoth, 0);
        fields.get("buildScore").set(UnitType.Hero_Danimoth, 0);
        fields.get("destroyScore").set(UnitType.Hero_Danimoth, 4100);
        fields.get("size").set(UnitType.Hero_Danimoth, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Danimoth, 2);
        fields.get("tileHeight").set(UnitType.Hero_Danimoth, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Danimoth, 22);
        fields.get("dimensionUp").set(UnitType.Hero_Danimoth, 22);
        fields.get("dimensionRight").set(UnitType.Hero_Danimoth, 21);
        fields.get("dimensionDown").set(UnitType.Hero_Danimoth, 21);
        fields.get("width").set(UnitType.Hero_Danimoth, 44);
        fields.get("height").set(UnitType.Hero_Danimoth, 44);
        fields.get("seekRange").set(UnitType.Hero_Danimoth, 0);
        fields.get("sightRange").set(UnitType.Hero_Danimoth, 288);
        fields.get("groundWeapon").set(UnitType.Hero_Danimoth, WeaponType.Phase_Disruptor_Cannon_Danimoth);
        fields.get("maxGroundHits").set(UnitType.Hero_Danimoth, 1);
        fields.get("airWeapon").set(UnitType.Hero_Danimoth, WeaponType.Phase_Disruptor_Cannon_Danimoth);
        fields.get("maxAirHits").set(UnitType.Hero_Danimoth, 1);
        fields.get("topSpeed").set(UnitType.Hero_Danimoth, 5.0);
        fields.get("acceleration").set(UnitType.Hero_Danimoth, 33);
        fields.get("haltDistance").set(UnitType.Hero_Danimoth, 24824);
        fields.get("turnRadius").set(UnitType.Hero_Danimoth, 40);
        fields.get("canProduce").set(UnitType.Hero_Danimoth, false);
        fields.get("canAttack").set(UnitType.Hero_Danimoth, true);
        fields.get("canMove").set(UnitType.Hero_Danimoth, true);
        fields.get("isFlyer").set(UnitType.Hero_Danimoth, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Danimoth, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Danimoth, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Danimoth, false);
        fields.get("isInvincible").set(UnitType.Hero_Danimoth, false);
        fields.get("isOrganic").set(UnitType.Hero_Danimoth, false);
        fields.get("isMechanical").set(UnitType.Hero_Danimoth, true);
        fields.get("isRobotic").set(UnitType.Hero_Danimoth, false);
        fields.get("isDetector").set(UnitType.Hero_Danimoth, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Danimoth, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Danimoth, false);
        fields.get("isRefinery").set(UnitType.Hero_Danimoth, false);
        fields.get("isWorker").set(UnitType.Hero_Danimoth, false);
        fields.get("requiresPsi").set(UnitType.Hero_Danimoth, false);
        fields.get("requiresCreep").set(UnitType.Hero_Danimoth, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Danimoth, false);
        fields.get("isBurrowable").set(UnitType.Hero_Danimoth, false);
        fields.get("isCloakable").set(UnitType.Hero_Danimoth, false);
        fields.get("isBuilding").set(UnitType.Hero_Danimoth, false);
        fields.get("isAddon").set(UnitType.Hero_Danimoth, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Danimoth, false);
        fields.get("isNeutral").set(UnitType.Hero_Danimoth, false);
        fields.get("isHero").set(UnitType.Hero_Danimoth, true);
        fields.get("isPowerup").set(UnitType.Hero_Danimoth, false);
        fields.get("isBeacon").set(UnitType.Hero_Danimoth, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Danimoth, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Danimoth, false);
        fields.get("isSpell").set(UnitType.Hero_Danimoth, false);
        fields.get("producesCreep").set(UnitType.Hero_Danimoth, false);
        fields.get("producesLarva").set(UnitType.Hero_Danimoth, false);
        fields.get("isMineralField").set(UnitType.Hero_Danimoth, false);
        fields.get("isCritter").set(UnitType.Hero_Danimoth, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Danimoth, false);
        fields.get("researchesWhat").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Aldaris() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Aldaris, 87);
        fields.get("race").set(UnitType.Hero_Aldaris, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Aldaris, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Aldaris, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Aldaris, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Aldaris, UpgradeType.Protoss_Ground_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Aldaris, 80);
        fields.get("maxShields").set(UnitType.Hero_Aldaris, 300);
        fields.get("maxEnergy").set(UnitType.Hero_Aldaris, 250);
        fields.get("armor").set(UnitType.Hero_Aldaris, 2);
        fields.get("mineralPrice").set(UnitType.Hero_Aldaris, 100);
        fields.get("gasPrice").set(UnitType.Hero_Aldaris, 300);
        fields.get("buildTime").set(UnitType.Hero_Aldaris, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Aldaris, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Aldaris, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Aldaris, 2);
        fields.get("spaceProvided").set(UnitType.Hero_Aldaris, 0);
        fields.get("buildScore").set(UnitType.Hero_Aldaris, 0);
        fields.get("destroyScore").set(UnitType.Hero_Aldaris, 1400);
        fields.get("size").set(UnitType.Hero_Aldaris, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Aldaris, 1);
        fields.get("tileHeight").set(UnitType.Hero_Aldaris, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Aldaris, 12);
        fields.get("dimensionUp").set(UnitType.Hero_Aldaris, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Aldaris, 11);
        fields.get("dimensionDown").set(UnitType.Hero_Aldaris, 13);
        fields.get("width").set(UnitType.Hero_Aldaris, 24);
        fields.get("height").set(UnitType.Hero_Aldaris, 24);
        fields.get("seekRange").set(UnitType.Hero_Aldaris, 96);
        fields.get("sightRange").set(UnitType.Hero_Aldaris, 224);
        fields.get("groundWeapon").set(UnitType.Hero_Aldaris, WeaponType.Psi_Assault);
        fields.get("maxGroundHits").set(UnitType.Hero_Aldaris, 1);
        fields.get("airWeapon").set(UnitType.Hero_Aldaris, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Hero_Aldaris, 0);
        fields.get("topSpeed").set(UnitType.Hero_Aldaris, 3.2);
        fields.get("acceleration").set(UnitType.Hero_Aldaris, 27);
        fields.get("haltDistance").set(UnitType.Hero_Aldaris, 13474);
        fields.get("turnRadius").set(UnitType.Hero_Aldaris, 40);
        fields.get("canProduce").set(UnitType.Hero_Aldaris, false);
        fields.get("canAttack").set(UnitType.Hero_Aldaris, true);
        fields.get("canMove").set(UnitType.Hero_Aldaris, true);
        fields.get("isFlyer").set(UnitType.Hero_Aldaris, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Aldaris, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Aldaris, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Aldaris, false);
        fields.get("isInvincible").set(UnitType.Hero_Aldaris, false);
        fields.get("isOrganic").set(UnitType.Hero_Aldaris, true);
        fields.get("isMechanical").set(UnitType.Hero_Aldaris, false);
        fields.get("isRobotic").set(UnitType.Hero_Aldaris, false);
        fields.get("isDetector").set(UnitType.Hero_Aldaris, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Aldaris, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Aldaris, false);
        fields.get("isRefinery").set(UnitType.Hero_Aldaris, false);
        fields.get("isWorker").set(UnitType.Hero_Aldaris, false);
        fields.get("requiresPsi").set(UnitType.Hero_Aldaris, false);
        fields.get("requiresCreep").set(UnitType.Hero_Aldaris, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Aldaris, false);
        fields.get("isBurrowable").set(UnitType.Hero_Aldaris, false);
        fields.get("isCloakable").set(UnitType.Hero_Aldaris, false);
        fields.get("isBuilding").set(UnitType.Hero_Aldaris, false);
        fields.get("isAddon").set(UnitType.Hero_Aldaris, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Aldaris, false);
        fields.get("isNeutral").set(UnitType.Hero_Aldaris, false);
        fields.get("isHero").set(UnitType.Hero_Aldaris, true);
        fields.get("isPowerup").set(UnitType.Hero_Aldaris, false);
        fields.get("isBeacon").set(UnitType.Hero_Aldaris, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Aldaris, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Aldaris, false);
        fields.get("isSpell").set(UnitType.Hero_Aldaris, false);
        fields.get("producesCreep").set(UnitType.Hero_Aldaris, false);
        fields.get("producesLarva").set(UnitType.Hero_Aldaris, false);
        fields.get("isMineralField").set(UnitType.Hero_Aldaris, false);
        fields.get("isCritter").set(UnitType.Hero_Aldaris, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Aldaris, false);
        fields.get("researchesWhat").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Artanis() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Artanis, 88);
        fields.get("race").set(UnitType.Hero_Artanis, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Artanis, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Artanis, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Artanis, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Artanis, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Artanis, 250);
        fields.get("maxShields").set(UnitType.Hero_Artanis, 250);
        fields.get("maxEnergy").set(UnitType.Hero_Artanis, 0);
        fields.get("armor").set(UnitType.Hero_Artanis, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Artanis, 600);
        fields.get("gasPrice").set(UnitType.Hero_Artanis, 300);
        fields.get("buildTime").set(UnitType.Hero_Artanis, 2400);
        fields.get("supplyRequired").set(UnitType.Hero_Artanis, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Artanis, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Artanis, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Artanis, 0);
        fields.get("buildScore").set(UnitType.Hero_Artanis, 0);
        fields.get("destroyScore").set(UnitType.Hero_Artanis, 2400);
        fields.get("size").set(UnitType.Hero_Artanis, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Artanis, 2);
        fields.get("tileHeight").set(UnitType.Hero_Artanis, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Artanis, 18);
        fields.get("dimensionUp").set(UnitType.Hero_Artanis, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Artanis, 17);
        fields.get("dimensionDown").set(UnitType.Hero_Artanis, 15);
        fields.get("width").set(UnitType.Hero_Artanis, 36);
        fields.get("height").set(UnitType.Hero_Artanis, 32);
        fields.get("seekRange").set(UnitType.Hero_Artanis, 0);
        fields.get("sightRange").set(UnitType.Hero_Artanis, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Artanis, WeaponType.Dual_Photon_Blasters_Artanis);
        fields.get("maxGroundHits").set(UnitType.Hero_Artanis, 1);
        fields.get("airWeapon").set(UnitType.Hero_Artanis, WeaponType.Anti_Matter_Missiles_Artanis);
        fields.get("maxAirHits").set(UnitType.Hero_Artanis, 1);
        fields.get("topSpeed").set(UnitType.Hero_Artanis, 5.0);
        fields.get("acceleration").set(UnitType.Hero_Artanis, 48);
        fields.get("haltDistance").set(UnitType.Hero_Artanis, 17067);
        fields.get("turnRadius").set(UnitType.Hero_Artanis, 30);
        fields.get("canProduce").set(UnitType.Hero_Artanis, false);
        fields.get("canAttack").set(UnitType.Hero_Artanis, true);
        fields.get("canMove").set(UnitType.Hero_Artanis, true);
        fields.get("isFlyer").set(UnitType.Hero_Artanis, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Artanis, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Artanis, false);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Artanis, false);
        fields.get("isInvincible").set(UnitType.Hero_Artanis, false);
        fields.get("isOrganic").set(UnitType.Hero_Artanis, false);
        fields.get("isMechanical").set(UnitType.Hero_Artanis, true);
        fields.get("isRobotic").set(UnitType.Hero_Artanis, false);
        fields.get("isDetector").set(UnitType.Hero_Artanis, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Artanis, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Artanis, false);
        fields.get("isRefinery").set(UnitType.Hero_Artanis, false);
        fields.get("isWorker").set(UnitType.Hero_Artanis, false);
        fields.get("requiresPsi").set(UnitType.Hero_Artanis, false);
        fields.get("requiresCreep").set(UnitType.Hero_Artanis, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Artanis, false);
        fields.get("isBurrowable").set(UnitType.Hero_Artanis, false);
        fields.get("isCloakable").set(UnitType.Hero_Artanis, false);
        fields.get("isBuilding").set(UnitType.Hero_Artanis, false);
        fields.get("isAddon").set(UnitType.Hero_Artanis, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Artanis, false);
        fields.get("isNeutral").set(UnitType.Hero_Artanis, false);
        fields.get("isHero").set(UnitType.Hero_Artanis, true);
        fields.get("isPowerup").set(UnitType.Hero_Artanis, false);
        fields.get("isBeacon").set(UnitType.Hero_Artanis, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Artanis, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Artanis, false);
        fields.get("isSpell").set(UnitType.Hero_Artanis, false);
        fields.get("producesCreep").set(UnitType.Hero_Artanis, false);
        fields.get("producesLarva").set(UnitType.Hero_Artanis, false);
        fields.get("isMineralField").set(UnitType.Hero_Artanis, false);
        fields.get("isCritter").set(UnitType.Hero_Artanis, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Artanis, false);
        fields.get("researchesWhat").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Critter_Rhynadon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Critter_Rhynadon, 89);
        fields.get("race").set(UnitType.Critter_Rhynadon, Race.None);
        fields.get("whatBuilds").set(UnitType.Critter_Rhynadon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Critter_Rhynadon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Critter_Rhynadon, TechType.None);
        fields.get("abilities").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Critter_Rhynadon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Critter_Rhynadon, 60);
        fields.get("maxShields").set(UnitType.Critter_Rhynadon, 0);
        fields.get("maxEnergy").set(UnitType.Critter_Rhynadon, 0);
        fields.get("armor").set(UnitType.Critter_Rhynadon, 0);
        fields.get("mineralPrice").set(UnitType.Critter_Rhynadon, 1);
        fields.get("gasPrice").set(UnitType.Critter_Rhynadon, 1);
        fields.get("buildTime").set(UnitType.Critter_Rhynadon, 1);
        fields.get("supplyRequired").set(UnitType.Critter_Rhynadon, 0);
        fields.get("supplyProvided").set(UnitType.Critter_Rhynadon, 0);
        fields.get("spaceRequired").set(UnitType.Critter_Rhynadon, 255);
        fields.get("spaceProvided").set(UnitType.Critter_Rhynadon, 0);
        fields.get("buildScore").set(UnitType.Critter_Rhynadon, 0);
        fields.get("destroyScore").set(UnitType.Critter_Rhynadon, 10);
        fields.get("size").set(UnitType.Critter_Rhynadon, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Critter_Rhynadon, 1);
        fields.get("tileHeight").set(UnitType.Critter_Rhynadon, 1);
        fields.get("dimensionLeft").set(UnitType.Critter_Rhynadon, 16);
        fields.get("dimensionUp").set(UnitType.Critter_Rhynadon, 16);
        fields.get("dimensionRight").set(UnitType.Critter_Rhynadon, 15);
        fields.get("dimensionDown").set(UnitType.Critter_Rhynadon, 15);
        fields.get("width").set(UnitType.Critter_Rhynadon, 32);
        fields.get("height").set(UnitType.Critter_Rhynadon, 32);
        fields.get("seekRange").set(UnitType.Critter_Rhynadon, 0);
        fields.get("sightRange").set(UnitType.Critter_Rhynadon, 224);
        fields.get("groundWeapon").set(UnitType.Critter_Rhynadon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Critter_Rhynadon, 0);
        fields.get("airWeapon").set(UnitType.Critter_Rhynadon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Critter_Rhynadon, 0);
        fields.get("topSpeed").set(UnitType.Critter_Rhynadon, 4.0);
        fields.get("acceleration").set(UnitType.Critter_Rhynadon, 1);
        fields.get("haltDistance").set(UnitType.Critter_Rhynadon, 1);
        fields.get("turnRadius").set(UnitType.Critter_Rhynadon, 27);
        fields.get("canProduce").set(UnitType.Critter_Rhynadon, false);
        fields.get("canAttack").set(UnitType.Critter_Rhynadon, false);
        fields.get("canMove").set(UnitType.Critter_Rhynadon, true);
        fields.get("isFlyer").set(UnitType.Critter_Rhynadon, false);
        fields.get("regeneratesHP").set(UnitType.Critter_Rhynadon, false);
        fields.get("isSpellcaster").set(UnitType.Critter_Rhynadon, false);
        fields.get("hasPermanentCloak").set(UnitType.Critter_Rhynadon, false);
        fields.get("isInvincible").set(UnitType.Critter_Rhynadon, false);
        fields.get("isOrganic").set(UnitType.Critter_Rhynadon, true);
        fields.get("isMechanical").set(UnitType.Critter_Rhynadon, false);
        fields.get("isRobotic").set(UnitType.Critter_Rhynadon, false);
        fields.get("isDetector").set(UnitType.Critter_Rhynadon, false);
        fields.get("isResourceContainer").set(UnitType.Critter_Rhynadon, false);
        fields.get("isResourceDepot").set(UnitType.Critter_Rhynadon, false);
        fields.get("isRefinery").set(UnitType.Critter_Rhynadon, false);
        fields.get("isWorker").set(UnitType.Critter_Rhynadon, false);
        fields.get("requiresPsi").set(UnitType.Critter_Rhynadon, false);
        fields.get("requiresCreep").set(UnitType.Critter_Rhynadon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Critter_Rhynadon, false);
        fields.get("isBurrowable").set(UnitType.Critter_Rhynadon, false);
        fields.get("isCloakable").set(UnitType.Critter_Rhynadon, false);
        fields.get("isBuilding").set(UnitType.Critter_Rhynadon, false);
        fields.get("isAddon").set(UnitType.Critter_Rhynadon, false);
        fields.get("isFlyingBuilding").set(UnitType.Critter_Rhynadon, false);
        fields.get("isNeutral").set(UnitType.Critter_Rhynadon, true);
        fields.get("isHero").set(UnitType.Critter_Rhynadon, false);
        fields.get("isPowerup").set(UnitType.Critter_Rhynadon, false);
        fields.get("isBeacon").set(UnitType.Critter_Rhynadon, false);
        fields.get("isFlagBeacon").set(UnitType.Critter_Rhynadon, false);
        fields.get("isSpecialBuilding").set(UnitType.Critter_Rhynadon, false);
        fields.get("isSpell").set(UnitType.Critter_Rhynadon, false);
        fields.get("producesCreep").set(UnitType.Critter_Rhynadon, false);
        fields.get("producesLarva").set(UnitType.Critter_Rhynadon, false);
        fields.get("isMineralField").set(UnitType.Critter_Rhynadon, false);
        fields.get("isCritter").set(UnitType.Critter_Rhynadon, true);
        fields.get("canBuildAddon").set(UnitType.Critter_Rhynadon, false);
        fields.get("researchesWhat").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Critter_Bengalaas() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Critter_Bengalaas, 90);
        fields.get("race").set(UnitType.Critter_Bengalaas, Race.None);
        fields.get("whatBuilds").set(UnitType.Critter_Bengalaas, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Critter_Bengalaas, TechType.None);
        fields.get("cloakingTech").set(UnitType.Critter_Bengalaas, TechType.None);
        fields.get("abilities").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Critter_Bengalaas, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Critter_Bengalaas, 60);
        fields.get("maxShields").set(UnitType.Critter_Bengalaas, 0);
        fields.get("maxEnergy").set(UnitType.Critter_Bengalaas, 0);
        fields.get("armor").set(UnitType.Critter_Bengalaas, 0);
        fields.get("mineralPrice").set(UnitType.Critter_Bengalaas, 1);
        fields.get("gasPrice").set(UnitType.Critter_Bengalaas, 1);
        fields.get("buildTime").set(UnitType.Critter_Bengalaas, 1);
        fields.get("supplyRequired").set(UnitType.Critter_Bengalaas, 0);
        fields.get("supplyProvided").set(UnitType.Critter_Bengalaas, 0);
        fields.get("spaceRequired").set(UnitType.Critter_Bengalaas, 255);
        fields.get("spaceProvided").set(UnitType.Critter_Bengalaas, 0);
        fields.get("buildScore").set(UnitType.Critter_Bengalaas, 0);
        fields.get("destroyScore").set(UnitType.Critter_Bengalaas, 10);
        fields.get("size").set(UnitType.Critter_Bengalaas, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Critter_Bengalaas, 1);
        fields.get("tileHeight").set(UnitType.Critter_Bengalaas, 1);
        fields.get("dimensionLeft").set(UnitType.Critter_Bengalaas, 16);
        fields.get("dimensionUp").set(UnitType.Critter_Bengalaas, 16);
        fields.get("dimensionRight").set(UnitType.Critter_Bengalaas, 15);
        fields.get("dimensionDown").set(UnitType.Critter_Bengalaas, 15);
        fields.get("width").set(UnitType.Critter_Bengalaas, 32);
        fields.get("height").set(UnitType.Critter_Bengalaas, 32);
        fields.get("seekRange").set(UnitType.Critter_Bengalaas, 0);
        fields.get("sightRange").set(UnitType.Critter_Bengalaas, 224);
        fields.get("groundWeapon").set(UnitType.Critter_Bengalaas, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Critter_Bengalaas, 0);
        fields.get("airWeapon").set(UnitType.Critter_Bengalaas, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Critter_Bengalaas, 0);
        fields.get("topSpeed").set(UnitType.Critter_Bengalaas, 4.0);
        fields.get("acceleration").set(UnitType.Critter_Bengalaas, 1);
        fields.get("haltDistance").set(UnitType.Critter_Bengalaas, 1);
        fields.get("turnRadius").set(UnitType.Critter_Bengalaas, 27);
        fields.get("canProduce").set(UnitType.Critter_Bengalaas, false);
        fields.get("canAttack").set(UnitType.Critter_Bengalaas, false);
        fields.get("canMove").set(UnitType.Critter_Bengalaas, true);
        fields.get("isFlyer").set(UnitType.Critter_Bengalaas, false);
        fields.get("regeneratesHP").set(UnitType.Critter_Bengalaas, false);
        fields.get("isSpellcaster").set(UnitType.Critter_Bengalaas, false);
        fields.get("hasPermanentCloak").set(UnitType.Critter_Bengalaas, false);
        fields.get("isInvincible").set(UnitType.Critter_Bengalaas, false);
        fields.get("isOrganic").set(UnitType.Critter_Bengalaas, true);
        fields.get("isMechanical").set(UnitType.Critter_Bengalaas, false);
        fields.get("isRobotic").set(UnitType.Critter_Bengalaas, false);
        fields.get("isDetector").set(UnitType.Critter_Bengalaas, false);
        fields.get("isResourceContainer").set(UnitType.Critter_Bengalaas, false);
        fields.get("isResourceDepot").set(UnitType.Critter_Bengalaas, false);
        fields.get("isRefinery").set(UnitType.Critter_Bengalaas, false);
        fields.get("isWorker").set(UnitType.Critter_Bengalaas, false);
        fields.get("requiresPsi").set(UnitType.Critter_Bengalaas, false);
        fields.get("requiresCreep").set(UnitType.Critter_Bengalaas, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Critter_Bengalaas, false);
        fields.get("isBurrowable").set(UnitType.Critter_Bengalaas, false);
        fields.get("isCloakable").set(UnitType.Critter_Bengalaas, false);
        fields.get("isBuilding").set(UnitType.Critter_Bengalaas, false);
        fields.get("isAddon").set(UnitType.Critter_Bengalaas, false);
        fields.get("isFlyingBuilding").set(UnitType.Critter_Bengalaas, false);
        fields.get("isNeutral").set(UnitType.Critter_Bengalaas, true);
        fields.get("isHero").set(UnitType.Critter_Bengalaas, false);
        fields.get("isPowerup").set(UnitType.Critter_Bengalaas, false);
        fields.get("isBeacon").set(UnitType.Critter_Bengalaas, false);
        fields.get("isFlagBeacon").set(UnitType.Critter_Bengalaas, false);
        fields.get("isSpecialBuilding").set(UnitType.Critter_Bengalaas, false);
        fields.get("isSpell").set(UnitType.Critter_Bengalaas, false);
        fields.get("producesCreep").set(UnitType.Critter_Bengalaas, false);
        fields.get("producesLarva").set(UnitType.Critter_Bengalaas, false);
        fields.get("isMineralField").set(UnitType.Critter_Bengalaas, false);
        fields.get("isCritter").set(UnitType.Critter_Bengalaas, true);
        fields.get("canBuildAddon").set(UnitType.Critter_Bengalaas, false);
        fields.get("researchesWhat").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Cargo_Ship() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Cargo_Ship, 91);
        fields.get("race").set(UnitType.Special_Cargo_Ship, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Cargo_Ship, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Cargo_Ship, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Cargo_Ship, TechType.None);
        fields.get("abilities").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Cargo_Ship, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Cargo_Ship, 125);
        fields.get("maxShields").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("maxEnergy").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("armor").set(UnitType.Special_Cargo_Ship, 1);
        fields.get("mineralPrice").set(UnitType.Special_Cargo_Ship, 100);
        fields.get("gasPrice").set(UnitType.Special_Cargo_Ship, 100);
        fields.get("buildTime").set(UnitType.Special_Cargo_Ship, 600);
        fields.get("supplyRequired").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("supplyProvided").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("spaceRequired").set(UnitType.Special_Cargo_Ship, 255);
        fields.get("spaceProvided").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("buildScore").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("destroyScore").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("size").set(UnitType.Special_Cargo_Ship, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Special_Cargo_Ship, 1);
        fields.get("tileHeight").set(UnitType.Special_Cargo_Ship, 1);
        fields.get("dimensionLeft").set(UnitType.Special_Cargo_Ship, 15);
        fields.get("dimensionUp").set(UnitType.Special_Cargo_Ship, 15);
        fields.get("dimensionRight").set(UnitType.Special_Cargo_Ship, 16);
        fields.get("dimensionDown").set(UnitType.Special_Cargo_Ship, 16);
        fields.get("width").set(UnitType.Special_Cargo_Ship, 32);
        fields.get("height").set(UnitType.Special_Cargo_Ship, 32);
        fields.get("seekRange").set(UnitType.Special_Cargo_Ship, 256);
        fields.get("sightRange").set(UnitType.Special_Cargo_Ship, 256);
        fields.get("groundWeapon").set(UnitType.Special_Cargo_Ship, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("airWeapon").set(UnitType.Special_Cargo_Ship, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("topSpeed").set(UnitType.Special_Cargo_Ship, 0.0);
        fields.get("acceleration").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("haltDistance").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("turnRadius").set(UnitType.Special_Cargo_Ship, 0);
        fields.get("canProduce").set(UnitType.Special_Cargo_Ship, false);
        fields.get("canAttack").set(UnitType.Special_Cargo_Ship, false);
        fields.get("canMove").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isFlyer").set(UnitType.Special_Cargo_Ship, false);
        fields.get("regeneratesHP").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isSpellcaster").set(UnitType.Special_Cargo_Ship, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isInvincible").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isOrganic").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isMechanical").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isRobotic").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isDetector").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isResourceContainer").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isResourceDepot").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isRefinery").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isWorker").set(UnitType.Special_Cargo_Ship, false);
        fields.get("requiresPsi").set(UnitType.Special_Cargo_Ship, false);
        fields.get("requiresCreep").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isBurrowable").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isCloakable").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isBuilding").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isAddon").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isNeutral").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isHero").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isPowerup").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isBeacon").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isSpell").set(UnitType.Special_Cargo_Ship, false);
        fields.get("producesCreep").set(UnitType.Special_Cargo_Ship, false);
        fields.get("producesLarva").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isMineralField").set(UnitType.Special_Cargo_Ship, false);
        fields.get("isCritter").set(UnitType.Special_Cargo_Ship, false);
        fields.get("canBuildAddon").set(UnitType.Special_Cargo_Ship, false);
        fields.get("researchesWhat").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Mercenary_Gunship() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Mercenary_Gunship, 92);
        fields.get("race").set(UnitType.Special_Mercenary_Gunship, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Mercenary_Gunship, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Mercenary_Gunship, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Mercenary_Gunship, TechType.None);
        fields.get("abilities").set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Mercenary_Gunship, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Mercenary_Gunship, 125);
        fields.get("maxShields").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("maxEnergy").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("armor").set(UnitType.Special_Mercenary_Gunship, 1);
        fields.get("mineralPrice").set(UnitType.Special_Mercenary_Gunship, 100);
        fields.get("gasPrice").set(UnitType.Special_Mercenary_Gunship, 100);
        fields.get("buildTime").set(UnitType.Special_Mercenary_Gunship, 600);
        fields.get("supplyRequired").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("supplyProvided").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("spaceRequired").set(UnitType.Special_Mercenary_Gunship, 255);
        fields.get("spaceProvided").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("buildScore").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("destroyScore").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("size").set(UnitType.Special_Mercenary_Gunship, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Special_Mercenary_Gunship, 1);
        fields.get("tileHeight").set(UnitType.Special_Mercenary_Gunship, 1);
        fields.get("dimensionLeft").set(UnitType.Special_Mercenary_Gunship, 15);
        fields.get("dimensionUp").set(UnitType.Special_Mercenary_Gunship, 15);
        fields.get("dimensionRight").set(UnitType.Special_Mercenary_Gunship, 16);
        fields.get("dimensionDown").set(UnitType.Special_Mercenary_Gunship, 16);
        fields.get("width").set(UnitType.Special_Mercenary_Gunship, 32);
        fields.get("height").set(UnitType.Special_Mercenary_Gunship, 32);
        fields.get("seekRange").set(UnitType.Special_Mercenary_Gunship, 128);
        fields.get("sightRange").set(UnitType.Special_Mercenary_Gunship, 224);
        fields.get("groundWeapon").set(UnitType.Special_Mercenary_Gunship, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("airWeapon").set(UnitType.Special_Mercenary_Gunship, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("topSpeed").set(UnitType.Special_Mercenary_Gunship, 0.0);
        fields.get("acceleration").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("haltDistance").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("turnRadius").set(UnitType.Special_Mercenary_Gunship, 0);
        fields.get("canProduce").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("canAttack").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("canMove").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isFlyer").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("regeneratesHP").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isSpellcaster").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isInvincible").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isOrganic").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isMechanical").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isRobotic").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isDetector").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isResourceContainer").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isResourceDepot").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isRefinery").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isWorker").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("requiresPsi").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("requiresCreep").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isBurrowable").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isCloakable").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isBuilding").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isAddon").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isNeutral").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isHero").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isPowerup").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isBeacon").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isSpell").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("producesCreep").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("producesLarva").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isMineralField").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("isCritter").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("canBuildAddon").set(UnitType.Special_Mercenary_Gunship, false);
        fields.get("researchesWhat").set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Critter_Scantid() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Critter_Scantid, 93);
        fields.get("race").set(UnitType.Critter_Scantid, Race.None);
        fields.get("whatBuilds").set(UnitType.Critter_Scantid, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Critter_Scantid, TechType.None);
        fields.get("cloakingTech").set(UnitType.Critter_Scantid, TechType.None);
        fields.get("abilities").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Critter_Scantid, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Critter_Scantid, 60);
        fields.get("maxShields").set(UnitType.Critter_Scantid, 0);
        fields.get("maxEnergy").set(UnitType.Critter_Scantid, 0);
        fields.get("armor").set(UnitType.Critter_Scantid, 0);
        fields.get("mineralPrice").set(UnitType.Critter_Scantid, 1);
        fields.get("gasPrice").set(UnitType.Critter_Scantid, 1);
        fields.get("buildTime").set(UnitType.Critter_Scantid, 1);
        fields.get("supplyRequired").set(UnitType.Critter_Scantid, 0);
        fields.get("supplyProvided").set(UnitType.Critter_Scantid, 0);
        fields.get("spaceRequired").set(UnitType.Critter_Scantid, 255);
        fields.get("spaceProvided").set(UnitType.Critter_Scantid, 0);
        fields.get("buildScore").set(UnitType.Critter_Scantid, 0);
        fields.get("destroyScore").set(UnitType.Critter_Scantid, 10);
        fields.get("size").set(UnitType.Critter_Scantid, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Critter_Scantid, 1);
        fields.get("tileHeight").set(UnitType.Critter_Scantid, 1);
        fields.get("dimensionLeft").set(UnitType.Critter_Scantid, 16);
        fields.get("dimensionUp").set(UnitType.Critter_Scantid, 16);
        fields.get("dimensionRight").set(UnitType.Critter_Scantid, 15);
        fields.get("dimensionDown").set(UnitType.Critter_Scantid, 15);
        fields.get("width").set(UnitType.Critter_Scantid, 32);
        fields.get("height").set(UnitType.Critter_Scantid, 32);
        fields.get("seekRange").set(UnitType.Critter_Scantid, 0);
        fields.get("sightRange").set(UnitType.Critter_Scantid, 224);
        fields.get("groundWeapon").set(UnitType.Critter_Scantid, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Critter_Scantid, 0);
        fields.get("airWeapon").set(UnitType.Critter_Scantid, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Critter_Scantid, 0);
        fields.get("topSpeed").set(UnitType.Critter_Scantid, 4.0);
        fields.get("acceleration").set(UnitType.Critter_Scantid, 1);
        fields.get("haltDistance").set(UnitType.Critter_Scantid, 1);
        fields.get("turnRadius").set(UnitType.Critter_Scantid, 27);
        fields.get("canProduce").set(UnitType.Critter_Scantid, false);
        fields.get("canAttack").set(UnitType.Critter_Scantid, false);
        fields.get("canMove").set(UnitType.Critter_Scantid, true);
        fields.get("isFlyer").set(UnitType.Critter_Scantid, false);
        fields.get("regeneratesHP").set(UnitType.Critter_Scantid, false);
        fields.get("isSpellcaster").set(UnitType.Critter_Scantid, false);
        fields.get("hasPermanentCloak").set(UnitType.Critter_Scantid, false);
        fields.get("isInvincible").set(UnitType.Critter_Scantid, false);
        fields.get("isOrganic").set(UnitType.Critter_Scantid, true);
        fields.get("isMechanical").set(UnitType.Critter_Scantid, false);
        fields.get("isRobotic").set(UnitType.Critter_Scantid, false);
        fields.get("isDetector").set(UnitType.Critter_Scantid, false);
        fields.get("isResourceContainer").set(UnitType.Critter_Scantid, false);
        fields.get("isResourceDepot").set(UnitType.Critter_Scantid, false);
        fields.get("isRefinery").set(UnitType.Critter_Scantid, false);
        fields.get("isWorker").set(UnitType.Critter_Scantid, false);
        fields.get("requiresPsi").set(UnitType.Critter_Scantid, false);
        fields.get("requiresCreep").set(UnitType.Critter_Scantid, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Critter_Scantid, false);
        fields.get("isBurrowable").set(UnitType.Critter_Scantid, false);
        fields.get("isCloakable").set(UnitType.Critter_Scantid, false);
        fields.get("isBuilding").set(UnitType.Critter_Scantid, false);
        fields.get("isAddon").set(UnitType.Critter_Scantid, false);
        fields.get("isFlyingBuilding").set(UnitType.Critter_Scantid, false);
        fields.get("isNeutral").set(UnitType.Critter_Scantid, true);
        fields.get("isHero").set(UnitType.Critter_Scantid, false);
        fields.get("isPowerup").set(UnitType.Critter_Scantid, false);
        fields.get("isBeacon").set(UnitType.Critter_Scantid, false);
        fields.get("isFlagBeacon").set(UnitType.Critter_Scantid, false);
        fields.get("isSpecialBuilding").set(UnitType.Critter_Scantid, false);
        fields.get("isSpell").set(UnitType.Critter_Scantid, false);
        fields.get("producesCreep").set(UnitType.Critter_Scantid, false);
        fields.get("producesLarva").set(UnitType.Critter_Scantid, false);
        fields.get("isMineralField").set(UnitType.Critter_Scantid, false);
        fields.get("isCritter").set(UnitType.Critter_Scantid, true);
        fields.get("canBuildAddon").set(UnitType.Critter_Scantid, false);
        fields.get("researchesWhat").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Critter_Kakaru() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Critter_Kakaru, 94);
        fields.get("race").set(UnitType.Critter_Kakaru, Race.None);
        fields.get("whatBuilds").set(UnitType.Critter_Kakaru, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Critter_Kakaru, TechType.None);
        fields.get("cloakingTech").set(UnitType.Critter_Kakaru, TechType.None);
        fields.get("abilities").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Critter_Kakaru, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Critter_Kakaru, 60);
        fields.get("maxShields").set(UnitType.Critter_Kakaru, 0);
        fields.get("maxEnergy").set(UnitType.Critter_Kakaru, 0);
        fields.get("armor").set(UnitType.Critter_Kakaru, 0);
        fields.get("mineralPrice").set(UnitType.Critter_Kakaru, 1);
        fields.get("gasPrice").set(UnitType.Critter_Kakaru, 1);
        fields.get("buildTime").set(UnitType.Critter_Kakaru, 1);
        fields.get("supplyRequired").set(UnitType.Critter_Kakaru, 0);
        fields.get("supplyProvided").set(UnitType.Critter_Kakaru, 0);
        fields.get("spaceRequired").set(UnitType.Critter_Kakaru, 255);
        fields.get("spaceProvided").set(UnitType.Critter_Kakaru, 0);
        fields.get("buildScore").set(UnitType.Critter_Kakaru, 0);
        fields.get("destroyScore").set(UnitType.Critter_Kakaru, 10);
        fields.get("size").set(UnitType.Critter_Kakaru, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Critter_Kakaru, 1);
        fields.get("tileHeight").set(UnitType.Critter_Kakaru, 1);
        fields.get("dimensionLeft").set(UnitType.Critter_Kakaru, 16);
        fields.get("dimensionUp").set(UnitType.Critter_Kakaru, 16);
        fields.get("dimensionRight").set(UnitType.Critter_Kakaru, 15);
        fields.get("dimensionDown").set(UnitType.Critter_Kakaru, 15);
        fields.get("width").set(UnitType.Critter_Kakaru, 32);
        fields.get("height").set(UnitType.Critter_Kakaru, 32);
        fields.get("seekRange").set(UnitType.Critter_Kakaru, 0);
        fields.get("sightRange").set(UnitType.Critter_Kakaru, 224);
        fields.get("groundWeapon").set(UnitType.Critter_Kakaru, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Critter_Kakaru, 0);
        fields.get("airWeapon").set(UnitType.Critter_Kakaru, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Critter_Kakaru, 0);
        fields.get("topSpeed").set(UnitType.Critter_Kakaru, 5.0);
        fields.get("acceleration").set(UnitType.Critter_Kakaru, 16);
        fields.get("haltDistance").set(UnitType.Critter_Kakaru, 51200);
        fields.get("turnRadius").set(UnitType.Critter_Kakaru, 14);
        fields.get("canProduce").set(UnitType.Critter_Kakaru, false);
        fields.get("canAttack").set(UnitType.Critter_Kakaru, false);
        fields.get("canMove").set(UnitType.Critter_Kakaru, true);
        fields.get("isFlyer").set(UnitType.Critter_Kakaru, true);
        fields.get("regeneratesHP").set(UnitType.Critter_Kakaru, false);
        fields.get("isSpellcaster").set(UnitType.Critter_Kakaru, false);
        fields.get("hasPermanentCloak").set(UnitType.Critter_Kakaru, false);
        fields.get("isInvincible").set(UnitType.Critter_Kakaru, false);
        fields.get("isOrganic").set(UnitType.Critter_Kakaru, true);
        fields.get("isMechanical").set(UnitType.Critter_Kakaru, false);
        fields.get("isRobotic").set(UnitType.Critter_Kakaru, false);
        fields.get("isDetector").set(UnitType.Critter_Kakaru, false);
        fields.get("isResourceContainer").set(UnitType.Critter_Kakaru, false);
        fields.get("isResourceDepot").set(UnitType.Critter_Kakaru, false);
        fields.get("isRefinery").set(UnitType.Critter_Kakaru, false);
        fields.get("isWorker").set(UnitType.Critter_Kakaru, false);
        fields.get("requiresPsi").set(UnitType.Critter_Kakaru, false);
        fields.get("requiresCreep").set(UnitType.Critter_Kakaru, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Critter_Kakaru, false);
        fields.get("isBurrowable").set(UnitType.Critter_Kakaru, false);
        fields.get("isCloakable").set(UnitType.Critter_Kakaru, false);
        fields.get("isBuilding").set(UnitType.Critter_Kakaru, false);
        fields.get("isAddon").set(UnitType.Critter_Kakaru, false);
        fields.get("isFlyingBuilding").set(UnitType.Critter_Kakaru, false);
        fields.get("isNeutral").set(UnitType.Critter_Kakaru, true);
        fields.get("isHero").set(UnitType.Critter_Kakaru, false);
        fields.get("isPowerup").set(UnitType.Critter_Kakaru, false);
        fields.get("isBeacon").set(UnitType.Critter_Kakaru, false);
        fields.get("isFlagBeacon").set(UnitType.Critter_Kakaru, false);
        fields.get("isSpecialBuilding").set(UnitType.Critter_Kakaru, false);
        fields.get("isSpell").set(UnitType.Critter_Kakaru, false);
        fields.get("producesCreep").set(UnitType.Critter_Kakaru, false);
        fields.get("producesLarva").set(UnitType.Critter_Kakaru, false);
        fields.get("isMineralField").set(UnitType.Critter_Kakaru, false);
        fields.get("isCritter").set(UnitType.Critter_Kakaru, true);
        fields.get("canBuildAddon").set(UnitType.Critter_Kakaru, false);
        fields.get("researchesWhat").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Critter_Ragnasaur() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Critter_Ragnasaur, 95);
        fields.get("race").set(UnitType.Critter_Ragnasaur, Race.None);
        fields.get("whatBuilds").set(UnitType.Critter_Ragnasaur, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Critter_Ragnasaur, TechType.None);
        fields.get("cloakingTech").set(UnitType.Critter_Ragnasaur, TechType.None);
        fields.get("abilities").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Critter_Ragnasaur, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Critter_Ragnasaur, 60);
        fields.get("maxShields").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("maxEnergy").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("armor").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("mineralPrice").set(UnitType.Critter_Ragnasaur, 1);
        fields.get("gasPrice").set(UnitType.Critter_Ragnasaur, 1);
        fields.get("buildTime").set(UnitType.Critter_Ragnasaur, 1);
        fields.get("supplyRequired").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("supplyProvided").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("spaceRequired").set(UnitType.Critter_Ragnasaur, 255);
        fields.get("spaceProvided").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("buildScore").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("destroyScore").set(UnitType.Critter_Ragnasaur, 10);
        fields.get("size").set(UnitType.Critter_Ragnasaur, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Critter_Ragnasaur, 1);
        fields.get("tileHeight").set(UnitType.Critter_Ragnasaur, 1);
        fields.get("dimensionLeft").set(UnitType.Critter_Ragnasaur, 16);
        fields.get("dimensionUp").set(UnitType.Critter_Ragnasaur, 16);
        fields.get("dimensionRight").set(UnitType.Critter_Ragnasaur, 15);
        fields.get("dimensionDown").set(UnitType.Critter_Ragnasaur, 15);
        fields.get("width").set(UnitType.Critter_Ragnasaur, 32);
        fields.get("height").set(UnitType.Critter_Ragnasaur, 32);
        fields.get("seekRange").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("sightRange").set(UnitType.Critter_Ragnasaur, 224);
        fields.get("groundWeapon").set(UnitType.Critter_Ragnasaur, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("airWeapon").set(UnitType.Critter_Ragnasaur, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Critter_Ragnasaur, 0);
        fields.get("topSpeed").set(UnitType.Critter_Ragnasaur, 4.0);
        fields.get("acceleration").set(UnitType.Critter_Ragnasaur, 1);
        fields.get("haltDistance").set(UnitType.Critter_Ragnasaur, 1);
        fields.get("turnRadius").set(UnitType.Critter_Ragnasaur, 27);
        fields.get("canProduce").set(UnitType.Critter_Ragnasaur, false);
        fields.get("canAttack").set(UnitType.Critter_Ragnasaur, false);
        fields.get("canMove").set(UnitType.Critter_Ragnasaur, true);
        fields.get("isFlyer").set(UnitType.Critter_Ragnasaur, false);
        fields.get("regeneratesHP").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isSpellcaster").set(UnitType.Critter_Ragnasaur, false);
        fields.get("hasPermanentCloak").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isInvincible").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isOrganic").set(UnitType.Critter_Ragnasaur, true);
        fields.get("isMechanical").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isRobotic").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isDetector").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isResourceContainer").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isResourceDepot").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isRefinery").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isWorker").set(UnitType.Critter_Ragnasaur, false);
        fields.get("requiresPsi").set(UnitType.Critter_Ragnasaur, false);
        fields.get("requiresCreep").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isBurrowable").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isCloakable").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isBuilding").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isAddon").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isFlyingBuilding").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isNeutral").set(UnitType.Critter_Ragnasaur, true);
        fields.get("isHero").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isPowerup").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isBeacon").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isFlagBeacon").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isSpecialBuilding").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isSpell").set(UnitType.Critter_Ragnasaur, false);
        fields.get("producesCreep").set(UnitType.Critter_Ragnasaur, false);
        fields.get("producesLarva").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isMineralField").set(UnitType.Critter_Ragnasaur, false);
        fields.get("isCritter").set(UnitType.Critter_Ragnasaur, true);
        fields.get("canBuildAddon").set(UnitType.Critter_Ragnasaur, false);
        fields.get("researchesWhat").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Critter_Ursadon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Critter_Ursadon, 96);
        fields.get("race").set(UnitType.Critter_Ursadon, Race.None);
        fields.get("whatBuilds").set(UnitType.Critter_Ursadon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Critter_Ursadon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Critter_Ursadon, TechType.None);
        fields.get("abilities").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Critter_Ursadon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Critter_Ursadon, 60);
        fields.get("maxShields").set(UnitType.Critter_Ursadon, 0);
        fields.get("maxEnergy").set(UnitType.Critter_Ursadon, 0);
        fields.get("armor").set(UnitType.Critter_Ursadon, 0);
        fields.get("mineralPrice").set(UnitType.Critter_Ursadon, 1);
        fields.get("gasPrice").set(UnitType.Critter_Ursadon, 1);
        fields.get("buildTime").set(UnitType.Critter_Ursadon, 1);
        fields.get("supplyRequired").set(UnitType.Critter_Ursadon, 0);
        fields.get("supplyProvided").set(UnitType.Critter_Ursadon, 0);
        fields.get("spaceRequired").set(UnitType.Critter_Ursadon, 255);
        fields.get("spaceProvided").set(UnitType.Critter_Ursadon, 0);
        fields.get("buildScore").set(UnitType.Critter_Ursadon, 0);
        fields.get("destroyScore").set(UnitType.Critter_Ursadon, 10);
        fields.get("size").set(UnitType.Critter_Ursadon, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Critter_Ursadon, 1);
        fields.get("tileHeight").set(UnitType.Critter_Ursadon, 1);
        fields.get("dimensionLeft").set(UnitType.Critter_Ursadon, 16);
        fields.get("dimensionUp").set(UnitType.Critter_Ursadon, 16);
        fields.get("dimensionRight").set(UnitType.Critter_Ursadon, 15);
        fields.get("dimensionDown").set(UnitType.Critter_Ursadon, 15);
        fields.get("width").set(UnitType.Critter_Ursadon, 32);
        fields.get("height").set(UnitType.Critter_Ursadon, 32);
        fields.get("seekRange").set(UnitType.Critter_Ursadon, 0);
        fields.get("sightRange").set(UnitType.Critter_Ursadon, 224);
        fields.get("groundWeapon").set(UnitType.Critter_Ursadon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Critter_Ursadon, 0);
        fields.get("airWeapon").set(UnitType.Critter_Ursadon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Critter_Ursadon, 0);
        fields.get("topSpeed").set(UnitType.Critter_Ursadon, 4.0);
        fields.get("acceleration").set(UnitType.Critter_Ursadon, 1);
        fields.get("haltDistance").set(UnitType.Critter_Ursadon, 1);
        fields.get("turnRadius").set(UnitType.Critter_Ursadon, 27);
        fields.get("canProduce").set(UnitType.Critter_Ursadon, false);
        fields.get("canAttack").set(UnitType.Critter_Ursadon, false);
        fields.get("canMove").set(UnitType.Critter_Ursadon, true);
        fields.get("isFlyer").set(UnitType.Critter_Ursadon, false);
        fields.get("regeneratesHP").set(UnitType.Critter_Ursadon, false);
        fields.get("isSpellcaster").set(UnitType.Critter_Ursadon, false);
        fields.get("hasPermanentCloak").set(UnitType.Critter_Ursadon, false);
        fields.get("isInvincible").set(UnitType.Critter_Ursadon, false);
        fields.get("isOrganic").set(UnitType.Critter_Ursadon, true);
        fields.get("isMechanical").set(UnitType.Critter_Ursadon, false);
        fields.get("isRobotic").set(UnitType.Critter_Ursadon, false);
        fields.get("isDetector").set(UnitType.Critter_Ursadon, false);
        fields.get("isResourceContainer").set(UnitType.Critter_Ursadon, false);
        fields.get("isResourceDepot").set(UnitType.Critter_Ursadon, false);
        fields.get("isRefinery").set(UnitType.Critter_Ursadon, false);
        fields.get("isWorker").set(UnitType.Critter_Ursadon, false);
        fields.get("requiresPsi").set(UnitType.Critter_Ursadon, false);
        fields.get("requiresCreep").set(UnitType.Critter_Ursadon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Critter_Ursadon, false);
        fields.get("isBurrowable").set(UnitType.Critter_Ursadon, false);
        fields.get("isCloakable").set(UnitType.Critter_Ursadon, false);
        fields.get("isBuilding").set(UnitType.Critter_Ursadon, false);
        fields.get("isAddon").set(UnitType.Critter_Ursadon, false);
        fields.get("isFlyingBuilding").set(UnitType.Critter_Ursadon, false);
        fields.get("isNeutral").set(UnitType.Critter_Ursadon, true);
        fields.get("isHero").set(UnitType.Critter_Ursadon, false);
        fields.get("isPowerup").set(UnitType.Critter_Ursadon, false);
        fields.get("isBeacon").set(UnitType.Critter_Ursadon, false);
        fields.get("isFlagBeacon").set(UnitType.Critter_Ursadon, false);
        fields.get("isSpecialBuilding").set(UnitType.Critter_Ursadon, false);
        fields.get("isSpell").set(UnitType.Critter_Ursadon, false);
        fields.get("producesCreep").set(UnitType.Critter_Ursadon, false);
        fields.get("producesLarva").set(UnitType.Critter_Ursadon, false);
        fields.get("isMineralField").set(UnitType.Critter_Ursadon, false);
        fields.get("isCritter").set(UnitType.Critter_Ursadon, true);
        fields.get("canBuildAddon").set(UnitType.Critter_Ursadon, false);
        fields.get("researchesWhat").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Lurker_Egg() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Lurker_Egg, 97);
        fields.get("race").set(UnitType.Zerg_Lurker_Egg, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Lurker_Egg, new Pair(UnitType.Zerg_Hydralisk, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList(UnitType.Zerg_Hydralisk)));
        fields.get("requiredTech").set(UnitType.Zerg_Lurker_Egg, TechType.Lurker_Aspect);
        fields.get("cloakingTech").set(UnitType.Zerg_Lurker_Egg, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Lurker_Egg, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Lurker_Egg, 200);
        fields.get("maxShields").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("armor").set(UnitType.Zerg_Lurker_Egg, 10);
        fields.get("mineralPrice").set(UnitType.Zerg_Lurker_Egg, 1);
        fields.get("gasPrice").set(UnitType.Zerg_Lurker_Egg, 1);
        fields.get("buildTime").set(UnitType.Zerg_Lurker_Egg, 1);
        fields.get("supplyRequired").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Lurker_Egg, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("buildScore").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("destroyScore").set(UnitType.Zerg_Lurker_Egg, 500);
        fields.get("size").set(UnitType.Zerg_Lurker_Egg, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Zerg_Lurker_Egg, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Lurker_Egg, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Lurker_Egg, 16);
        fields.get("dimensionUp").set(UnitType.Zerg_Lurker_Egg, 16);
        fields.get("dimensionRight").set(UnitType.Zerg_Lurker_Egg, 15);
        fields.get("dimensionDown").set(UnitType.Zerg_Lurker_Egg, 15);
        fields.get("width").set(UnitType.Zerg_Lurker_Egg, 32);
        fields.get("height").set(UnitType.Zerg_Lurker_Egg, 32);
        fields.get("seekRange").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("sightRange").set(UnitType.Zerg_Lurker_Egg, 128);
        fields.get("groundWeapon").set(UnitType.Zerg_Lurker_Egg, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Lurker_Egg, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Lurker_Egg, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Lurker_Egg, 0);
        fields.get("canProduce").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("canAttack").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("canMove").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isFlyer").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isSpellcaster").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isInvincible").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isOrganic").set(UnitType.Zerg_Lurker_Egg, true);
        fields.get("isMechanical").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isRobotic").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isDetector").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isRefinery").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isWorker").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isCloakable").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isBuilding").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isAddon").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isNeutral").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isHero").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isPowerup").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isBeacon").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isSpell").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("producesCreep").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("producesLarva").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isMineralField").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("isCritter").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Lurker_Egg, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Raszagal() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Raszagal, 98);
        fields.get("race").set(UnitType.Hero_Raszagal, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Hero_Raszagal, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Raszagal, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Raszagal, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList(TechType.Disruption_Web)));
        fields.get("upgrades").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor)));
        fields.get("armorUpgrade").set(UnitType.Hero_Raszagal, UpgradeType.Protoss_Air_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Raszagal, 100);
        fields.get("maxShields").set(UnitType.Hero_Raszagal, 60);
        fields.get("maxEnergy").set(UnitType.Hero_Raszagal, 250);
        fields.get("armor").set(UnitType.Hero_Raszagal, 0);
        fields.get("mineralPrice").set(UnitType.Hero_Raszagal, 150);
        fields.get("gasPrice").set(UnitType.Hero_Raszagal, 100);
        fields.get("buildTime").set(UnitType.Hero_Raszagal, 750);
        fields.get("supplyRequired").set(UnitType.Hero_Raszagal, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Raszagal, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Raszagal, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Raszagal, 0);
        fields.get("buildScore").set(UnitType.Hero_Raszagal, 0);
        fields.get("destroyScore").set(UnitType.Hero_Raszagal, 1300);
        fields.get("size").set(UnitType.Hero_Raszagal, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Hero_Raszagal, 1);
        fields.get("tileHeight").set(UnitType.Hero_Raszagal, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Raszagal, 18);
        fields.get("dimensionUp").set(UnitType.Hero_Raszagal, 16);
        fields.get("dimensionRight").set(UnitType.Hero_Raszagal, 17);
        fields.get("dimensionDown").set(UnitType.Hero_Raszagal, 15);
        fields.get("width").set(UnitType.Hero_Raszagal, 36);
        fields.get("height").set(UnitType.Hero_Raszagal, 32);
        fields.get("seekRange").set(UnitType.Hero_Raszagal, 288);
        fields.get("sightRange").set(UnitType.Hero_Raszagal, 288);
        fields.get("groundWeapon").set(UnitType.Hero_Raszagal, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Hero_Raszagal, 0);
        fields.get("airWeapon").set(UnitType.Hero_Raszagal, WeaponType.Neutron_Flare);
        fields.get("maxAirHits").set(UnitType.Hero_Raszagal, 1);
        fields.get("topSpeed").set(UnitType.Hero_Raszagal, 6.67);
        fields.get("acceleration").set(UnitType.Hero_Raszagal, 67);
        fields.get("haltDistance").set(UnitType.Hero_Raszagal, 17067);
        fields.get("turnRadius").set(UnitType.Hero_Raszagal, 30);
        fields.get("canProduce").set(UnitType.Hero_Raszagal, false);
        fields.get("canAttack").set(UnitType.Hero_Raszagal, true);
        fields.get("canMove").set(UnitType.Hero_Raszagal, true);
        fields.get("isFlyer").set(UnitType.Hero_Raszagal, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Raszagal, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Raszagal, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Raszagal, false);
        fields.get("isInvincible").set(UnitType.Hero_Raszagal, false);
        fields.get("isOrganic").set(UnitType.Hero_Raszagal, false);
        fields.get("isMechanical").set(UnitType.Hero_Raszagal, true);
        fields.get("isRobotic").set(UnitType.Hero_Raszagal, false);
        fields.get("isDetector").set(UnitType.Hero_Raszagal, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Raszagal, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Raszagal, false);
        fields.get("isRefinery").set(UnitType.Hero_Raszagal, false);
        fields.get("isWorker").set(UnitType.Hero_Raszagal, false);
        fields.get("requiresPsi").set(UnitType.Hero_Raszagal, false);
        fields.get("requiresCreep").set(UnitType.Hero_Raszagal, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Raszagal, false);
        fields.get("isBurrowable").set(UnitType.Hero_Raszagal, false);
        fields.get("isCloakable").set(UnitType.Hero_Raszagal, false);
        fields.get("isBuilding").set(UnitType.Hero_Raszagal, false);
        fields.get("isAddon").set(UnitType.Hero_Raszagal, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Raszagal, false);
        fields.get("isNeutral").set(UnitType.Hero_Raszagal, false);
        fields.get("isHero").set(UnitType.Hero_Raszagal, true);
        fields.get("isPowerup").set(UnitType.Hero_Raszagal, false);
        fields.get("isBeacon").set(UnitType.Hero_Raszagal, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Raszagal, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Raszagal, false);
        fields.get("isSpell").set(UnitType.Hero_Raszagal, false);
        fields.get("producesCreep").set(UnitType.Hero_Raszagal, false);
        fields.get("producesLarva").set(UnitType.Hero_Raszagal, false);
        fields.get("isMineralField").set(UnitType.Hero_Raszagal, false);
        fields.get("isCritter").set(UnitType.Hero_Raszagal, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Raszagal, false);
        fields.get("researchesWhat").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Samir_Duran() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Samir_Duran, 99);
        fields.get("race").set(UnitType.Hero_Samir_Duran, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Samir_Duran, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Samir_Duran, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Samir_Duran, TechType.Personnel_Cloaking);
        fields.get("abilities").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking)));
        fields.get("upgrades").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Samir_Duran, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Samir_Duran, 200);
        fields.get("maxShields").set(UnitType.Hero_Samir_Duran, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Samir_Duran, 250);
        fields.get("armor").set(UnitType.Hero_Samir_Duran, 2);
        fields.get("mineralPrice").set(UnitType.Hero_Samir_Duran, 200);
        fields.get("gasPrice").set(UnitType.Hero_Samir_Duran, 75);
        fields.get("buildTime").set(UnitType.Hero_Samir_Duran, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Samir_Duran, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Samir_Duran, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Samir_Duran, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Samir_Duran, 0);
        fields.get("buildScore").set(UnitType.Hero_Samir_Duran, 0);
        fields.get("destroyScore").set(UnitType.Hero_Samir_Duran, 700);
        fields.get("size").set(UnitType.Hero_Samir_Duran, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Samir_Duran, 1);
        fields.get("tileHeight").set(UnitType.Hero_Samir_Duran, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Samir_Duran, 7);
        fields.get("dimensionUp").set(UnitType.Hero_Samir_Duran, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Samir_Duran, 7);
        fields.get("dimensionDown").set(UnitType.Hero_Samir_Duran, 11);
        fields.get("width").set(UnitType.Hero_Samir_Duran, 15);
        fields.get("height").set(UnitType.Hero_Samir_Duran, 22);
        fields.get("seekRange").set(UnitType.Hero_Samir_Duran, 0);
        fields.get("sightRange").set(UnitType.Hero_Samir_Duran, 320);
        fields.get("groundWeapon").set(UnitType.Hero_Samir_Duran, WeaponType.C_10_Canister_Rifle_Samir_Duran);
        fields.get("maxGroundHits").set(UnitType.Hero_Samir_Duran, 1);
        fields.get("airWeapon").set(UnitType.Hero_Samir_Duran, WeaponType.C_10_Canister_Rifle_Samir_Duran);
        fields.get("maxAirHits").set(UnitType.Hero_Samir_Duran, 1);
        fields.get("topSpeed").set(UnitType.Hero_Samir_Duran, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Samir_Duran, 1);
        fields.get("haltDistance").set(UnitType.Hero_Samir_Duran, 1);
        fields.get("turnRadius").set(UnitType.Hero_Samir_Duran, 40);
        fields.get("canProduce").set(UnitType.Hero_Samir_Duran, false);
        fields.get("canAttack").set(UnitType.Hero_Samir_Duran, true);
        fields.get("canMove").set(UnitType.Hero_Samir_Duran, true);
        fields.get("isFlyer").set(UnitType.Hero_Samir_Duran, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Samir_Duran, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isInvincible").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isOrganic").set(UnitType.Hero_Samir_Duran, true);
        fields.get("isMechanical").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isRobotic").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isDetector").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isRefinery").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isWorker").set(UnitType.Hero_Samir_Duran, false);
        fields.get("requiresPsi").set(UnitType.Hero_Samir_Duran, false);
        fields.get("requiresCreep").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isBurrowable").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isCloakable").set(UnitType.Hero_Samir_Duran, true);
        fields.get("isBuilding").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isAddon").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isNeutral").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isHero").set(UnitType.Hero_Samir_Duran, true);
        fields.get("isPowerup").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isBeacon").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isSpell").set(UnitType.Hero_Samir_Duran, false);
        fields.get("producesCreep").set(UnitType.Hero_Samir_Duran, false);
        fields.get("producesLarva").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isMineralField").set(UnitType.Hero_Samir_Duran, false);
        fields.get("isCritter").set(UnitType.Hero_Samir_Duran, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Samir_Duran, false);
        fields.get("researchesWhat").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Alexei_Stukov() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Alexei_Stukov, 100);
        fields.get("race").set(UnitType.Hero_Alexei_Stukov, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Alexei_Stukov, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Alexei_Stukov, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Alexei_Stukov, TechType.Personnel_Cloaking);
        fields.get("abilities").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking)));
        fields.get("upgrades").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Alexei_Stukov, UpgradeType.Terran_Infantry_Armor);
        fields.get("maxHitPoints").set(UnitType.Hero_Alexei_Stukov, 250);
        fields.get("maxShields").set(UnitType.Hero_Alexei_Stukov, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Alexei_Stukov, 250);
        fields.get("armor").set(UnitType.Hero_Alexei_Stukov, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Alexei_Stukov, 200);
        fields.get("gasPrice").set(UnitType.Hero_Alexei_Stukov, 75);
        fields.get("buildTime").set(UnitType.Hero_Alexei_Stukov, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Alexei_Stukov, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Alexei_Stukov, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Alexei_Stukov, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Alexei_Stukov, 0);
        fields.get("buildScore").set(UnitType.Hero_Alexei_Stukov, 0);
        fields.get("destroyScore").set(UnitType.Hero_Alexei_Stukov, 700);
        fields.get("size").set(UnitType.Hero_Alexei_Stukov, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Alexei_Stukov, 1);
        fields.get("tileHeight").set(UnitType.Hero_Alexei_Stukov, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Alexei_Stukov, 7);
        fields.get("dimensionUp").set(UnitType.Hero_Alexei_Stukov, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Alexei_Stukov, 7);
        fields.get("dimensionDown").set(UnitType.Hero_Alexei_Stukov, 11);
        fields.get("width").set(UnitType.Hero_Alexei_Stukov, 15);
        fields.get("height").set(UnitType.Hero_Alexei_Stukov, 22);
        fields.get("seekRange").set(UnitType.Hero_Alexei_Stukov, 0);
        fields.get("sightRange").set(UnitType.Hero_Alexei_Stukov, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Alexei_Stukov, WeaponType.C_10_Canister_Rifle_Alexei_Stukov);
        fields.get("maxGroundHits").set(UnitType.Hero_Alexei_Stukov, 1);
        fields.get("airWeapon").set(UnitType.Hero_Alexei_Stukov, WeaponType.C_10_Canister_Rifle_Alexei_Stukov);
        fields.get("maxAirHits").set(UnitType.Hero_Alexei_Stukov, 1);
        fields.get("topSpeed").set(UnitType.Hero_Alexei_Stukov, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Alexei_Stukov, 1);
        fields.get("haltDistance").set(UnitType.Hero_Alexei_Stukov, 1);
        fields.get("turnRadius").set(UnitType.Hero_Alexei_Stukov, 40);
        fields.get("canProduce").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("canAttack").set(UnitType.Hero_Alexei_Stukov, true);
        fields.get("canMove").set(UnitType.Hero_Alexei_Stukov, true);
        fields.get("isFlyer").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Alexei_Stukov, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isInvincible").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isOrganic").set(UnitType.Hero_Alexei_Stukov, true);
        fields.get("isMechanical").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isRobotic").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isDetector").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isRefinery").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isWorker").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("requiresPsi").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("requiresCreep").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isBurrowable").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isCloakable").set(UnitType.Hero_Alexei_Stukov, true);
        fields.get("isBuilding").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isAddon").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isNeutral").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isHero").set(UnitType.Hero_Alexei_Stukov, true);
        fields.get("isPowerup").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isBeacon").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isSpell").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("producesCreep").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("producesLarva").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isMineralField").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("isCritter").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Alexei_Stukov, false);
        fields.get("researchesWhat").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Map_Revealer() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Map_Revealer, 101);
        fields.get("race").set(UnitType.Special_Map_Revealer, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Map_Revealer, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Map_Revealer, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Map_Revealer, TechType.None);
        fields.get("abilities").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Map_Revealer, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Map_Revealer, 1);
        fields.get("maxShields").set(UnitType.Special_Map_Revealer, 0);
        fields.get("maxEnergy").set(UnitType.Special_Map_Revealer, 0);
        fields.get("armor").set(UnitType.Special_Map_Revealer, 0);
        fields.get("mineralPrice").set(UnitType.Special_Map_Revealer, 0);
        fields.get("gasPrice").set(UnitType.Special_Map_Revealer, 0);
        fields.get("buildTime").set(UnitType.Special_Map_Revealer, 1);
        fields.get("supplyRequired").set(UnitType.Special_Map_Revealer, 0);
        fields.get("supplyProvided").set(UnitType.Special_Map_Revealer, 0);
        fields.get("spaceRequired").set(UnitType.Special_Map_Revealer, 255);
        fields.get("spaceProvided").set(UnitType.Special_Map_Revealer, 0);
        fields.get("buildScore").set(UnitType.Special_Map_Revealer, 0);
        fields.get("destroyScore").set(UnitType.Special_Map_Revealer, 0);
        fields.get("size").set(UnitType.Special_Map_Revealer, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Map_Revealer, 1);
        fields.get("tileHeight").set(UnitType.Special_Map_Revealer, 1);
        fields.get("dimensionLeft").set(UnitType.Special_Map_Revealer, 13);
        fields.get("dimensionUp").set(UnitType.Special_Map_Revealer, 13);
        fields.get("dimensionRight").set(UnitType.Special_Map_Revealer, 13);
        fields.get("dimensionDown").set(UnitType.Special_Map_Revealer, 17);
        fields.get("width").set(UnitType.Special_Map_Revealer, 27);
        fields.get("height").set(UnitType.Special_Map_Revealer, 31);
        fields.get("seekRange").set(UnitType.Special_Map_Revealer, 0);
        fields.get("sightRange").set(UnitType.Special_Map_Revealer, 320);
        fields.get("groundWeapon").set(UnitType.Special_Map_Revealer, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Map_Revealer, 0);
        fields.get("airWeapon").set(UnitType.Special_Map_Revealer, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Map_Revealer, 0);
        fields.get("topSpeed").set(UnitType.Special_Map_Revealer, 0.0);
        fields.get("acceleration").set(UnitType.Special_Map_Revealer, 0);
        fields.get("haltDistance").set(UnitType.Special_Map_Revealer, 0);
        fields.get("turnRadius").set(UnitType.Special_Map_Revealer, 0);
        fields.get("canProduce").set(UnitType.Special_Map_Revealer, false);
        fields.get("canAttack").set(UnitType.Special_Map_Revealer, false);
        fields.get("canMove").set(UnitType.Special_Map_Revealer, false);
        fields.get("isFlyer").set(UnitType.Special_Map_Revealer, true);
        fields.get("regeneratesHP").set(UnitType.Special_Map_Revealer, false);
        fields.get("isSpellcaster").set(UnitType.Special_Map_Revealer, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Map_Revealer, false);
        fields.get("isInvincible").set(UnitType.Special_Map_Revealer, false);
        fields.get("isOrganic").set(UnitType.Special_Map_Revealer, false);
        fields.get("isMechanical").set(UnitType.Special_Map_Revealer, false);
        fields.get("isRobotic").set(UnitType.Special_Map_Revealer, false);
        fields.get("isDetector").set(UnitType.Special_Map_Revealer, false);
        fields.get("isResourceContainer").set(UnitType.Special_Map_Revealer, false);
        fields.get("isResourceDepot").set(UnitType.Special_Map_Revealer, false);
        fields.get("isRefinery").set(UnitType.Special_Map_Revealer, false);
        fields.get("isWorker").set(UnitType.Special_Map_Revealer, false);
        fields.get("requiresPsi").set(UnitType.Special_Map_Revealer, false);
        fields.get("requiresCreep").set(UnitType.Special_Map_Revealer, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Map_Revealer, false);
        fields.get("isBurrowable").set(UnitType.Special_Map_Revealer, false);
        fields.get("isCloakable").set(UnitType.Special_Map_Revealer, false);
        fields.get("isBuilding").set(UnitType.Special_Map_Revealer, false);
        fields.get("isAddon").set(UnitType.Special_Map_Revealer, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Map_Revealer, false);
        fields.get("isNeutral").set(UnitType.Special_Map_Revealer, false);
        fields.get("isHero").set(UnitType.Special_Map_Revealer, false);
        fields.get("isPowerup").set(UnitType.Special_Map_Revealer, false);
        fields.get("isBeacon").set(UnitType.Special_Map_Revealer, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Map_Revealer, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Map_Revealer, false);
        fields.get("isSpell").set(UnitType.Special_Map_Revealer, false);
        fields.get("producesCreep").set(UnitType.Special_Map_Revealer, false);
        fields.get("producesLarva").set(UnitType.Special_Map_Revealer, false);
        fields.get("isMineralField").set(UnitType.Special_Map_Revealer, false);
        fields.get("isCritter").set(UnitType.Special_Map_Revealer, false);
        fields.get("canBuildAddon").set(UnitType.Special_Map_Revealer, false);
        fields.get("researchesWhat").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Gerard_DuGalle() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Gerard_DuGalle, 102);
        fields.get("race").set(UnitType.Hero_Gerard_DuGalle, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Hero_Gerard_DuGalle, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Gerard_DuGalle, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Gerard_DuGalle, TechType.None);
        fields.get("abilities").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
        fields.get("upgrades").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Gerard_DuGalle, UpgradeType.Terran_Ship_Plating);
        fields.get("maxHitPoints").set(UnitType.Hero_Gerard_DuGalle, 700);
        fields.get("maxShields").set(UnitType.Hero_Gerard_DuGalle, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Gerard_DuGalle, 250);
        fields.get("armor").set(UnitType.Hero_Gerard_DuGalle, 4);
        fields.get("mineralPrice").set(UnitType.Hero_Gerard_DuGalle, 800);
        fields.get("gasPrice").set(UnitType.Hero_Gerard_DuGalle, 600);
        fields.get("buildTime").set(UnitType.Hero_Gerard_DuGalle, 4800);
        fields.get("supplyRequired").set(UnitType.Hero_Gerard_DuGalle, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Gerard_DuGalle, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Gerard_DuGalle, 255);
        fields.get("spaceProvided").set(UnitType.Hero_Gerard_DuGalle, 0);
        fields.get("buildScore").set(UnitType.Hero_Gerard_DuGalle, 0);
        fields.get("destroyScore").set(UnitType.Hero_Gerard_DuGalle, 4800);
        fields.get("size").set(UnitType.Hero_Gerard_DuGalle, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Hero_Gerard_DuGalle, 2);
        fields.get("tileHeight").set(UnitType.Hero_Gerard_DuGalle, 2);
        fields.get("dimensionLeft").set(UnitType.Hero_Gerard_DuGalle, 37);
        fields.get("dimensionUp").set(UnitType.Hero_Gerard_DuGalle, 29);
        fields.get("dimensionRight").set(UnitType.Hero_Gerard_DuGalle, 37);
        fields.get("dimensionDown").set(UnitType.Hero_Gerard_DuGalle, 29);
        fields.get("width").set(UnitType.Hero_Gerard_DuGalle, 75);
        fields.get("height").set(UnitType.Hero_Gerard_DuGalle, 59);
        fields.get("seekRange").set(UnitType.Hero_Gerard_DuGalle, 0);
        fields.get("sightRange").set(UnitType.Hero_Gerard_DuGalle, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Gerard_DuGalle, WeaponType.ATS_Laser_Battery_Hero);
        fields.get("maxGroundHits").set(UnitType.Hero_Gerard_DuGalle, 1);
        fields.get("airWeapon").set(UnitType.Hero_Gerard_DuGalle, WeaponType.ATA_Laser_Battery_Hero);
        fields.get("maxAirHits").set(UnitType.Hero_Gerard_DuGalle, 1);
        fields.get("topSpeed").set(UnitType.Hero_Gerard_DuGalle, 2.5);
        fields.get("acceleration").set(UnitType.Hero_Gerard_DuGalle, 27);
        fields.get("haltDistance").set(UnitType.Hero_Gerard_DuGalle, 7585);
        fields.get("turnRadius").set(UnitType.Hero_Gerard_DuGalle, 20);
        fields.get("canProduce").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("canAttack").set(UnitType.Hero_Gerard_DuGalle, true);
        fields.get("canMove").set(UnitType.Hero_Gerard_DuGalle, true);
        fields.get("isFlyer").set(UnitType.Hero_Gerard_DuGalle, true);
        fields.get("regeneratesHP").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isSpellcaster").set(UnitType.Hero_Gerard_DuGalle, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isInvincible").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isOrganic").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isMechanical").set(UnitType.Hero_Gerard_DuGalle, true);
        fields.get("isRobotic").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isDetector").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isRefinery").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isWorker").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("requiresPsi").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("requiresCreep").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isBurrowable").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isCloakable").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isBuilding").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isAddon").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isNeutral").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isHero").set(UnitType.Hero_Gerard_DuGalle, true);
        fields.get("isPowerup").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isBeacon").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isSpell").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("producesCreep").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("producesLarva").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isMineralField").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("isCritter").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Gerard_DuGalle, false);
        fields.get("researchesWhat").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Lurker() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Lurker, 103);
        fields.get("race").set(UnitType.Zerg_Lurker, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Lurker, new Pair(UnitType.Zerg_Hydralisk, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList(UnitType.Zerg_Hydralisk)));
        fields.get("requiredTech").set(UnitType.Zerg_Lurker, TechType.Lurker_Aspect);
        fields.get("cloakingTech").set(UnitType.Zerg_Lurker, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgrades").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList(UpgradeType.Zerg_Missile_Attacks, UpgradeType.Zerg_Carapace)));
        fields.get("armorUpgrade").set(UnitType.Zerg_Lurker, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Zerg_Lurker, 125);
        fields.get("maxShields").set(UnitType.Zerg_Lurker, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Lurker, 0);
        fields.get("armor").set(UnitType.Zerg_Lurker, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Lurker, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Lurker, 100);
        fields.get("buildTime").set(UnitType.Zerg_Lurker, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Lurker, 4);
        fields.get("supplyProvided").set(UnitType.Zerg_Lurker, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Lurker, 4);
        fields.get("spaceProvided").set(UnitType.Zerg_Lurker, 0);
        fields.get("buildScore").set(UnitType.Zerg_Lurker, 250);
        fields.get("destroyScore").set(UnitType.Zerg_Lurker, 500);
        fields.get("size").set(UnitType.Zerg_Lurker, UnitSizeType.Medium);
        fields.get("tileWidth").set(UnitType.Zerg_Lurker, 1);
        fields.get("tileHeight").set(UnitType.Zerg_Lurker, 1);
        fields.get("dimensionLeft").set(UnitType.Zerg_Lurker, 15);
        fields.get("dimensionUp").set(UnitType.Zerg_Lurker, 15);
        fields.get("dimensionRight").set(UnitType.Zerg_Lurker, 16);
        fields.get("dimensionDown").set(UnitType.Zerg_Lurker, 16);
        fields.get("width").set(UnitType.Zerg_Lurker, 32);
        fields.get("height").set(UnitType.Zerg_Lurker, 32);
        fields.get("seekRange").set(UnitType.Zerg_Lurker, 192);
        fields.get("sightRange").set(UnitType.Zerg_Lurker, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Lurker, WeaponType.Subterranean_Spines);
        fields.get("maxGroundHits").set(UnitType.Zerg_Lurker, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Lurker, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Lurker, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Lurker, 5.82);
        fields.get("acceleration").set(UnitType.Zerg_Lurker, 1);
        fields.get("haltDistance").set(UnitType.Zerg_Lurker, 1);
        fields.get("turnRadius").set(UnitType.Zerg_Lurker, 40);
        fields.get("canProduce").set(UnitType.Zerg_Lurker, false);
        fields.get("canAttack").set(UnitType.Zerg_Lurker, true);
        fields.get("canMove").set(UnitType.Zerg_Lurker, true);
        fields.get("isFlyer").set(UnitType.Zerg_Lurker, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Lurker, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Lurker, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Lurker, false);
        fields.get("isInvincible").set(UnitType.Zerg_Lurker, false);
        fields.get("isOrganic").set(UnitType.Zerg_Lurker, true);
        fields.get("isMechanical").set(UnitType.Zerg_Lurker, false);
        fields.get("isRobotic").set(UnitType.Zerg_Lurker, false);
        fields.get("isDetector").set(UnitType.Zerg_Lurker, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Lurker, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Lurker, false);
        fields.get("isRefinery").set(UnitType.Zerg_Lurker, false);
        fields.get("isWorker").set(UnitType.Zerg_Lurker, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Lurker, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Lurker, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Lurker, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Lurker, true);
        fields.get("isCloakable").set(UnitType.Zerg_Lurker, false);
        fields.get("isBuilding").set(UnitType.Zerg_Lurker, false);
        fields.get("isAddon").set(UnitType.Zerg_Lurker, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Lurker, false);
        fields.get("isNeutral").set(UnitType.Zerg_Lurker, false);
        fields.get("isHero").set(UnitType.Zerg_Lurker, false);
        fields.get("isPowerup").set(UnitType.Zerg_Lurker, false);
        fields.get("isBeacon").set(UnitType.Zerg_Lurker, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Lurker, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Lurker, false);
        fields.get("isSpell").set(UnitType.Zerg_Lurker, false);
        fields.get("producesCreep").set(UnitType.Zerg_Lurker, false);
        fields.get("producesLarva").set(UnitType.Zerg_Lurker, false);
        fields.get("isMineralField").set(UnitType.Zerg_Lurker, false);
        fields.get("isCritter").set(UnitType.Zerg_Lurker, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Lurker, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Hero_Infested_Duran() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Hero_Infested_Duran, 104);
        fields.get("race").set(UnitType.Hero_Infested_Duran, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Hero_Infested_Duran, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Hero_Infested_Duran, TechType.None);
        fields.get("cloakingTech").set(UnitType.Hero_Infested_Duran, TechType.Personnel_Cloaking);
        fields.get("abilities").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking, TechType.Consume)));
        fields.get("upgrades").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Hero_Infested_Duran, UpgradeType.Zerg_Carapace);
        fields.get("maxHitPoints").set(UnitType.Hero_Infested_Duran, 300);
        fields.get("maxShields").set(UnitType.Hero_Infested_Duran, 0);
        fields.get("maxEnergy").set(UnitType.Hero_Infested_Duran, 250);
        fields.get("armor").set(UnitType.Hero_Infested_Duran, 3);
        fields.get("mineralPrice").set(UnitType.Hero_Infested_Duran, 200);
        fields.get("gasPrice").set(UnitType.Hero_Infested_Duran, 75);
        fields.get("buildTime").set(UnitType.Hero_Infested_Duran, 1500);
        fields.get("supplyRequired").set(UnitType.Hero_Infested_Duran, 0);
        fields.get("supplyProvided").set(UnitType.Hero_Infested_Duran, 0);
        fields.get("spaceRequired").set(UnitType.Hero_Infested_Duran, 1);
        fields.get("spaceProvided").set(UnitType.Hero_Infested_Duran, 0);
        fields.get("buildScore").set(UnitType.Hero_Infested_Duran, 0);
        fields.get("destroyScore").set(UnitType.Hero_Infested_Duran, 700);
        fields.get("size").set(UnitType.Hero_Infested_Duran, UnitSizeType.Small);
        fields.get("tileWidth").set(UnitType.Hero_Infested_Duran, 1);
        fields.get("tileHeight").set(UnitType.Hero_Infested_Duran, 1);
        fields.get("dimensionLeft").set(UnitType.Hero_Infested_Duran, 7);
        fields.get("dimensionUp").set(UnitType.Hero_Infested_Duran, 10);
        fields.get("dimensionRight").set(UnitType.Hero_Infested_Duran, 7);
        fields.get("dimensionDown").set(UnitType.Hero_Infested_Duran, 11);
        fields.get("width").set(UnitType.Hero_Infested_Duran, 15);
        fields.get("height").set(UnitType.Hero_Infested_Duran, 22);
        fields.get("seekRange").set(UnitType.Hero_Infested_Duran, 0);
        fields.get("sightRange").set(UnitType.Hero_Infested_Duran, 352);
        fields.get("groundWeapon").set(UnitType.Hero_Infested_Duran, WeaponType.C_10_Canister_Rifle_Infested_Duran);
        fields.get("maxGroundHits").set(UnitType.Hero_Infested_Duran, 1);
        fields.get("airWeapon").set(UnitType.Hero_Infested_Duran, WeaponType.C_10_Canister_Rifle_Infested_Duran);
        fields.get("maxAirHits").set(UnitType.Hero_Infested_Duran, 1);
        fields.get("topSpeed").set(UnitType.Hero_Infested_Duran, 4.0);
        fields.get("acceleration").set(UnitType.Hero_Infested_Duran, 1);
        fields.get("haltDistance").set(UnitType.Hero_Infested_Duran, 1);
        fields.get("turnRadius").set(UnitType.Hero_Infested_Duran, 40);
        fields.get("canProduce").set(UnitType.Hero_Infested_Duran, false);
        fields.get("canAttack").set(UnitType.Hero_Infested_Duran, true);
        fields.get("canMove").set(UnitType.Hero_Infested_Duran, true);
        fields.get("isFlyer").set(UnitType.Hero_Infested_Duran, false);
        fields.get("regeneratesHP").set(UnitType.Hero_Infested_Duran, true);
        fields.get("isSpellcaster").set(UnitType.Hero_Infested_Duran, true);
        fields.get("hasPermanentCloak").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isInvincible").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isOrganic").set(UnitType.Hero_Infested_Duran, true);
        fields.get("isMechanical").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isRobotic").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isDetector").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isResourceContainer").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isResourceDepot").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isRefinery").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isWorker").set(UnitType.Hero_Infested_Duran, false);
        fields.get("requiresPsi").set(UnitType.Hero_Infested_Duran, false);
        fields.get("requiresCreep").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isBurrowable").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isCloakable").set(UnitType.Hero_Infested_Duran, true);
        fields.get("isBuilding").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isAddon").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isFlyingBuilding").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isNeutral").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isHero").set(UnitType.Hero_Infested_Duran, true);
        fields.get("isPowerup").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isBeacon").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isFlagBeacon").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isSpecialBuilding").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isSpell").set(UnitType.Hero_Infested_Duran, false);
        fields.get("producesCreep").set(UnitType.Hero_Infested_Duran, false);
        fields.get("producesLarva").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isMineralField").set(UnitType.Hero_Infested_Duran, false);
        fields.get("isCritter").set(UnitType.Hero_Infested_Duran, false);
        fields.get("canBuildAddon").set(UnitType.Hero_Infested_Duran, false);
        fields.get("researchesWhat").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Spell_Disruption_Web() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Spell_Disruption_Web, 105);
        fields.get("race").set(UnitType.Spell_Disruption_Web, Race.None);
        fields.get("whatBuilds").set(UnitType.Spell_Disruption_Web, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Spell_Disruption_Web, TechType.None);
        fields.get("cloakingTech").set(UnitType.Spell_Disruption_Web, TechType.None);
        fields.get("abilities").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Spell_Disruption_Web, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Spell_Disruption_Web, 800);
        fields.get("maxShields").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("maxEnergy").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("armor").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("mineralPrice").set(UnitType.Spell_Disruption_Web, 250);
        fields.get("gasPrice").set(UnitType.Spell_Disruption_Web, 250);
        fields.get("buildTime").set(UnitType.Spell_Disruption_Web, 2400);
        fields.get("supplyRequired").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("supplyProvided").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("spaceRequired").set(UnitType.Spell_Disruption_Web, 255);
        fields.get("spaceProvided").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("buildScore").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("destroyScore").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("size").set(UnitType.Spell_Disruption_Web, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Spell_Disruption_Web, 4);
        fields.get("tileHeight").set(UnitType.Spell_Disruption_Web, 3);
        fields.get("dimensionLeft").set(UnitType.Spell_Disruption_Web, 60);
        fields.get("dimensionUp").set(UnitType.Spell_Disruption_Web, 40);
        fields.get("dimensionRight").set(UnitType.Spell_Disruption_Web, 59);
        fields.get("dimensionDown").set(UnitType.Spell_Disruption_Web, 39);
        fields.get("width").set(UnitType.Spell_Disruption_Web, 120);
        fields.get("height").set(UnitType.Spell_Disruption_Web, 80);
        fields.get("seekRange").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("sightRange").set(UnitType.Spell_Disruption_Web, 256);
        fields.get("groundWeapon").set(UnitType.Spell_Disruption_Web, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("airWeapon").set(UnitType.Spell_Disruption_Web, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("topSpeed").set(UnitType.Spell_Disruption_Web, 0.0);
        fields.get("acceleration").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("haltDistance").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("turnRadius").set(UnitType.Spell_Disruption_Web, 0);
        fields.get("canProduce").set(UnitType.Spell_Disruption_Web, false);
        fields.get("canAttack").set(UnitType.Spell_Disruption_Web, false);
        fields.get("canMove").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isFlyer").set(UnitType.Spell_Disruption_Web, false);
        fields.get("regeneratesHP").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isSpellcaster").set(UnitType.Spell_Disruption_Web, false);
        fields.get("hasPermanentCloak").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isInvincible").set(UnitType.Spell_Disruption_Web, true);
        fields.get("isOrganic").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isMechanical").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isRobotic").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isDetector").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isResourceContainer").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isResourceDepot").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isRefinery").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isWorker").set(UnitType.Spell_Disruption_Web, false);
        fields.get("requiresPsi").set(UnitType.Spell_Disruption_Web, false);
        fields.get("requiresCreep").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isBurrowable").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isCloakable").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isBuilding").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isAddon").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isFlyingBuilding").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isNeutral").set(UnitType.Spell_Disruption_Web, true);
        fields.get("isHero").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isPowerup").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isBeacon").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isFlagBeacon").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isSpecialBuilding").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isSpell").set(UnitType.Spell_Disruption_Web, true);
        fields.get("producesCreep").set(UnitType.Spell_Disruption_Web, false);
        fields.get("producesLarva").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isMineralField").set(UnitType.Spell_Disruption_Web, false);
        fields.get("isCritter").set(UnitType.Spell_Disruption_Web, false);
        fields.get("canBuildAddon").set(UnitType.Spell_Disruption_Web, false);
        fields.get("researchesWhat").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Command_Center() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Command_Center, 106);
        fields.get("race").set(UnitType.Terran_Command_Center, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Command_Center, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList(UnitType.Terran_SCV)));
        fields.get("requiredTech").set(UnitType.Terran_Command_Center, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Command_Center, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Command_Center, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Command_Center, 1500);
        fields.get("maxShields").set(UnitType.Terran_Command_Center, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Command_Center, 0);
        fields.get("armor").set(UnitType.Terran_Command_Center, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Command_Center, 400);
        fields.get("gasPrice").set(UnitType.Terran_Command_Center, 0);
        fields.get("buildTime").set(UnitType.Terran_Command_Center, 1800);
        fields.get("supplyRequired").set(UnitType.Terran_Command_Center, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Command_Center, 20);
        fields.get("spaceRequired").set(UnitType.Terran_Command_Center, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Command_Center, 0);
        fields.get("buildScore").set(UnitType.Terran_Command_Center, 400);
        fields.get("destroyScore").set(UnitType.Terran_Command_Center, 1200);
        fields.get("size").set(UnitType.Terran_Command_Center, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Command_Center, 4);
        fields.get("tileHeight").set(UnitType.Terran_Command_Center, 3);
        fields.get("dimensionLeft").set(UnitType.Terran_Command_Center, 58);
        fields.get("dimensionUp").set(UnitType.Terran_Command_Center, 41);
        fields.get("dimensionRight").set(UnitType.Terran_Command_Center, 58);
        fields.get("dimensionDown").set(UnitType.Terran_Command_Center, 41);
        fields.get("width").set(UnitType.Terran_Command_Center, 117);
        fields.get("height").set(UnitType.Terran_Command_Center, 83);
        fields.get("seekRange").set(UnitType.Terran_Command_Center, 0);
        fields.get("sightRange").set(UnitType.Terran_Command_Center, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Command_Center, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Command_Center, 0);
        fields.get("airWeapon").set(UnitType.Terran_Command_Center, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Command_Center, 0);
        fields.get("topSpeed").set(UnitType.Terran_Command_Center, 1.0);
        fields.get("acceleration").set(UnitType.Terran_Command_Center, 33);
        fields.get("haltDistance").set(UnitType.Terran_Command_Center, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Command_Center, 27);
        fields.get("canProduce").set(UnitType.Terran_Command_Center, true);
        fields.get("canAttack").set(UnitType.Terran_Command_Center, false);
        fields.get("canMove").set(UnitType.Terran_Command_Center, false);
        fields.get("isFlyer").set(UnitType.Terran_Command_Center, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Command_Center, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Command_Center, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Command_Center, false);
        fields.get("isInvincible").set(UnitType.Terran_Command_Center, false);
        fields.get("isOrganic").set(UnitType.Terran_Command_Center, false);
        fields.get("isMechanical").set(UnitType.Terran_Command_Center, true);
        fields.get("isRobotic").set(UnitType.Terran_Command_Center, false);
        fields.get("isDetector").set(UnitType.Terran_Command_Center, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Command_Center, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Command_Center, true);
        fields.get("isRefinery").set(UnitType.Terran_Command_Center, false);
        fields.get("isWorker").set(UnitType.Terran_Command_Center, false);
        fields.get("requiresPsi").set(UnitType.Terran_Command_Center, false);
        fields.get("requiresCreep").set(UnitType.Terran_Command_Center, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Command_Center, false);
        fields.get("isBurrowable").set(UnitType.Terran_Command_Center, false);
        fields.get("isCloakable").set(UnitType.Terran_Command_Center, false);
        fields.get("isBuilding").set(UnitType.Terran_Command_Center, true);
        fields.get("isAddon").set(UnitType.Terran_Command_Center, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Command_Center, true);
        fields.get("isNeutral").set(UnitType.Terran_Command_Center, false);
        fields.get("isHero").set(UnitType.Terran_Command_Center, false);
        fields.get("isPowerup").set(UnitType.Terran_Command_Center, false);
        fields.get("isBeacon").set(UnitType.Terran_Command_Center, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Command_Center, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Command_Center, false);
        fields.get("isSpell").set(UnitType.Terran_Command_Center, false);
        fields.get("producesCreep").set(UnitType.Terran_Command_Center, false);
        fields.get("producesLarva").set(UnitType.Terran_Command_Center, false);
        fields.get("isMineralField").set(UnitType.Terran_Command_Center, false);
        fields.get("isCritter").set(UnitType.Terran_Command_Center, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Command_Center, true);
        fields.get("researchesWhat").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Comsat_Station() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Comsat_Station, 107);
        fields.get("race").set(UnitType.Terran_Comsat_Station, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Comsat_Station, new Pair(UnitType.Terran_Command_Center, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList(UnitType.Terran_Command_Center, UnitType.Terran_Academy)));
        fields.get("requiredTech").set(UnitType.Terran_Comsat_Station, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Comsat_Station, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList(TechType.Scanner_Sweep)));
        fields.get("upgrades").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Comsat_Station, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Comsat_Station, 500);
        fields.get("maxShields").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Comsat_Station, 200);
        fields.get("armor").set(UnitType.Terran_Comsat_Station, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Comsat_Station, 50);
        fields.get("gasPrice").set(UnitType.Terran_Comsat_Station, 50);
        fields.get("buildTime").set(UnitType.Terran_Comsat_Station, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Comsat_Station, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("buildScore").set(UnitType.Terran_Comsat_Station, 75);
        fields.get("destroyScore").set(UnitType.Terran_Comsat_Station, 225);
        fields.get("size").set(UnitType.Terran_Comsat_Station, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Comsat_Station, 2);
        fields.get("tileHeight").set(UnitType.Terran_Comsat_Station, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Comsat_Station, 37);
        fields.get("dimensionUp").set(UnitType.Terran_Comsat_Station, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Comsat_Station, 31);
        fields.get("dimensionDown").set(UnitType.Terran_Comsat_Station, 25);
        fields.get("width").set(UnitType.Terran_Comsat_Station, 69);
        fields.get("height").set(UnitType.Terran_Comsat_Station, 42);
        fields.get("seekRange").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("sightRange").set(UnitType.Terran_Comsat_Station, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Comsat_Station, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("airWeapon").set(UnitType.Terran_Comsat_Station, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("topSpeed").set(UnitType.Terran_Comsat_Station, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("haltDistance").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("turnRadius").set(UnitType.Terran_Comsat_Station, 0);
        fields.get("canProduce").set(UnitType.Terran_Comsat_Station, false);
        fields.get("canAttack").set(UnitType.Terran_Comsat_Station, false);
        fields.get("canMove").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isFlyer").set(UnitType.Terran_Comsat_Station, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Comsat_Station, true);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isInvincible").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isOrganic").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isMechanical").set(UnitType.Terran_Comsat_Station, true);
        fields.get("isRobotic").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isDetector").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isRefinery").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isWorker").set(UnitType.Terran_Comsat_Station, false);
        fields.get("requiresPsi").set(UnitType.Terran_Comsat_Station, false);
        fields.get("requiresCreep").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isBurrowable").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isCloakable").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isBuilding").set(UnitType.Terran_Comsat_Station, true);
        fields.get("isAddon").set(UnitType.Terran_Comsat_Station, true);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isNeutral").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isHero").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isPowerup").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isBeacon").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isSpell").set(UnitType.Terran_Comsat_Station, false);
        fields.get("producesCreep").set(UnitType.Terran_Comsat_Station, false);
        fields.get("producesLarva").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isMineralField").set(UnitType.Terran_Comsat_Station, false);
        fields.get("isCritter").set(UnitType.Terran_Comsat_Station, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Comsat_Station, false);
        fields.get("researchesWhat").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Nuclear_Silo() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Nuclear_Silo, 108);
        fields.get("race").set(UnitType.Terran_Nuclear_Silo, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Nuclear_Silo, new Pair(UnitType.Terran_Command_Center, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList(UnitType.Terran_Command_Center, UnitType.Terran_Science_Facility, UnitType.Terran_Covert_Ops)));
        fields.get("requiredTech").set(UnitType.Terran_Nuclear_Silo, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Nuclear_Silo, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Nuclear_Silo, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Nuclear_Silo, 600);
        fields.get("maxShields").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("armor").set(UnitType.Terran_Nuclear_Silo, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Nuclear_Silo, 100);
        fields.get("gasPrice").set(UnitType.Terran_Nuclear_Silo, 100);
        fields.get("buildTime").set(UnitType.Terran_Nuclear_Silo, 1200);
        fields.get("supplyRequired").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Nuclear_Silo, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("buildScore").set(UnitType.Terran_Nuclear_Silo, 75);
        fields.get("destroyScore").set(UnitType.Terran_Nuclear_Silo, 225);
        fields.get("size").set(UnitType.Terran_Nuclear_Silo, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Nuclear_Silo, 2);
        fields.get("tileHeight").set(UnitType.Terran_Nuclear_Silo, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Nuclear_Silo, 37);
        fields.get("dimensionUp").set(UnitType.Terran_Nuclear_Silo, 16);
        fields.get("dimensionRight").set(UnitType.Terran_Nuclear_Silo, 31);
        fields.get("dimensionDown").set(UnitType.Terran_Nuclear_Silo, 25);
        fields.get("width").set(UnitType.Terran_Nuclear_Silo, 69);
        fields.get("height").set(UnitType.Terran_Nuclear_Silo, 42);
        fields.get("seekRange").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("sightRange").set(UnitType.Terran_Nuclear_Silo, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Nuclear_Silo, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("airWeapon").set(UnitType.Terran_Nuclear_Silo, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("topSpeed").set(UnitType.Terran_Nuclear_Silo, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("haltDistance").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("turnRadius").set(UnitType.Terran_Nuclear_Silo, 0);
        fields.get("canProduce").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("canAttack").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("canMove").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isFlyer").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isInvincible").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isOrganic").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isMechanical").set(UnitType.Terran_Nuclear_Silo, true);
        fields.get("isRobotic").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isDetector").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isRefinery").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isWorker").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("requiresPsi").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("requiresCreep").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isBurrowable").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isCloakable").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isBuilding").set(UnitType.Terran_Nuclear_Silo, true);
        fields.get("isAddon").set(UnitType.Terran_Nuclear_Silo, true);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isNeutral").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isHero").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isPowerup").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isBeacon").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isSpell").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("producesCreep").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("producesLarva").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isMineralField").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("isCritter").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Nuclear_Silo, false);
        fields.get("researchesWhat").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Supply_Depot() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Supply_Depot, 109);
        fields.get("race").set(UnitType.Terran_Supply_Depot, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Supply_Depot, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList(UnitType.Terran_SCV)));
        fields.get("requiredTech").set(UnitType.Terran_Supply_Depot, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Supply_Depot, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Supply_Depot, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Supply_Depot, 500);
        fields.get("maxShields").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("armor").set(UnitType.Terran_Supply_Depot, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Supply_Depot, 100);
        fields.get("gasPrice").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("buildTime").set(UnitType.Terran_Supply_Depot, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Supply_Depot, 16);
        fields.get("spaceRequired").set(UnitType.Terran_Supply_Depot, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("buildScore").set(UnitType.Terran_Supply_Depot, 50);
        fields.get("destroyScore").set(UnitType.Terran_Supply_Depot, 150);
        fields.get("size").set(UnitType.Terran_Supply_Depot, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Supply_Depot, 3);
        fields.get("tileHeight").set(UnitType.Terran_Supply_Depot, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Supply_Depot, 38);
        fields.get("dimensionUp").set(UnitType.Terran_Supply_Depot, 22);
        fields.get("dimensionRight").set(UnitType.Terran_Supply_Depot, 38);
        fields.get("dimensionDown").set(UnitType.Terran_Supply_Depot, 26);
        fields.get("width").set(UnitType.Terran_Supply_Depot, 77);
        fields.get("height").set(UnitType.Terran_Supply_Depot, 49);
        fields.get("seekRange").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("sightRange").set(UnitType.Terran_Supply_Depot, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Supply_Depot, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("airWeapon").set(UnitType.Terran_Supply_Depot, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("topSpeed").set(UnitType.Terran_Supply_Depot, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("haltDistance").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("turnRadius").set(UnitType.Terran_Supply_Depot, 0);
        fields.get("canProduce").set(UnitType.Terran_Supply_Depot, false);
        fields.get("canAttack").set(UnitType.Terran_Supply_Depot, false);
        fields.get("canMove").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isFlyer").set(UnitType.Terran_Supply_Depot, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Supply_Depot, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isInvincible").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isOrganic").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isMechanical").set(UnitType.Terran_Supply_Depot, true);
        fields.get("isRobotic").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isDetector").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isRefinery").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isWorker").set(UnitType.Terran_Supply_Depot, false);
        fields.get("requiresPsi").set(UnitType.Terran_Supply_Depot, false);
        fields.get("requiresCreep").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isBurrowable").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isCloakable").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isBuilding").set(UnitType.Terran_Supply_Depot, true);
        fields.get("isAddon").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isNeutral").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isHero").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isPowerup").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isBeacon").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isSpell").set(UnitType.Terran_Supply_Depot, false);
        fields.get("producesCreep").set(UnitType.Terran_Supply_Depot, false);
        fields.get("producesLarva").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isMineralField").set(UnitType.Terran_Supply_Depot, false);
        fields.get("isCritter").set(UnitType.Terran_Supply_Depot, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Supply_Depot, false);
        fields.get("researchesWhat").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Refinery() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Refinery, 110);
        fields.get("race").set(UnitType.Terran_Refinery, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Refinery, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList(UnitType.Terran_SCV)));
        fields.get("requiredTech").set(UnitType.Terran_Refinery, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Refinery, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Refinery, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Refinery, 750);
        fields.get("maxShields").set(UnitType.Terran_Refinery, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Refinery, 0);
        fields.get("armor").set(UnitType.Terran_Refinery, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Refinery, 100);
        fields.get("gasPrice").set(UnitType.Terran_Refinery, 0);
        fields.get("buildTime").set(UnitType.Terran_Refinery, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Refinery, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Refinery, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Refinery, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Refinery, 0);
        fields.get("buildScore").set(UnitType.Terran_Refinery, 50);
        fields.get("destroyScore").set(UnitType.Terran_Refinery, 150);
        fields.get("size").set(UnitType.Terran_Refinery, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Refinery, 4);
        fields.get("tileHeight").set(UnitType.Terran_Refinery, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Refinery, 56);
        fields.get("dimensionUp").set(UnitType.Terran_Refinery, 32);
        fields.get("dimensionRight").set(UnitType.Terran_Refinery, 56);
        fields.get("dimensionDown").set(UnitType.Terran_Refinery, 31);
        fields.get("width").set(UnitType.Terran_Refinery, 113);
        fields.get("height").set(UnitType.Terran_Refinery, 64);
        fields.get("seekRange").set(UnitType.Terran_Refinery, 0);
        fields.get("sightRange").set(UnitType.Terran_Refinery, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Refinery, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Refinery, 0);
        fields.get("airWeapon").set(UnitType.Terran_Refinery, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Refinery, 0);
        fields.get("topSpeed").set(UnitType.Terran_Refinery, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Refinery, 33);
        fields.get("haltDistance").set(UnitType.Terran_Refinery, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Refinery, 27);
        fields.get("canProduce").set(UnitType.Terran_Refinery, false);
        fields.get("canAttack").set(UnitType.Terran_Refinery, false);
        fields.get("canMove").set(UnitType.Terran_Refinery, false);
        fields.get("isFlyer").set(UnitType.Terran_Refinery, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Refinery, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Refinery, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Refinery, false);
        fields.get("isInvincible").set(UnitType.Terran_Refinery, false);
        fields.get("isOrganic").set(UnitType.Terran_Refinery, false);
        fields.get("isMechanical").set(UnitType.Terran_Refinery, true);
        fields.get("isRobotic").set(UnitType.Terran_Refinery, false);
        fields.get("isDetector").set(UnitType.Terran_Refinery, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Refinery, true);
        fields.get("isResourceDepot").set(UnitType.Terran_Refinery, false);
        fields.get("isRefinery").set(UnitType.Terran_Refinery, true);
        fields.get("isWorker").set(UnitType.Terran_Refinery, false);
        fields.get("requiresPsi").set(UnitType.Terran_Refinery, false);
        fields.get("requiresCreep").set(UnitType.Terran_Refinery, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Refinery, false);
        fields.get("isBurrowable").set(UnitType.Terran_Refinery, false);
        fields.get("isCloakable").set(UnitType.Terran_Refinery, false);
        fields.get("isBuilding").set(UnitType.Terran_Refinery, true);
        fields.get("isAddon").set(UnitType.Terran_Refinery, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Refinery, false);
        fields.get("isNeutral").set(UnitType.Terran_Refinery, false);
        fields.get("isHero").set(UnitType.Terran_Refinery, false);
        fields.get("isPowerup").set(UnitType.Terran_Refinery, false);
        fields.get("isBeacon").set(UnitType.Terran_Refinery, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Refinery, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Refinery, false);
        fields.get("isSpell").set(UnitType.Terran_Refinery, false);
        fields.get("producesCreep").set(UnitType.Terran_Refinery, false);
        fields.get("producesLarva").set(UnitType.Terran_Refinery, false);
        fields.get("isMineralField").set(UnitType.Terran_Refinery, false);
        fields.get("isCritter").set(UnitType.Terran_Refinery, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Refinery, false);
        fields.get("researchesWhat").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Barracks() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Barracks, 111);
        fields.get("race").set(UnitType.Terran_Barracks, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Barracks, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Command_Center)));
        fields.get("requiredTech").set(UnitType.Terran_Barracks, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Barracks, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Barracks, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Barracks, 1000);
        fields.get("maxShields").set(UnitType.Terran_Barracks, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Barracks, 0);
        fields.get("armor").set(UnitType.Terran_Barracks, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Barracks, 150);
        fields.get("gasPrice").set(UnitType.Terran_Barracks, 0);
        fields.get("buildTime").set(UnitType.Terran_Barracks, 1200);
        fields.get("supplyRequired").set(UnitType.Terran_Barracks, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Barracks, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Barracks, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Barracks, 0);
        fields.get("buildScore").set(UnitType.Terran_Barracks, 75);
        fields.get("destroyScore").set(UnitType.Terran_Barracks, 225);
        fields.get("size").set(UnitType.Terran_Barracks, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Barracks, 4);
        fields.get("tileHeight").set(UnitType.Terran_Barracks, 3);
        fields.get("dimensionLeft").set(UnitType.Terran_Barracks, 48);
        fields.get("dimensionUp").set(UnitType.Terran_Barracks, 40);
        fields.get("dimensionRight").set(UnitType.Terran_Barracks, 56);
        fields.get("dimensionDown").set(UnitType.Terran_Barracks, 32);
        fields.get("width").set(UnitType.Terran_Barracks, 105);
        fields.get("height").set(UnitType.Terran_Barracks, 73);
        fields.get("seekRange").set(UnitType.Terran_Barracks, 0);
        fields.get("sightRange").set(UnitType.Terran_Barracks, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Barracks, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Barracks, 0);
        fields.get("airWeapon").set(UnitType.Terran_Barracks, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Barracks, 0);
        fields.get("topSpeed").set(UnitType.Terran_Barracks, 1.0);
        fields.get("acceleration").set(UnitType.Terran_Barracks, 33);
        fields.get("haltDistance").set(UnitType.Terran_Barracks, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Barracks, 27);
        fields.get("canProduce").set(UnitType.Terran_Barracks, true);
        fields.get("canAttack").set(UnitType.Terran_Barracks, false);
        fields.get("canMove").set(UnitType.Terran_Barracks, false);
        fields.get("isFlyer").set(UnitType.Terran_Barracks, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Barracks, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Barracks, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Barracks, false);
        fields.get("isInvincible").set(UnitType.Terran_Barracks, false);
        fields.get("isOrganic").set(UnitType.Terran_Barracks, false);
        fields.get("isMechanical").set(UnitType.Terran_Barracks, true);
        fields.get("isRobotic").set(UnitType.Terran_Barracks, false);
        fields.get("isDetector").set(UnitType.Terran_Barracks, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Barracks, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Barracks, false);
        fields.get("isRefinery").set(UnitType.Terran_Barracks, false);
        fields.get("isWorker").set(UnitType.Terran_Barracks, false);
        fields.get("requiresPsi").set(UnitType.Terran_Barracks, false);
        fields.get("requiresCreep").set(UnitType.Terran_Barracks, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Barracks, false);
        fields.get("isBurrowable").set(UnitType.Terran_Barracks, false);
        fields.get("isCloakable").set(UnitType.Terran_Barracks, false);
        fields.get("isBuilding").set(UnitType.Terran_Barracks, true);
        fields.get("isAddon").set(UnitType.Terran_Barracks, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Barracks, true);
        fields.get("isNeutral").set(UnitType.Terran_Barracks, false);
        fields.get("isHero").set(UnitType.Terran_Barracks, false);
        fields.get("isPowerup").set(UnitType.Terran_Barracks, false);
        fields.get("isBeacon").set(UnitType.Terran_Barracks, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Barracks, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Barracks, false);
        fields.get("isSpell").set(UnitType.Terran_Barracks, false);
        fields.get("producesCreep").set(UnitType.Terran_Barracks, false);
        fields.get("producesLarva").set(UnitType.Terran_Barracks, false);
        fields.get("isMineralField").set(UnitType.Terran_Barracks, false);
        fields.get("isCritter").set(UnitType.Terran_Barracks, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Barracks, false);
        fields.get("researchesWhat").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Academy() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Academy, 112);
        fields.get("race").set(UnitType.Terran_Academy, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Academy, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Barracks)));
        fields.get("requiredTech").set(UnitType.Terran_Academy, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Academy, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Academy, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Academy, 600);
        fields.get("maxShields").set(UnitType.Terran_Academy, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Academy, 0);
        fields.get("armor").set(UnitType.Terran_Academy, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Academy, 150);
        fields.get("gasPrice").set(UnitType.Terran_Academy, 0);
        fields.get("buildTime").set(UnitType.Terran_Academy, 1200);
        fields.get("supplyRequired").set(UnitType.Terran_Academy, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Academy, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Academy, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Academy, 0);
        fields.get("buildScore").set(UnitType.Terran_Academy, 100);
        fields.get("destroyScore").set(UnitType.Terran_Academy, 300);
        fields.get("size").set(UnitType.Terran_Academy, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Academy, 3);
        fields.get("tileHeight").set(UnitType.Terran_Academy, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Academy, 40);
        fields.get("dimensionUp").set(UnitType.Terran_Academy, 32);
        fields.get("dimensionRight").set(UnitType.Terran_Academy, 44);
        fields.get("dimensionDown").set(UnitType.Terran_Academy, 24);
        fields.get("width").set(UnitType.Terran_Academy, 85);
        fields.get("height").set(UnitType.Terran_Academy, 57);
        fields.get("seekRange").set(UnitType.Terran_Academy, 0);
        fields.get("sightRange").set(UnitType.Terran_Academy, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Academy, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Academy, 0);
        fields.get("airWeapon").set(UnitType.Terran_Academy, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Academy, 0);
        fields.get("topSpeed").set(UnitType.Terran_Academy, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Academy, 0);
        fields.get("haltDistance").set(UnitType.Terran_Academy, 0);
        fields.get("turnRadius").set(UnitType.Terran_Academy, 0);
        fields.get("canProduce").set(UnitType.Terran_Academy, false);
        fields.get("canAttack").set(UnitType.Terran_Academy, false);
        fields.get("canMove").set(UnitType.Terran_Academy, false);
        fields.get("isFlyer").set(UnitType.Terran_Academy, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Academy, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Academy, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Academy, false);
        fields.get("isInvincible").set(UnitType.Terran_Academy, false);
        fields.get("isOrganic").set(UnitType.Terran_Academy, false);
        fields.get("isMechanical").set(UnitType.Terran_Academy, true);
        fields.get("isRobotic").set(UnitType.Terran_Academy, false);
        fields.get("isDetector").set(UnitType.Terran_Academy, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Academy, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Academy, false);
        fields.get("isRefinery").set(UnitType.Terran_Academy, false);
        fields.get("isWorker").set(UnitType.Terran_Academy, false);
        fields.get("requiresPsi").set(UnitType.Terran_Academy, false);
        fields.get("requiresCreep").set(UnitType.Terran_Academy, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Academy, false);
        fields.get("isBurrowable").set(UnitType.Terran_Academy, false);
        fields.get("isCloakable").set(UnitType.Terran_Academy, false);
        fields.get("isBuilding").set(UnitType.Terran_Academy, true);
        fields.get("isAddon").set(UnitType.Terran_Academy, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Academy, false);
        fields.get("isNeutral").set(UnitType.Terran_Academy, false);
        fields.get("isHero").set(UnitType.Terran_Academy, false);
        fields.get("isPowerup").set(UnitType.Terran_Academy, false);
        fields.get("isBeacon").set(UnitType.Terran_Academy, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Academy, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Academy, false);
        fields.get("isSpell").set(UnitType.Terran_Academy, false);
        fields.get("producesCreep").set(UnitType.Terran_Academy, false);
        fields.get("producesLarva").set(UnitType.Terran_Academy, false);
        fields.get("isMineralField").set(UnitType.Terran_Academy, false);
        fields.get("isCritter").set(UnitType.Terran_Academy, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Academy, false);
        fields.get("researchesWhat").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList(TechType.Restoration, TechType.Stim_Packs, TechType.Optical_Flare)));
        fields.get("upgradesWhat").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList(UpgradeType.U_238_Shells, UpgradeType.Caduceus_Reactor)));
    }
    private void initializeUnitType_Terran_Factory() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Factory, 113);
        fields.get("race").set(UnitType.Terran_Factory, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Factory, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Barracks)));
        fields.get("requiredTech").set(UnitType.Terran_Factory, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Factory, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Factory, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Factory, 1250);
        fields.get("maxShields").set(UnitType.Terran_Factory, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Factory, 0);
        fields.get("armor").set(UnitType.Terran_Factory, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Factory, 200);
        fields.get("gasPrice").set(UnitType.Terran_Factory, 100);
        fields.get("buildTime").set(UnitType.Terran_Factory, 1200);
        fields.get("supplyRequired").set(UnitType.Terran_Factory, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Factory, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Factory, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Factory, 0);
        fields.get("buildScore").set(UnitType.Terran_Factory, 200);
        fields.get("destroyScore").set(UnitType.Terran_Factory, 600);
        fields.get("size").set(UnitType.Terran_Factory, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Factory, 4);
        fields.get("tileHeight").set(UnitType.Terran_Factory, 3);
        fields.get("dimensionLeft").set(UnitType.Terran_Factory, 56);
        fields.get("dimensionUp").set(UnitType.Terran_Factory, 40);
        fields.get("dimensionRight").set(UnitType.Terran_Factory, 56);
        fields.get("dimensionDown").set(UnitType.Terran_Factory, 40);
        fields.get("width").set(UnitType.Terran_Factory, 113);
        fields.get("height").set(UnitType.Terran_Factory, 81);
        fields.get("seekRange").set(UnitType.Terran_Factory, 0);
        fields.get("sightRange").set(UnitType.Terran_Factory, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Factory, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Factory, 0);
        fields.get("airWeapon").set(UnitType.Terran_Factory, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Factory, 0);
        fields.get("topSpeed").set(UnitType.Terran_Factory, 1.0);
        fields.get("acceleration").set(UnitType.Terran_Factory, 33);
        fields.get("haltDistance").set(UnitType.Terran_Factory, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Factory, 27);
        fields.get("canProduce").set(UnitType.Terran_Factory, true);
        fields.get("canAttack").set(UnitType.Terran_Factory, false);
        fields.get("canMove").set(UnitType.Terran_Factory, false);
        fields.get("isFlyer").set(UnitType.Terran_Factory, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Factory, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Factory, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Factory, false);
        fields.get("isInvincible").set(UnitType.Terran_Factory, false);
        fields.get("isOrganic").set(UnitType.Terran_Factory, false);
        fields.get("isMechanical").set(UnitType.Terran_Factory, true);
        fields.get("isRobotic").set(UnitType.Terran_Factory, false);
        fields.get("isDetector").set(UnitType.Terran_Factory, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Factory, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Factory, false);
        fields.get("isRefinery").set(UnitType.Terran_Factory, false);
        fields.get("isWorker").set(UnitType.Terran_Factory, false);
        fields.get("requiresPsi").set(UnitType.Terran_Factory, false);
        fields.get("requiresCreep").set(UnitType.Terran_Factory, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Factory, false);
        fields.get("isBurrowable").set(UnitType.Terran_Factory, false);
        fields.get("isCloakable").set(UnitType.Terran_Factory, false);
        fields.get("isBuilding").set(UnitType.Terran_Factory, true);
        fields.get("isAddon").set(UnitType.Terran_Factory, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Factory, true);
        fields.get("isNeutral").set(UnitType.Terran_Factory, false);
        fields.get("isHero").set(UnitType.Terran_Factory, false);
        fields.get("isPowerup").set(UnitType.Terran_Factory, false);
        fields.get("isBeacon").set(UnitType.Terran_Factory, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Factory, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Factory, false);
        fields.get("isSpell").set(UnitType.Terran_Factory, false);
        fields.get("producesCreep").set(UnitType.Terran_Factory, false);
        fields.get("producesLarva").set(UnitType.Terran_Factory, false);
        fields.get("isMineralField").set(UnitType.Terran_Factory, false);
        fields.get("isCritter").set(UnitType.Terran_Factory, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Factory, true);
        fields.get("researchesWhat").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Starport() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Starport, 114);
        fields.get("race").set(UnitType.Terran_Starport, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Starport, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Factory)));
        fields.get("requiredTech").set(UnitType.Terran_Starport, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Starport, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Starport, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Starport, 1300);
        fields.get("maxShields").set(UnitType.Terran_Starport, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Starport, 0);
        fields.get("armor").set(UnitType.Terran_Starport, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Starport, 150);
        fields.get("gasPrice").set(UnitType.Terran_Starport, 100);
        fields.get("buildTime").set(UnitType.Terran_Starport, 1050);
        fields.get("supplyRequired").set(UnitType.Terran_Starport, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Starport, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Starport, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Starport, 0);
        fields.get("buildScore").set(UnitType.Terran_Starport, 200);
        fields.get("destroyScore").set(UnitType.Terran_Starport, 600);
        fields.get("size").set(UnitType.Terran_Starport, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Starport, 4);
        fields.get("tileHeight").set(UnitType.Terran_Starport, 3);
        fields.get("dimensionLeft").set(UnitType.Terran_Starport, 48);
        fields.get("dimensionUp").set(UnitType.Terran_Starport, 40);
        fields.get("dimensionRight").set(UnitType.Terran_Starport, 48);
        fields.get("dimensionDown").set(UnitType.Terran_Starport, 38);
        fields.get("width").set(UnitType.Terran_Starport, 97);
        fields.get("height").set(UnitType.Terran_Starport, 79);
        fields.get("seekRange").set(UnitType.Terran_Starport, 0);
        fields.get("sightRange").set(UnitType.Terran_Starport, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Starport, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Starport, 0);
        fields.get("airWeapon").set(UnitType.Terran_Starport, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Starport, 0);
        fields.get("topSpeed").set(UnitType.Terran_Starport, 1.0);
        fields.get("acceleration").set(UnitType.Terran_Starport, 33);
        fields.get("haltDistance").set(UnitType.Terran_Starport, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Starport, 27);
        fields.get("canProduce").set(UnitType.Terran_Starport, true);
        fields.get("canAttack").set(UnitType.Terran_Starport, false);
        fields.get("canMove").set(UnitType.Terran_Starport, false);
        fields.get("isFlyer").set(UnitType.Terran_Starport, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Starport, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Starport, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Starport, false);
        fields.get("isInvincible").set(UnitType.Terran_Starport, false);
        fields.get("isOrganic").set(UnitType.Terran_Starport, false);
        fields.get("isMechanical").set(UnitType.Terran_Starport, true);
        fields.get("isRobotic").set(UnitType.Terran_Starport, false);
        fields.get("isDetector").set(UnitType.Terran_Starport, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Starport, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Starport, false);
        fields.get("isRefinery").set(UnitType.Terran_Starport, false);
        fields.get("isWorker").set(UnitType.Terran_Starport, false);
        fields.get("requiresPsi").set(UnitType.Terran_Starport, false);
        fields.get("requiresCreep").set(UnitType.Terran_Starport, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Starport, false);
        fields.get("isBurrowable").set(UnitType.Terran_Starport, false);
        fields.get("isCloakable").set(UnitType.Terran_Starport, false);
        fields.get("isBuilding").set(UnitType.Terran_Starport, true);
        fields.get("isAddon").set(UnitType.Terran_Starport, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Starport, true);
        fields.get("isNeutral").set(UnitType.Terran_Starport, false);
        fields.get("isHero").set(UnitType.Terran_Starport, false);
        fields.get("isPowerup").set(UnitType.Terran_Starport, false);
        fields.get("isBeacon").set(UnitType.Terran_Starport, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Starport, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Starport, false);
        fields.get("isSpell").set(UnitType.Terran_Starport, false);
        fields.get("producesCreep").set(UnitType.Terran_Starport, false);
        fields.get("producesLarva").set(UnitType.Terran_Starport, false);
        fields.get("isMineralField").set(UnitType.Terran_Starport, false);
        fields.get("isCritter").set(UnitType.Terran_Starport, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Starport, true);
        fields.get("researchesWhat").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Control_Tower() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Control_Tower, 115);
        fields.get("race").set(UnitType.Terran_Control_Tower, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Control_Tower, new Pair(UnitType.Terran_Starport, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList(UnitType.Terran_Starport)));
        fields.get("requiredTech").set(UnitType.Terran_Control_Tower, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Control_Tower, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Control_Tower, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Control_Tower, 500);
        fields.get("maxShields").set(UnitType.Terran_Control_Tower, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Control_Tower, 0);
        fields.get("armor").set(UnitType.Terran_Control_Tower, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Control_Tower, 50);
        fields.get("gasPrice").set(UnitType.Terran_Control_Tower, 50);
        fields.get("buildTime").set(UnitType.Terran_Control_Tower, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Control_Tower, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Control_Tower, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Control_Tower, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Control_Tower, 0);
        fields.get("buildScore").set(UnitType.Terran_Control_Tower, 100);
        fields.get("destroyScore").set(UnitType.Terran_Control_Tower, 300);
        fields.get("size").set(UnitType.Terran_Control_Tower, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Control_Tower, 2);
        fields.get("tileHeight").set(UnitType.Terran_Control_Tower, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Control_Tower, 47);
        fields.get("dimensionUp").set(UnitType.Terran_Control_Tower, 24);
        fields.get("dimensionRight").set(UnitType.Terran_Control_Tower, 28);
        fields.get("dimensionDown").set(UnitType.Terran_Control_Tower, 22);
        fields.get("width").set(UnitType.Terran_Control_Tower, 76);
        fields.get("height").set(UnitType.Terran_Control_Tower, 47);
        fields.get("seekRange").set(UnitType.Terran_Control_Tower, 0);
        fields.get("sightRange").set(UnitType.Terran_Control_Tower, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Control_Tower, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Control_Tower, 0);
        fields.get("airWeapon").set(UnitType.Terran_Control_Tower, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Control_Tower, 0);
        fields.get("topSpeed").set(UnitType.Terran_Control_Tower, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Control_Tower, 0);
        fields.get("haltDistance").set(UnitType.Terran_Control_Tower, 0);
        fields.get("turnRadius").set(UnitType.Terran_Control_Tower, 0);
        fields.get("canProduce").set(UnitType.Terran_Control_Tower, false);
        fields.get("canAttack").set(UnitType.Terran_Control_Tower, false);
        fields.get("canMove").set(UnitType.Terran_Control_Tower, false);
        fields.get("isFlyer").set(UnitType.Terran_Control_Tower, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Control_Tower, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Control_Tower, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Control_Tower, false);
        fields.get("isInvincible").set(UnitType.Terran_Control_Tower, false);
        fields.get("isOrganic").set(UnitType.Terran_Control_Tower, false);
        fields.get("isMechanical").set(UnitType.Terran_Control_Tower, true);
        fields.get("isRobotic").set(UnitType.Terran_Control_Tower, false);
        fields.get("isDetector").set(UnitType.Terran_Control_Tower, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Control_Tower, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Control_Tower, false);
        fields.get("isRefinery").set(UnitType.Terran_Control_Tower, false);
        fields.get("isWorker").set(UnitType.Terran_Control_Tower, false);
        fields.get("requiresPsi").set(UnitType.Terran_Control_Tower, false);
        fields.get("requiresCreep").set(UnitType.Terran_Control_Tower, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Control_Tower, false);
        fields.get("isBurrowable").set(UnitType.Terran_Control_Tower, false);
        fields.get("isCloakable").set(UnitType.Terran_Control_Tower, false);
        fields.get("isBuilding").set(UnitType.Terran_Control_Tower, true);
        fields.get("isAddon").set(UnitType.Terran_Control_Tower, true);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Control_Tower, false);
        fields.get("isNeutral").set(UnitType.Terran_Control_Tower, false);
        fields.get("isHero").set(UnitType.Terran_Control_Tower, false);
        fields.get("isPowerup").set(UnitType.Terran_Control_Tower, false);
        fields.get("isBeacon").set(UnitType.Terran_Control_Tower, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Control_Tower, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Control_Tower, false);
        fields.get("isSpell").set(UnitType.Terran_Control_Tower, false);
        fields.get("producesCreep").set(UnitType.Terran_Control_Tower, false);
        fields.get("producesLarva").set(UnitType.Terran_Control_Tower, false);
        fields.get("isMineralField").set(UnitType.Terran_Control_Tower, false);
        fields.get("isCritter").set(UnitType.Terran_Control_Tower, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Control_Tower, false);
        fields.get("researchesWhat").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList(TechType.Cloaking_Field)));
        fields.get("upgradesWhat").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList(UpgradeType.Apollo_Reactor)));
    }
    private void initializeUnitType_Terran_Science_Facility() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Science_Facility, 116);
        fields.get("race").set(UnitType.Terran_Science_Facility, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Science_Facility, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Science_Facility, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Starport)));
        fields.get("requiredTech").set(UnitType.Terran_Science_Facility, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Science_Facility, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Science_Facility, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Science_Facility, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Science_Facility, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Science_Facility, 850);
        fields.get("maxShields").set(UnitType.Terran_Science_Facility, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Science_Facility, 0);
        fields.get("armor").set(UnitType.Terran_Science_Facility, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Science_Facility, 100);
        fields.get("gasPrice").set(UnitType.Terran_Science_Facility, 150);
        fields.get("buildTime").set(UnitType.Terran_Science_Facility, 900);
        fields.get("supplyRequired").set(UnitType.Terran_Science_Facility, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Science_Facility, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Science_Facility, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Science_Facility, 0);
        fields.get("buildScore").set(UnitType.Terran_Science_Facility, 275);
        fields.get("destroyScore").set(UnitType.Terran_Science_Facility, 825);
        fields.get("size").set(UnitType.Terran_Science_Facility, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Science_Facility, 4);
        fields.get("tileHeight").set(UnitType.Terran_Science_Facility, 3);
        fields.get("dimensionLeft").set(UnitType.Terran_Science_Facility, 48);
        fields.get("dimensionUp").set(UnitType.Terran_Science_Facility, 38);
        fields.get("dimensionRight").set(UnitType.Terran_Science_Facility, 48);
        fields.get("dimensionDown").set(UnitType.Terran_Science_Facility, 38);
        fields.get("width").set(UnitType.Terran_Science_Facility, 97);
        fields.get("height").set(UnitType.Terran_Science_Facility, 77);
        fields.get("seekRange").set(UnitType.Terran_Science_Facility, 0);
        fields.get("sightRange").set(UnitType.Terran_Science_Facility, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Science_Facility, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Science_Facility, 0);
        fields.get("airWeapon").set(UnitType.Terran_Science_Facility, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Science_Facility, 0);
        fields.get("topSpeed").set(UnitType.Terran_Science_Facility, 1.0);
        fields.get("acceleration").set(UnitType.Terran_Science_Facility, 33);
        fields.get("haltDistance").set(UnitType.Terran_Science_Facility, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Science_Facility, 27);
        fields.get("canProduce").set(UnitType.Terran_Science_Facility, false);
        fields.get("canAttack").set(UnitType.Terran_Science_Facility, false);
        fields.get("canMove").set(UnitType.Terran_Science_Facility, false);
        fields.get("isFlyer").set(UnitType.Terran_Science_Facility, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Science_Facility, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Science_Facility, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Science_Facility, false);
        fields.get("isInvincible").set(UnitType.Terran_Science_Facility, false);
        fields.get("isOrganic").set(UnitType.Terran_Science_Facility, false);
        fields.get("isMechanical").set(UnitType.Terran_Science_Facility, true);
        fields.get("isRobotic").set(UnitType.Terran_Science_Facility, false);
        fields.get("isDetector").set(UnitType.Terran_Science_Facility, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Science_Facility, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Science_Facility, false);
        fields.get("isRefinery").set(UnitType.Terran_Science_Facility, false);
        fields.get("isWorker").set(UnitType.Terran_Science_Facility, false);
        fields.get("requiresPsi").set(UnitType.Terran_Science_Facility, false);
        fields.get("requiresCreep").set(UnitType.Terran_Science_Facility, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Science_Facility, false);
        fields.get("isBurrowable").set(UnitType.Terran_Science_Facility, false);
        fields.get("isCloakable").set(UnitType.Terran_Science_Facility, false);
        fields.get("isBuilding").set(UnitType.Terran_Science_Facility, true);
        fields.get("isAddon").set(UnitType.Terran_Science_Facility, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Science_Facility, true);
        fields.get("isNeutral").set(UnitType.Terran_Science_Facility, false);
        fields.get("isHero").set(UnitType.Terran_Science_Facility, false);
        fields.get("isPowerup").set(UnitType.Terran_Science_Facility, false);
        fields.get("isBeacon").set(UnitType.Terran_Science_Facility, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Science_Facility, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Science_Facility, false);
        fields.get("isSpell").set(UnitType.Terran_Science_Facility, false);
        fields.get("producesCreep").set(UnitType.Terran_Science_Facility, false);
        fields.get("producesLarva").set(UnitType.Terran_Science_Facility, false);
        fields.get("isMineralField").set(UnitType.Terran_Science_Facility, false);
        fields.get("isCritter").set(UnitType.Terran_Science_Facility, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Science_Facility, true);
        fields.get("researchesWhat").set(UnitType.Terran_Science_Facility, new ArrayList(Arrays.asList(TechType.EMP_Shockwave, TechType.Irradiate)));
        fields.get("upgradesWhat").set(UnitType.Terran_Science_Facility, new ArrayList(Arrays.asList(UpgradeType.Titan_Reactor)));
    }
    private void initializeUnitType_Terran_Covert_Ops() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Covert_Ops, 117);
        fields.get("race").set(UnitType.Terran_Covert_Ops, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Covert_Ops, new Pair(UnitType.Terran_Science_Facility, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList(UnitType.Terran_Science_Facility)));
        fields.get("requiredTech").set(UnitType.Terran_Covert_Ops, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Covert_Ops, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Covert_Ops, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Covert_Ops, 750);
        fields.get("maxShields").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("armor").set(UnitType.Terran_Covert_Ops, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Covert_Ops, 50);
        fields.get("gasPrice").set(UnitType.Terran_Covert_Ops, 50);
        fields.get("buildTime").set(UnitType.Terran_Covert_Ops, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Covert_Ops, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("buildScore").set(UnitType.Terran_Covert_Ops, 75);
        fields.get("destroyScore").set(UnitType.Terran_Covert_Ops, 225);
        fields.get("size").set(UnitType.Terran_Covert_Ops, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Covert_Ops, 2);
        fields.get("tileHeight").set(UnitType.Terran_Covert_Ops, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Covert_Ops, 47);
        fields.get("dimensionUp").set(UnitType.Terran_Covert_Ops, 24);
        fields.get("dimensionRight").set(UnitType.Terran_Covert_Ops, 28);
        fields.get("dimensionDown").set(UnitType.Terran_Covert_Ops, 22);
        fields.get("width").set(UnitType.Terran_Covert_Ops, 76);
        fields.get("height").set(UnitType.Terran_Covert_Ops, 47);
        fields.get("seekRange").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("sightRange").set(UnitType.Terran_Covert_Ops, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Covert_Ops, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("airWeapon").set(UnitType.Terran_Covert_Ops, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("topSpeed").set(UnitType.Terran_Covert_Ops, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("haltDistance").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("turnRadius").set(UnitType.Terran_Covert_Ops, 0);
        fields.get("canProduce").set(UnitType.Terran_Covert_Ops, false);
        fields.get("canAttack").set(UnitType.Terran_Covert_Ops, false);
        fields.get("canMove").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isFlyer").set(UnitType.Terran_Covert_Ops, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Covert_Ops, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isInvincible").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isOrganic").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isMechanical").set(UnitType.Terran_Covert_Ops, true);
        fields.get("isRobotic").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isDetector").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isRefinery").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isWorker").set(UnitType.Terran_Covert_Ops, false);
        fields.get("requiresPsi").set(UnitType.Terran_Covert_Ops, false);
        fields.get("requiresCreep").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isBurrowable").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isCloakable").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isBuilding").set(UnitType.Terran_Covert_Ops, true);
        fields.get("isAddon").set(UnitType.Terran_Covert_Ops, true);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isNeutral").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isHero").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isPowerup").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isBeacon").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isSpell").set(UnitType.Terran_Covert_Ops, false);
        fields.get("producesCreep").set(UnitType.Terran_Covert_Ops, false);
        fields.get("producesLarva").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isMineralField").set(UnitType.Terran_Covert_Ops, false);
        fields.get("isCritter").set(UnitType.Terran_Covert_Ops, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Covert_Ops, false);
        fields.get("researchesWhat").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList(TechType.Personnel_Cloaking, TechType.Lockdown)));
        fields.get("upgradesWhat").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList(UpgradeType.Ocular_Implants, UpgradeType.Moebius_Reactor)));
    }
    private void initializeUnitType_Terran_Physics_Lab() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Physics_Lab, 118);
        fields.get("race").set(UnitType.Terran_Physics_Lab, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Physics_Lab, new Pair(UnitType.Terran_Science_Facility, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList(UnitType.Terran_Science_Facility)));
        fields.get("requiredTech").set(UnitType.Terran_Physics_Lab, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Physics_Lab, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Physics_Lab, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Physics_Lab, 600);
        fields.get("maxShields").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("armor").set(UnitType.Terran_Physics_Lab, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Physics_Lab, 50);
        fields.get("gasPrice").set(UnitType.Terran_Physics_Lab, 50);
        fields.get("buildTime").set(UnitType.Terran_Physics_Lab, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Physics_Lab, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("buildScore").set(UnitType.Terran_Physics_Lab, 75);
        fields.get("destroyScore").set(UnitType.Terran_Physics_Lab, 225);
        fields.get("size").set(UnitType.Terran_Physics_Lab, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Physics_Lab, 2);
        fields.get("tileHeight").set(UnitType.Terran_Physics_Lab, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Physics_Lab, 47);
        fields.get("dimensionUp").set(UnitType.Terran_Physics_Lab, 24);
        fields.get("dimensionRight").set(UnitType.Terran_Physics_Lab, 28);
        fields.get("dimensionDown").set(UnitType.Terran_Physics_Lab, 22);
        fields.get("width").set(UnitType.Terran_Physics_Lab, 76);
        fields.get("height").set(UnitType.Terran_Physics_Lab, 47);
        fields.get("seekRange").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("sightRange").set(UnitType.Terran_Physics_Lab, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Physics_Lab, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("airWeapon").set(UnitType.Terran_Physics_Lab, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("topSpeed").set(UnitType.Terran_Physics_Lab, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("haltDistance").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("turnRadius").set(UnitType.Terran_Physics_Lab, 0);
        fields.get("canProduce").set(UnitType.Terran_Physics_Lab, false);
        fields.get("canAttack").set(UnitType.Terran_Physics_Lab, false);
        fields.get("canMove").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isFlyer").set(UnitType.Terran_Physics_Lab, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Physics_Lab, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isInvincible").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isOrganic").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isMechanical").set(UnitType.Terran_Physics_Lab, true);
        fields.get("isRobotic").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isDetector").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isRefinery").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isWorker").set(UnitType.Terran_Physics_Lab, false);
        fields.get("requiresPsi").set(UnitType.Terran_Physics_Lab, false);
        fields.get("requiresCreep").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isBurrowable").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isCloakable").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isBuilding").set(UnitType.Terran_Physics_Lab, true);
        fields.get("isAddon").set(UnitType.Terran_Physics_Lab, true);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isNeutral").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isHero").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isPowerup").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isBeacon").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isSpell").set(UnitType.Terran_Physics_Lab, false);
        fields.get("producesCreep").set(UnitType.Terran_Physics_Lab, false);
        fields.get("producesLarva").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isMineralField").set(UnitType.Terran_Physics_Lab, false);
        fields.get("isCritter").set(UnitType.Terran_Physics_Lab, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Physics_Lab, false);
        fields.get("researchesWhat").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
        fields.get("upgradesWhat").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList(UpgradeType.Colossus_Reactor)));
    }
    private void initializeUnitType_Unused_Terran1() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Terran1, 0);
        fields.get("race").set(UnitType.Unused_Terran1, null);
        fields.get("whatBuilds").set(UnitType.Unused_Terran1, null);
        fields.get("requiredUnits").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Terran1, null);
        fields.get("cloakingTech").set(UnitType.Unused_Terran1, null);
        fields.get("abilities").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Terran1, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Terran1, 0);
        fields.get("maxShields").set(UnitType.Unused_Terran1, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Terran1, 0);
        fields.get("armor").set(UnitType.Unused_Terran1, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Terran1, 0);
        fields.get("gasPrice").set(UnitType.Unused_Terran1, 0);
        fields.get("buildTime").set(UnitType.Unused_Terran1, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Terran1, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Terran1, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Terran1, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Terran1, 0);
        fields.get("buildScore").set(UnitType.Unused_Terran1, 0);
        fields.get("destroyScore").set(UnitType.Unused_Terran1, 0);
        fields.get("size").set(UnitType.Unused_Terran1, null);
        fields.get("tileWidth").set(UnitType.Unused_Terran1, 0);
        fields.get("tileHeight").set(UnitType.Unused_Terran1, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Terran1, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Terran1, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Terran1, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Terran1, 0);
        fields.get("width").set(UnitType.Unused_Terran1, 0);
        fields.get("height").set(UnitType.Unused_Terran1, 0);
        fields.get("seekRange").set(UnitType.Unused_Terran1, 0);
        fields.get("sightRange").set(UnitType.Unused_Terran1, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Terran1, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Terran1, 0);
        fields.get("airWeapon").set(UnitType.Unused_Terran1, null);
        fields.get("maxAirHits").set(UnitType.Unused_Terran1, 0);
        fields.get("topSpeed").set(UnitType.Unused_Terran1, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Terran1, 0);
        fields.get("haltDistance").set(UnitType.Unused_Terran1, 0);
        fields.get("turnRadius").set(UnitType.Unused_Terran1, 0);
        fields.get("canProduce").set(UnitType.Unused_Terran1, false);
        fields.get("canAttack").set(UnitType.Unused_Terran1, false);
        fields.get("canMove").set(UnitType.Unused_Terran1, false);
        fields.get("isFlyer").set(UnitType.Unused_Terran1, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Terran1, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Terran1, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Terran1, false);
        fields.get("isInvincible").set(UnitType.Unused_Terran1, false);
        fields.get("isOrganic").set(UnitType.Unused_Terran1, false);
        fields.get("isMechanical").set(UnitType.Unused_Terran1, false);
        fields.get("isRobotic").set(UnitType.Unused_Terran1, false);
        fields.get("isDetector").set(UnitType.Unused_Terran1, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Terran1, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Terran1, false);
        fields.get("isRefinery").set(UnitType.Unused_Terran1, false);
        fields.get("isWorker").set(UnitType.Unused_Terran1, false);
        fields.get("requiresPsi").set(UnitType.Unused_Terran1, false);
        fields.get("requiresCreep").set(UnitType.Unused_Terran1, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Terran1, false);
        fields.get("isBurrowable").set(UnitType.Unused_Terran1, false);
        fields.get("isCloakable").set(UnitType.Unused_Terran1, false);
        fields.get("isBuilding").set(UnitType.Unused_Terran1, false);
        fields.get("isAddon").set(UnitType.Unused_Terran1, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Terran1, false);
        fields.get("isNeutral").set(UnitType.Unused_Terran1, false);
        fields.get("isHero").set(UnitType.Unused_Terran1, false);
        fields.get("isPowerup").set(UnitType.Unused_Terran1, false);
        fields.get("isBeacon").set(UnitType.Unused_Terran1, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Terran1, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Terran1, false);
        fields.get("isSpell").set(UnitType.Unused_Terran1, false);
        fields.get("producesCreep").set(UnitType.Unused_Terran1, false);
        fields.get("producesLarva").set(UnitType.Unused_Terran1, false);
        fields.get("isMineralField").set(UnitType.Unused_Terran1, false);
        fields.get("isCritter").set(UnitType.Unused_Terran1, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Terran1, false);
        fields.get("researchesWhat").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Machine_Shop() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Machine_Shop, 120);
        fields.get("race").set(UnitType.Terran_Machine_Shop, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Machine_Shop, new Pair(UnitType.Terran_Factory, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList(UnitType.Terran_Factory)));
        fields.get("requiredTech").set(UnitType.Terran_Machine_Shop, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Machine_Shop, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Machine_Shop, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Machine_Shop, 750);
        fields.get("maxShields").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("armor").set(UnitType.Terran_Machine_Shop, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Machine_Shop, 50);
        fields.get("gasPrice").set(UnitType.Terran_Machine_Shop, 50);
        fields.get("buildTime").set(UnitType.Terran_Machine_Shop, 600);
        fields.get("supplyRequired").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Machine_Shop, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("buildScore").set(UnitType.Terran_Machine_Shop, 75);
        fields.get("destroyScore").set(UnitType.Terran_Machine_Shop, 225);
        fields.get("size").set(UnitType.Terran_Machine_Shop, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Machine_Shop, 2);
        fields.get("tileHeight").set(UnitType.Terran_Machine_Shop, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Machine_Shop, 39);
        fields.get("dimensionUp").set(UnitType.Terran_Machine_Shop, 24);
        fields.get("dimensionRight").set(UnitType.Terran_Machine_Shop, 31);
        fields.get("dimensionDown").set(UnitType.Terran_Machine_Shop, 24);
        fields.get("width").set(UnitType.Terran_Machine_Shop, 71);
        fields.get("height").set(UnitType.Terran_Machine_Shop, 49);
        fields.get("seekRange").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("sightRange").set(UnitType.Terran_Machine_Shop, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Machine_Shop, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("airWeapon").set(UnitType.Terran_Machine_Shop, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("topSpeed").set(UnitType.Terran_Machine_Shop, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("haltDistance").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("turnRadius").set(UnitType.Terran_Machine_Shop, 0);
        fields.get("canProduce").set(UnitType.Terran_Machine_Shop, false);
        fields.get("canAttack").set(UnitType.Terran_Machine_Shop, false);
        fields.get("canMove").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isFlyer").set(UnitType.Terran_Machine_Shop, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Machine_Shop, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isInvincible").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isOrganic").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isMechanical").set(UnitType.Terran_Machine_Shop, true);
        fields.get("isRobotic").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isDetector").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isRefinery").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isWorker").set(UnitType.Terran_Machine_Shop, false);
        fields.get("requiresPsi").set(UnitType.Terran_Machine_Shop, false);
        fields.get("requiresCreep").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isBurrowable").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isCloakable").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isBuilding").set(UnitType.Terran_Machine_Shop, true);
        fields.get("isAddon").set(UnitType.Terran_Machine_Shop, true);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isNeutral").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isHero").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isPowerup").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isBeacon").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isSpell").set(UnitType.Terran_Machine_Shop, false);
        fields.get("producesCreep").set(UnitType.Terran_Machine_Shop, false);
        fields.get("producesLarva").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isMineralField").set(UnitType.Terran_Machine_Shop, false);
        fields.get("isCritter").set(UnitType.Terran_Machine_Shop, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Machine_Shop, false);
        fields.get("researchesWhat").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode, TechType.Spider_Mines)));
        fields.get("upgradesWhat").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList(UpgradeType.Ion_Thrusters, UpgradeType.Charon_Boosters)));
    }
    private void initializeUnitType_Unused_Terran2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Terran2, 0);
        fields.get("race").set(UnitType.Unused_Terran2, null);
        fields.get("whatBuilds").set(UnitType.Unused_Terran2, null);
        fields.get("requiredUnits").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Terran2, null);
        fields.get("cloakingTech").set(UnitType.Unused_Terran2, null);
        fields.get("abilities").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Terran2, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Terran2, 0);
        fields.get("maxShields").set(UnitType.Unused_Terran2, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Terran2, 0);
        fields.get("armor").set(UnitType.Unused_Terran2, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Terran2, 0);
        fields.get("gasPrice").set(UnitType.Unused_Terran2, 0);
        fields.get("buildTime").set(UnitType.Unused_Terran2, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Terran2, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Terran2, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Terran2, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Terran2, 0);
        fields.get("buildScore").set(UnitType.Unused_Terran2, 0);
        fields.get("destroyScore").set(UnitType.Unused_Terran2, 0);
        fields.get("size").set(UnitType.Unused_Terran2, null);
        fields.get("tileWidth").set(UnitType.Unused_Terran2, 0);
        fields.get("tileHeight").set(UnitType.Unused_Terran2, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Terran2, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Terran2, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Terran2, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Terran2, 0);
        fields.get("width").set(UnitType.Unused_Terran2, 0);
        fields.get("height").set(UnitType.Unused_Terran2, 0);
        fields.get("seekRange").set(UnitType.Unused_Terran2, 0);
        fields.get("sightRange").set(UnitType.Unused_Terran2, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Terran2, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Terran2, 0);
        fields.get("airWeapon").set(UnitType.Unused_Terran2, null);
        fields.get("maxAirHits").set(UnitType.Unused_Terran2, 0);
        fields.get("topSpeed").set(UnitType.Unused_Terran2, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Terran2, 0);
        fields.get("haltDistance").set(UnitType.Unused_Terran2, 0);
        fields.get("turnRadius").set(UnitType.Unused_Terran2, 0);
        fields.get("canProduce").set(UnitType.Unused_Terran2, false);
        fields.get("canAttack").set(UnitType.Unused_Terran2, false);
        fields.get("canMove").set(UnitType.Unused_Terran2, false);
        fields.get("isFlyer").set(UnitType.Unused_Terran2, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Terran2, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Terran2, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Terran2, false);
        fields.get("isInvincible").set(UnitType.Unused_Terran2, false);
        fields.get("isOrganic").set(UnitType.Unused_Terran2, false);
        fields.get("isMechanical").set(UnitType.Unused_Terran2, false);
        fields.get("isRobotic").set(UnitType.Unused_Terran2, false);
        fields.get("isDetector").set(UnitType.Unused_Terran2, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Terran2, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Terran2, false);
        fields.get("isRefinery").set(UnitType.Unused_Terran2, false);
        fields.get("isWorker").set(UnitType.Unused_Terran2, false);
        fields.get("requiresPsi").set(UnitType.Unused_Terran2, false);
        fields.get("requiresCreep").set(UnitType.Unused_Terran2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Terran2, false);
        fields.get("isBurrowable").set(UnitType.Unused_Terran2, false);
        fields.get("isCloakable").set(UnitType.Unused_Terran2, false);
        fields.get("isBuilding").set(UnitType.Unused_Terran2, false);
        fields.get("isAddon").set(UnitType.Unused_Terran2, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Terran2, false);
        fields.get("isNeutral").set(UnitType.Unused_Terran2, false);
        fields.get("isHero").set(UnitType.Unused_Terran2, false);
        fields.get("isPowerup").set(UnitType.Unused_Terran2, false);
        fields.get("isBeacon").set(UnitType.Unused_Terran2, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Terran2, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Terran2, false);
        fields.get("isSpell").set(UnitType.Unused_Terran2, false);
        fields.get("producesCreep").set(UnitType.Unused_Terran2, false);
        fields.get("producesLarva").set(UnitType.Unused_Terran2, false);
        fields.get("isMineralField").set(UnitType.Unused_Terran2, false);
        fields.get("isCritter").set(UnitType.Unused_Terran2, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Terran2, false);
        fields.get("researchesWhat").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Engineering_Bay() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Engineering_Bay, 122);
        fields.get("race").set(UnitType.Terran_Engineering_Bay, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Engineering_Bay, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Command_Center)));
        fields.get("requiredTech").set(UnitType.Terran_Engineering_Bay, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Engineering_Bay, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Engineering_Bay, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Engineering_Bay, 850);
        fields.get("maxShields").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("armor").set(UnitType.Terran_Engineering_Bay, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Engineering_Bay, 125);
        fields.get("gasPrice").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("buildTime").set(UnitType.Terran_Engineering_Bay, 900);
        fields.get("supplyRequired").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Engineering_Bay, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("buildScore").set(UnitType.Terran_Engineering_Bay, 65);
        fields.get("destroyScore").set(UnitType.Terran_Engineering_Bay, 195);
        fields.get("size").set(UnitType.Terran_Engineering_Bay, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Engineering_Bay, 4);
        fields.get("tileHeight").set(UnitType.Terran_Engineering_Bay, 3);
        fields.get("dimensionLeft").set(UnitType.Terran_Engineering_Bay, 48);
        fields.get("dimensionUp").set(UnitType.Terran_Engineering_Bay, 32);
        fields.get("dimensionRight").set(UnitType.Terran_Engineering_Bay, 48);
        fields.get("dimensionDown").set(UnitType.Terran_Engineering_Bay, 28);
        fields.get("width").set(UnitType.Terran_Engineering_Bay, 97);
        fields.get("height").set(UnitType.Terran_Engineering_Bay, 61);
        fields.get("seekRange").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("sightRange").set(UnitType.Terran_Engineering_Bay, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Engineering_Bay, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("airWeapon").set(UnitType.Terran_Engineering_Bay, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Engineering_Bay, 0);
        fields.get("topSpeed").set(UnitType.Terran_Engineering_Bay, 1.0);
        fields.get("acceleration").set(UnitType.Terran_Engineering_Bay, 33);
        fields.get("haltDistance").set(UnitType.Terran_Engineering_Bay, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Engineering_Bay, 27);
        fields.get("canProduce").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("canAttack").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("canMove").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isFlyer").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isInvincible").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isOrganic").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isMechanical").set(UnitType.Terran_Engineering_Bay, true);
        fields.get("isRobotic").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isDetector").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isRefinery").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isWorker").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("requiresPsi").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("requiresCreep").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isBurrowable").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isCloakable").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isBuilding").set(UnitType.Terran_Engineering_Bay, true);
        fields.get("isAddon").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Engineering_Bay, true);
        fields.get("isNeutral").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isHero").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isPowerup").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isBeacon").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isSpell").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("producesCreep").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("producesLarva").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isMineralField").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("isCritter").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Engineering_Bay, false);
        fields.get("researchesWhat").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
    }
    private void initializeUnitType_Terran_Armory() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Armory, 123);
        fields.get("race").set(UnitType.Terran_Armory, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Armory, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Factory)));
        fields.get("requiredTech").set(UnitType.Terran_Armory, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Armory, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Armory, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Armory, 750);
        fields.get("maxShields").set(UnitType.Terran_Armory, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Armory, 0);
        fields.get("armor").set(UnitType.Terran_Armory, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Armory, 100);
        fields.get("gasPrice").set(UnitType.Terran_Armory, 50);
        fields.get("buildTime").set(UnitType.Terran_Armory, 1200);
        fields.get("supplyRequired").set(UnitType.Terran_Armory, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Armory, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Armory, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Armory, 0);
        fields.get("buildScore").set(UnitType.Terran_Armory, 100);
        fields.get("destroyScore").set(UnitType.Terran_Armory, 300);
        fields.get("size").set(UnitType.Terran_Armory, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Armory, 3);
        fields.get("tileHeight").set(UnitType.Terran_Armory, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Armory, 48);
        fields.get("dimensionUp").set(UnitType.Terran_Armory, 32);
        fields.get("dimensionRight").set(UnitType.Terran_Armory, 47);
        fields.get("dimensionDown").set(UnitType.Terran_Armory, 22);
        fields.get("width").set(UnitType.Terran_Armory, 96);
        fields.get("height").set(UnitType.Terran_Armory, 55);
        fields.get("seekRange").set(UnitType.Terran_Armory, 0);
        fields.get("sightRange").set(UnitType.Terran_Armory, 256);
        fields.get("groundWeapon").set(UnitType.Terran_Armory, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Armory, 0);
        fields.get("airWeapon").set(UnitType.Terran_Armory, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Armory, 0);
        fields.get("topSpeed").set(UnitType.Terran_Armory, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Armory, 0);
        fields.get("haltDistance").set(UnitType.Terran_Armory, 0);
        fields.get("turnRadius").set(UnitType.Terran_Armory, 0);
        fields.get("canProduce").set(UnitType.Terran_Armory, false);
        fields.get("canAttack").set(UnitType.Terran_Armory, false);
        fields.get("canMove").set(UnitType.Terran_Armory, false);
        fields.get("isFlyer").set(UnitType.Terran_Armory, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Armory, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Armory, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Armory, false);
        fields.get("isInvincible").set(UnitType.Terran_Armory, false);
        fields.get("isOrganic").set(UnitType.Terran_Armory, false);
        fields.get("isMechanical").set(UnitType.Terran_Armory, true);
        fields.get("isRobotic").set(UnitType.Terran_Armory, false);
        fields.get("isDetector").set(UnitType.Terran_Armory, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Armory, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Armory, false);
        fields.get("isRefinery").set(UnitType.Terran_Armory, false);
        fields.get("isWorker").set(UnitType.Terran_Armory, false);
        fields.get("requiresPsi").set(UnitType.Terran_Armory, false);
        fields.get("requiresCreep").set(UnitType.Terran_Armory, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Armory, false);
        fields.get("isBurrowable").set(UnitType.Terran_Armory, false);
        fields.get("isCloakable").set(UnitType.Terran_Armory, false);
        fields.get("isBuilding").set(UnitType.Terran_Armory, true);
        fields.get("isAddon").set(UnitType.Terran_Armory, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Armory, false);
        fields.get("isNeutral").set(UnitType.Terran_Armory, false);
        fields.get("isHero").set(UnitType.Terran_Armory, false);
        fields.get("isPowerup").set(UnitType.Terran_Armory, false);
        fields.get("isBeacon").set(UnitType.Terran_Armory, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Armory, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Armory, false);
        fields.get("isSpell").set(UnitType.Terran_Armory, false);
        fields.get("producesCreep").set(UnitType.Terran_Armory, false);
        fields.get("producesLarva").set(UnitType.Terran_Armory, false);
        fields.get("isMineralField").set(UnitType.Terran_Armory, false);
        fields.get("isCritter").set(UnitType.Terran_Armory, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Armory, false);
        fields.get("researchesWhat").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Weapons, UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons, UpgradeType.Terran_Ship_Plating)));
    }
    private void initializeUnitType_Terran_Missile_Turret() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Missile_Turret, 124);
        fields.get("race").set(UnitType.Terran_Missile_Turret, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Missile_Turret, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Engineering_Bay)));
        fields.get("requiredTech").set(UnitType.Terran_Missile_Turret, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Missile_Turret, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Missile_Turret, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Missile_Turret, 200);
        fields.get("maxShields").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("armor").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("mineralPrice").set(UnitType.Terran_Missile_Turret, 75);
        fields.get("gasPrice").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("buildTime").set(UnitType.Terran_Missile_Turret, 450);
        fields.get("supplyRequired").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Missile_Turret, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("buildScore").set(UnitType.Terran_Missile_Turret, 50);
        fields.get("destroyScore").set(UnitType.Terran_Missile_Turret, 150);
        fields.get("size").set(UnitType.Terran_Missile_Turret, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Missile_Turret, 2);
        fields.get("tileHeight").set(UnitType.Terran_Missile_Turret, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Missile_Turret, 16);
        fields.get("dimensionUp").set(UnitType.Terran_Missile_Turret, 32);
        fields.get("dimensionRight").set(UnitType.Terran_Missile_Turret, 16);
        fields.get("dimensionDown").set(UnitType.Terran_Missile_Turret, 16);
        fields.get("width").set(UnitType.Terran_Missile_Turret, 33);
        fields.get("height").set(UnitType.Terran_Missile_Turret, 49);
        fields.get("seekRange").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("sightRange").set(UnitType.Terran_Missile_Turret, 352);
        fields.get("groundWeapon").set(UnitType.Terran_Missile_Turret, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("airWeapon").set(UnitType.Terran_Missile_Turret, WeaponType.Longbolt_Missile);
        fields.get("maxAirHits").set(UnitType.Terran_Missile_Turret, 1);
        fields.get("topSpeed").set(UnitType.Terran_Missile_Turret, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("haltDistance").set(UnitType.Terran_Missile_Turret, 0);
        fields.get("turnRadius").set(UnitType.Terran_Missile_Turret, 40);
        fields.get("canProduce").set(UnitType.Terran_Missile_Turret, false);
        fields.get("canAttack").set(UnitType.Terran_Missile_Turret, true);
        fields.get("canMove").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isFlyer").set(UnitType.Terran_Missile_Turret, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Missile_Turret, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isInvincible").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isOrganic").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isMechanical").set(UnitType.Terran_Missile_Turret, true);
        fields.get("isRobotic").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isDetector").set(UnitType.Terran_Missile_Turret, true);
        fields.get("isResourceContainer").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isRefinery").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isWorker").set(UnitType.Terran_Missile_Turret, false);
        fields.get("requiresPsi").set(UnitType.Terran_Missile_Turret, false);
        fields.get("requiresCreep").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isBurrowable").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isCloakable").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isBuilding").set(UnitType.Terran_Missile_Turret, true);
        fields.get("isAddon").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isNeutral").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isHero").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isPowerup").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isBeacon").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isSpell").set(UnitType.Terran_Missile_Turret, false);
        fields.get("producesCreep").set(UnitType.Terran_Missile_Turret, false);
        fields.get("producesLarva").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isMineralField").set(UnitType.Terran_Missile_Turret, false);
        fields.get("isCritter").set(UnitType.Terran_Missile_Turret, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Missile_Turret, false);
        fields.get("researchesWhat").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Terran_Bunker() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Terran_Bunker, 125);
        fields.get("race").set(UnitType.Terran_Bunker, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Terran_Bunker, new Pair(UnitType.Terran_SCV, 1));
        fields.get("requiredUnits").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList(UnitType.Terran_SCV, UnitType.Terran_Barracks)));
        fields.get("requiredTech").set(UnitType.Terran_Bunker, TechType.None);
        fields.get("cloakingTech").set(UnitType.Terran_Bunker, TechType.None);
        fields.get("abilities").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Terran_Bunker, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Terran_Bunker, 350);
        fields.get("maxShields").set(UnitType.Terran_Bunker, 0);
        fields.get("maxEnergy").set(UnitType.Terran_Bunker, 0);
        fields.get("armor").set(UnitType.Terran_Bunker, 1);
        fields.get("mineralPrice").set(UnitType.Terran_Bunker, 100);
        fields.get("gasPrice").set(UnitType.Terran_Bunker, 0);
        fields.get("buildTime").set(UnitType.Terran_Bunker, 450);
        fields.get("supplyRequired").set(UnitType.Terran_Bunker, 0);
        fields.get("supplyProvided").set(UnitType.Terran_Bunker, 0);
        fields.get("spaceRequired").set(UnitType.Terran_Bunker, 255);
        fields.get("spaceProvided").set(UnitType.Terran_Bunker, 4);
        fields.get("buildScore").set(UnitType.Terran_Bunker, 50);
        fields.get("destroyScore").set(UnitType.Terran_Bunker, 150);
        fields.get("size").set(UnitType.Terran_Bunker, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Terran_Bunker, 3);
        fields.get("tileHeight").set(UnitType.Terran_Bunker, 2);
        fields.get("dimensionLeft").set(UnitType.Terran_Bunker, 32);
        fields.get("dimensionUp").set(UnitType.Terran_Bunker, 24);
        fields.get("dimensionRight").set(UnitType.Terran_Bunker, 32);
        fields.get("dimensionDown").set(UnitType.Terran_Bunker, 16);
        fields.get("width").set(UnitType.Terran_Bunker, 65);
        fields.get("height").set(UnitType.Terran_Bunker, 41);
        fields.get("seekRange").set(UnitType.Terran_Bunker, 0);
        fields.get("sightRange").set(UnitType.Terran_Bunker, 320);
        fields.get("groundWeapon").set(UnitType.Terran_Bunker, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Terran_Bunker, 0);
        fields.get("airWeapon").set(UnitType.Terran_Bunker, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Terran_Bunker, 0);
        fields.get("topSpeed").set(UnitType.Terran_Bunker, 0.0);
        fields.get("acceleration").set(UnitType.Terran_Bunker, 33);
        fields.get("haltDistance").set(UnitType.Terran_Bunker, 2763);
        fields.get("turnRadius").set(UnitType.Terran_Bunker, 27);
        fields.get("canProduce").set(UnitType.Terran_Bunker, false);
        fields.get("canAttack").set(UnitType.Terran_Bunker, false);
        fields.get("canMove").set(UnitType.Terran_Bunker, false);
        fields.get("isFlyer").set(UnitType.Terran_Bunker, false);
        fields.get("regeneratesHP").set(UnitType.Terran_Bunker, false);
        fields.get("isSpellcaster").set(UnitType.Terran_Bunker, false);
        fields.get("hasPermanentCloak").set(UnitType.Terran_Bunker, false);
        fields.get("isInvincible").set(UnitType.Terran_Bunker, false);
        fields.get("isOrganic").set(UnitType.Terran_Bunker, false);
        fields.get("isMechanical").set(UnitType.Terran_Bunker, true);
        fields.get("isRobotic").set(UnitType.Terran_Bunker, false);
        fields.get("isDetector").set(UnitType.Terran_Bunker, false);
        fields.get("isResourceContainer").set(UnitType.Terran_Bunker, false);
        fields.get("isResourceDepot").set(UnitType.Terran_Bunker, false);
        fields.get("isRefinery").set(UnitType.Terran_Bunker, false);
        fields.get("isWorker").set(UnitType.Terran_Bunker, false);
        fields.get("requiresPsi").set(UnitType.Terran_Bunker, false);
        fields.get("requiresCreep").set(UnitType.Terran_Bunker, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Terran_Bunker, false);
        fields.get("isBurrowable").set(UnitType.Terran_Bunker, false);
        fields.get("isCloakable").set(UnitType.Terran_Bunker, false);
        fields.get("isBuilding").set(UnitType.Terran_Bunker, true);
        fields.get("isAddon").set(UnitType.Terran_Bunker, false);
        fields.get("isFlyingBuilding").set(UnitType.Terran_Bunker, false);
        fields.get("isNeutral").set(UnitType.Terran_Bunker, false);
        fields.get("isHero").set(UnitType.Terran_Bunker, false);
        fields.get("isPowerup").set(UnitType.Terran_Bunker, false);
        fields.get("isBeacon").set(UnitType.Terran_Bunker, false);
        fields.get("isFlagBeacon").set(UnitType.Terran_Bunker, false);
        fields.get("isSpecialBuilding").set(UnitType.Terran_Bunker, false);
        fields.get("isSpell").set(UnitType.Terran_Bunker, false);
        fields.get("producesCreep").set(UnitType.Terran_Bunker, false);
        fields.get("producesLarva").set(UnitType.Terran_Bunker, false);
        fields.get("isMineralField").set(UnitType.Terran_Bunker, false);
        fields.get("isCritter").set(UnitType.Terran_Bunker, false);
        fields.get("canBuildAddon").set(UnitType.Terran_Bunker, false);
        fields.get("researchesWhat").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Crashed_Norad_II() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Crashed_Norad_II, 126);
        fields.get("race").set(UnitType.Special_Crashed_Norad_II, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Special_Crashed_Norad_II, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Crashed_Norad_II, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Crashed_Norad_II, TechType.None);
        fields.get("abilities").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Crashed_Norad_II, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Crashed_Norad_II, 700);
        fields.get("maxShields").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("maxEnergy").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("armor").set(UnitType.Special_Crashed_Norad_II, 1);
        fields.get("mineralPrice").set(UnitType.Special_Crashed_Norad_II, 800);
        fields.get("gasPrice").set(UnitType.Special_Crashed_Norad_II, 600);
        fields.get("buildTime").set(UnitType.Special_Crashed_Norad_II, 4800);
        fields.get("supplyRequired").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("supplyProvided").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("spaceRequired").set(UnitType.Special_Crashed_Norad_II, 255);
        fields.get("spaceProvided").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("buildScore").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("destroyScore").set(UnitType.Special_Crashed_Norad_II, 5000);
        fields.get("size").set(UnitType.Special_Crashed_Norad_II, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Crashed_Norad_II, 3);
        fields.get("tileHeight").set(UnitType.Special_Crashed_Norad_II, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Crashed_Norad_II, 48);
        fields.get("dimensionUp").set(UnitType.Special_Crashed_Norad_II, 32);
        fields.get("dimensionRight").set(UnitType.Special_Crashed_Norad_II, 47);
        fields.get("dimensionDown").set(UnitType.Special_Crashed_Norad_II, 31);
        fields.get("width").set(UnitType.Special_Crashed_Norad_II, 96);
        fields.get("height").set(UnitType.Special_Crashed_Norad_II, 64);
        fields.get("seekRange").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("sightRange").set(UnitType.Special_Crashed_Norad_II, 320);
        fields.get("groundWeapon").set(UnitType.Special_Crashed_Norad_II, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("airWeapon").set(UnitType.Special_Crashed_Norad_II, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("topSpeed").set(UnitType.Special_Crashed_Norad_II, 0.0);
        fields.get("acceleration").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("haltDistance").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("turnRadius").set(UnitType.Special_Crashed_Norad_II, 0);
        fields.get("canProduce").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("canAttack").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("canMove").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isFlyer").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("regeneratesHP").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isSpellcaster").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isInvincible").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isOrganic").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isMechanical").set(UnitType.Special_Crashed_Norad_II, true);
        fields.get("isRobotic").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isDetector").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isResourceContainer").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isResourceDepot").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isRefinery").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isWorker").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("requiresPsi").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("requiresCreep").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isBurrowable").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isCloakable").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isBuilding").set(UnitType.Special_Crashed_Norad_II, true);
        fields.get("isAddon").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isNeutral").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isHero").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isPowerup").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isBeacon").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Crashed_Norad_II, true);
        fields.get("isSpell").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("producesCreep").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("producesLarva").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isMineralField").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("isCritter").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("canBuildAddon").set(UnitType.Special_Crashed_Norad_II, false);
        fields.get("researchesWhat").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Ion_Cannon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Ion_Cannon, 127);
        fields.get("race").set(UnitType.Special_Ion_Cannon, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Special_Ion_Cannon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Ion_Cannon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Ion_Cannon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Ion_Cannon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Ion_Cannon, 2000);
        fields.get("maxShields").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("armor").set(UnitType.Special_Ion_Cannon, 1);
        fields.get("mineralPrice").set(UnitType.Special_Ion_Cannon, 200);
        fields.get("gasPrice").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("buildTime").set(UnitType.Special_Ion_Cannon, 900);
        fields.get("supplyRequired").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Ion_Cannon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("buildScore").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("destroyScore").set(UnitType.Special_Ion_Cannon, 5000);
        fields.get("size").set(UnitType.Special_Ion_Cannon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Ion_Cannon, 3);
        fields.get("tileHeight").set(UnitType.Special_Ion_Cannon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Ion_Cannon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Ion_Cannon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Ion_Cannon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Ion_Cannon, 31);
        fields.get("width").set(UnitType.Special_Ion_Cannon, 96);
        fields.get("height").set(UnitType.Special_Ion_Cannon, 64);
        fields.get("seekRange").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("sightRange").set(UnitType.Special_Ion_Cannon, 256);
        fields.get("groundWeapon").set(UnitType.Special_Ion_Cannon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("airWeapon").set(UnitType.Special_Ion_Cannon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("topSpeed").set(UnitType.Special_Ion_Cannon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("haltDistance").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("turnRadius").set(UnitType.Special_Ion_Cannon, 0);
        fields.get("canProduce").set(UnitType.Special_Ion_Cannon, false);
        fields.get("canAttack").set(UnitType.Special_Ion_Cannon, false);
        fields.get("canMove").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isFlyer").set(UnitType.Special_Ion_Cannon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isSpellcaster").set(UnitType.Special_Ion_Cannon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isInvincible").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isOrganic").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isMechanical").set(UnitType.Special_Ion_Cannon, true);
        fields.get("isRobotic").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isDetector").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isResourceContainer").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isRefinery").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isWorker").set(UnitType.Special_Ion_Cannon, false);
        fields.get("requiresPsi").set(UnitType.Special_Ion_Cannon, false);
        fields.get("requiresCreep").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isBurrowable").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isCloakable").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isBuilding").set(UnitType.Special_Ion_Cannon, true);
        fields.get("isAddon").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isNeutral").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isHero").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isPowerup").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isBeacon").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Ion_Cannon, true);
        fields.get("isSpell").set(UnitType.Special_Ion_Cannon, false);
        fields.get("producesCreep").set(UnitType.Special_Ion_Cannon, false);
        fields.get("producesLarva").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isMineralField").set(UnitType.Special_Ion_Cannon, false);
        fields.get("isCritter").set(UnitType.Special_Ion_Cannon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Ion_Cannon, false);
        fields.get("researchesWhat").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Uraj_Crystal() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Uraj_Crystal, 128);
        fields.get("race").set(UnitType.Powerup_Uraj_Crystal, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Uraj_Crystal, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Uraj_Crystal, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Uraj_Crystal, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Uraj_Crystal, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Uraj_Crystal, 10000);
        fields.get("maxShields").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("armor").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Uraj_Crystal, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Uraj_Crystal, 1);
        fields.get("buildTime").set(UnitType.Powerup_Uraj_Crystal, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Uraj_Crystal, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("buildScore").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("size").set(UnitType.Powerup_Uraj_Crystal, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Uraj_Crystal, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Uraj_Crystal, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Uraj_Crystal, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Uraj_Crystal, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Uraj_Crystal, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Uraj_Crystal, 15);
        fields.get("width").set(UnitType.Powerup_Uraj_Crystal, 32);
        fields.get("height").set(UnitType.Powerup_Uraj_Crystal, 32);
        fields.get("seekRange").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("sightRange").set(UnitType.Powerup_Uraj_Crystal, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Uraj_Crystal, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Uraj_Crystal, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Uraj_Crystal, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Uraj_Crystal, 0);
        fields.get("canProduce").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("canAttack").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("canMove").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isFlyer").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isInvincible").set(UnitType.Powerup_Uraj_Crystal, true);
        fields.get("isOrganic").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isMechanical").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isRobotic").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isDetector").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isRefinery").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isWorker").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isCloakable").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isBuilding").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isAddon").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isNeutral").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isHero").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isPowerup").set(UnitType.Powerup_Uraj_Crystal, true);
        fields.get("isBeacon").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isSpell").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("producesCreep").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("producesLarva").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isMineralField").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("isCritter").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Uraj_Crystal, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Khalis_Crystal() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Khalis_Crystal, 129);
        fields.get("race").set(UnitType.Powerup_Khalis_Crystal, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Khalis_Crystal, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Khalis_Crystal, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Khalis_Crystal, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Khalis_Crystal, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Khalis_Crystal, 10000);
        fields.get("maxShields").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("armor").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Khalis_Crystal, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Khalis_Crystal, 1);
        fields.get("buildTime").set(UnitType.Powerup_Khalis_Crystal, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Khalis_Crystal, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("buildScore").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("size").set(UnitType.Powerup_Khalis_Crystal, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Khalis_Crystal, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Khalis_Crystal, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Khalis_Crystal, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Khalis_Crystal, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Khalis_Crystal, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Khalis_Crystal, 15);
        fields.get("width").set(UnitType.Powerup_Khalis_Crystal, 32);
        fields.get("height").set(UnitType.Powerup_Khalis_Crystal, 32);
        fields.get("seekRange").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("sightRange").set(UnitType.Powerup_Khalis_Crystal, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Khalis_Crystal, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Khalis_Crystal, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Khalis_Crystal, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Khalis_Crystal, 0);
        fields.get("canProduce").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("canAttack").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("canMove").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isFlyer").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isInvincible").set(UnitType.Powerup_Khalis_Crystal, true);
        fields.get("isOrganic").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isMechanical").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isRobotic").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isDetector").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isRefinery").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isWorker").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isCloakable").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isBuilding").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isAddon").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isNeutral").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isHero").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isPowerup").set(UnitType.Powerup_Khalis_Crystal, true);
        fields.get("isBeacon").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isSpell").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("producesCreep").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("producesLarva").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isMineralField").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("isCritter").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Khalis_Crystal, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Infested_Command_Center() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Infested_Command_Center, 130);
        fields.get("race").set(UnitType.Zerg_Infested_Command_Center, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Infested_Command_Center, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Zerg_Infested_Command_Center, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Infested_Command_Center, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Infested_Command_Center, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Infested_Command_Center, 1500);
        fields.get("maxShields").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("armor").set(UnitType.Zerg_Infested_Command_Center, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Infested_Command_Center, 1);
        fields.get("gasPrice").set(UnitType.Zerg_Infested_Command_Center, 1);
        fields.get("buildTime").set(UnitType.Zerg_Infested_Command_Center, 1800);
        fields.get("supplyRequired").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Infested_Command_Center, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("buildScore").set(UnitType.Zerg_Infested_Command_Center, 300);
        fields.get("destroyScore").set(UnitType.Zerg_Infested_Command_Center, 900);
        fields.get("size").set(UnitType.Zerg_Infested_Command_Center, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Infested_Command_Center, 4);
        fields.get("tileHeight").set(UnitType.Zerg_Infested_Command_Center, 3);
        fields.get("dimensionLeft").set(UnitType.Zerg_Infested_Command_Center, 58);
        fields.get("dimensionUp").set(UnitType.Zerg_Infested_Command_Center, 41);
        fields.get("dimensionRight").set(UnitType.Zerg_Infested_Command_Center, 58);
        fields.get("dimensionDown").set(UnitType.Zerg_Infested_Command_Center, 41);
        fields.get("width").set(UnitType.Zerg_Infested_Command_Center, 117);
        fields.get("height").set(UnitType.Zerg_Infested_Command_Center, 83);
        fields.get("seekRange").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("sightRange").set(UnitType.Zerg_Infested_Command_Center, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Infested_Command_Center, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Infested_Command_Center, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Infested_Command_Center, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Infested_Command_Center, 1.0);
        fields.get("acceleration").set(UnitType.Zerg_Infested_Command_Center, 33);
        fields.get("haltDistance").set(UnitType.Zerg_Infested_Command_Center, 2763);
        fields.get("turnRadius").set(UnitType.Zerg_Infested_Command_Center, 27);
        fields.get("canProduce").set(UnitType.Zerg_Infested_Command_Center, true);
        fields.get("canAttack").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("canMove").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isFlyer").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Infested_Command_Center, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isInvincible").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isOrganic").set(UnitType.Zerg_Infested_Command_Center, true);
        fields.get("isMechanical").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isRobotic").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isDetector").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isRefinery").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isWorker").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isCloakable").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isBuilding").set(UnitType.Zerg_Infested_Command_Center, true);
        fields.get("isAddon").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Infested_Command_Center, true);
        fields.get("isNeutral").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isHero").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isPowerup").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isBeacon").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isSpell").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("producesCreep").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("producesLarva").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isMineralField").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("isCritter").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Infested_Command_Center, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Hatchery() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Hatchery, 131);
        fields.get("race").set(UnitType.Zerg_Hatchery, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Hatchery, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList(UnitType.Zerg_Drone)));
        fields.get("requiredTech").set(UnitType.Zerg_Hatchery, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Hatchery, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Hatchery, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Hatchery, 1250);
        fields.get("maxShields").set(UnitType.Zerg_Hatchery, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Hatchery, 0);
        fields.get("armor").set(UnitType.Zerg_Hatchery, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Hatchery, 300);
        fields.get("gasPrice").set(UnitType.Zerg_Hatchery, 0);
        fields.get("buildTime").set(UnitType.Zerg_Hatchery, 1800);
        fields.get("supplyRequired").set(UnitType.Zerg_Hatchery, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Hatchery, 2);
        fields.get("spaceRequired").set(UnitType.Zerg_Hatchery, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Hatchery, 0);
        fields.get("buildScore").set(UnitType.Zerg_Hatchery, 300);
        fields.get("destroyScore").set(UnitType.Zerg_Hatchery, 900);
        fields.get("size").set(UnitType.Zerg_Hatchery, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Hatchery, 4);
        fields.get("tileHeight").set(UnitType.Zerg_Hatchery, 3);
        fields.get("dimensionLeft").set(UnitType.Zerg_Hatchery, 49);
        fields.get("dimensionUp").set(UnitType.Zerg_Hatchery, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Hatchery, 49);
        fields.get("dimensionDown").set(UnitType.Zerg_Hatchery, 32);
        fields.get("width").set(UnitType.Zerg_Hatchery, 99);
        fields.get("height").set(UnitType.Zerg_Hatchery, 65);
        fields.get("seekRange").set(UnitType.Zerg_Hatchery, 0);
        fields.get("sightRange").set(UnitType.Zerg_Hatchery, 288);
        fields.get("groundWeapon").set(UnitType.Zerg_Hatchery, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Hatchery, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Hatchery, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Hatchery, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Hatchery, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Hatchery, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Hatchery, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Hatchery, 0);
        fields.get("canProduce").set(UnitType.Zerg_Hatchery, true);
        fields.get("canAttack").set(UnitType.Zerg_Hatchery, false);
        fields.get("canMove").set(UnitType.Zerg_Hatchery, false);
        fields.get("isFlyer").set(UnitType.Zerg_Hatchery, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Hatchery, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Hatchery, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Hatchery, false);
        fields.get("isInvincible").set(UnitType.Zerg_Hatchery, false);
        fields.get("isOrganic").set(UnitType.Zerg_Hatchery, true);
        fields.get("isMechanical").set(UnitType.Zerg_Hatchery, false);
        fields.get("isRobotic").set(UnitType.Zerg_Hatchery, false);
        fields.get("isDetector").set(UnitType.Zerg_Hatchery, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Hatchery, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Hatchery, true);
        fields.get("isRefinery").set(UnitType.Zerg_Hatchery, false);
        fields.get("isWorker").set(UnitType.Zerg_Hatchery, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Hatchery, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Hatchery, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Hatchery, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Hatchery, false);
        fields.get("isCloakable").set(UnitType.Zerg_Hatchery, false);
        fields.get("isBuilding").set(UnitType.Zerg_Hatchery, true);
        fields.get("isAddon").set(UnitType.Zerg_Hatchery, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Hatchery, false);
        fields.get("isNeutral").set(UnitType.Zerg_Hatchery, false);
        fields.get("isHero").set(UnitType.Zerg_Hatchery, false);
        fields.get("isPowerup").set(UnitType.Zerg_Hatchery, false);
        fields.get("isBeacon").set(UnitType.Zerg_Hatchery, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Hatchery, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Hatchery, false);
        fields.get("isSpell").set(UnitType.Zerg_Hatchery, false);
        fields.get("producesCreep").set(UnitType.Zerg_Hatchery, true);
        fields.get("producesLarva").set(UnitType.Zerg_Hatchery, true);
        fields.get("isMineralField").set(UnitType.Zerg_Hatchery, false);
        fields.get("isCritter").set(UnitType.Zerg_Hatchery, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Hatchery, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgradesWhat").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Lair() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Lair, 132);
        fields.get("race").set(UnitType.Zerg_Lair, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Lair, new Pair(UnitType.Zerg_Hatchery, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList(UnitType.Zerg_Hatchery, UnitType.Zerg_Spawning_Pool)));
        fields.get("requiredTech").set(UnitType.Zerg_Lair, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Lair, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Lair, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Lair, 1800);
        fields.get("maxShields").set(UnitType.Zerg_Lair, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Lair, 0);
        fields.get("armor").set(UnitType.Zerg_Lair, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Lair, 150);
        fields.get("gasPrice").set(UnitType.Zerg_Lair, 100);
        fields.get("buildTime").set(UnitType.Zerg_Lair, 1500);
        fields.get("supplyRequired").set(UnitType.Zerg_Lair, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Lair, 2);
        fields.get("spaceRequired").set(UnitType.Zerg_Lair, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Lair, 0);
        fields.get("buildScore").set(UnitType.Zerg_Lair, 100);
        fields.get("destroyScore").set(UnitType.Zerg_Lair, 1200);
        fields.get("size").set(UnitType.Zerg_Lair, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Lair, 4);
        fields.get("tileHeight").set(UnitType.Zerg_Lair, 3);
        fields.get("dimensionLeft").set(UnitType.Zerg_Lair, 49);
        fields.get("dimensionUp").set(UnitType.Zerg_Lair, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Lair, 49);
        fields.get("dimensionDown").set(UnitType.Zerg_Lair, 32);
        fields.get("width").set(UnitType.Zerg_Lair, 99);
        fields.get("height").set(UnitType.Zerg_Lair, 65);
        fields.get("seekRange").set(UnitType.Zerg_Lair, 0);
        fields.get("sightRange").set(UnitType.Zerg_Lair, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Lair, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Lair, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Lair, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Lair, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Lair, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Lair, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Lair, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Lair, 0);
        fields.get("canProduce").set(UnitType.Zerg_Lair, true);
        fields.get("canAttack").set(UnitType.Zerg_Lair, false);
        fields.get("canMove").set(UnitType.Zerg_Lair, false);
        fields.get("isFlyer").set(UnitType.Zerg_Lair, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Lair, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Lair, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Lair, false);
        fields.get("isInvincible").set(UnitType.Zerg_Lair, false);
        fields.get("isOrganic").set(UnitType.Zerg_Lair, true);
        fields.get("isMechanical").set(UnitType.Zerg_Lair, false);
        fields.get("isRobotic").set(UnitType.Zerg_Lair, false);
        fields.get("isDetector").set(UnitType.Zerg_Lair, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Lair, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Lair, true);
        fields.get("isRefinery").set(UnitType.Zerg_Lair, false);
        fields.get("isWorker").set(UnitType.Zerg_Lair, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Lair, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Lair, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Lair, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Lair, false);
        fields.get("isCloakable").set(UnitType.Zerg_Lair, false);
        fields.get("isBuilding").set(UnitType.Zerg_Lair, true);
        fields.get("isAddon").set(UnitType.Zerg_Lair, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Lair, false);
        fields.get("isNeutral").set(UnitType.Zerg_Lair, false);
        fields.get("isHero").set(UnitType.Zerg_Lair, false);
        fields.get("isPowerup").set(UnitType.Zerg_Lair, false);
        fields.get("isBeacon").set(UnitType.Zerg_Lair, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Lair, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Lair, false);
        fields.get("isSpell").set(UnitType.Zerg_Lair, false);
        fields.get("producesCreep").set(UnitType.Zerg_Lair, true);
        fields.get("producesLarva").set(UnitType.Zerg_Lair, true);
        fields.get("isMineralField").set(UnitType.Zerg_Lair, false);
        fields.get("isCritter").set(UnitType.Zerg_Lair, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Lair, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgradesWhat").set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList(UpgradeType.Ventral_Sacs, UpgradeType.Antennae, UpgradeType.Pneumatized_Carapace)));
    }
    private void initializeUnitType_Zerg_Hive() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Hive, 133);
        fields.get("race").set(UnitType.Zerg_Hive, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Hive, new Pair(UnitType.Zerg_Lair, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList(UnitType.Zerg_Lair, UnitType.Zerg_Queens_Nest)));
        fields.get("requiredTech").set(UnitType.Zerg_Hive, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Hive, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Hive, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Hive, 2500);
        fields.get("maxShields").set(UnitType.Zerg_Hive, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Hive, 0);
        fields.get("armor").set(UnitType.Zerg_Hive, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Hive, 200);
        fields.get("gasPrice").set(UnitType.Zerg_Hive, 150);
        fields.get("buildTime").set(UnitType.Zerg_Hive, 1800);
        fields.get("supplyRequired").set(UnitType.Zerg_Hive, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Hive, 2);
        fields.get("spaceRequired").set(UnitType.Zerg_Hive, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Hive, 0);
        fields.get("buildScore").set(UnitType.Zerg_Hive, 100);
        fields.get("destroyScore").set(UnitType.Zerg_Hive, 1500);
        fields.get("size").set(UnitType.Zerg_Hive, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Hive, 4);
        fields.get("tileHeight").set(UnitType.Zerg_Hive, 3);
        fields.get("dimensionLeft").set(UnitType.Zerg_Hive, 49);
        fields.get("dimensionUp").set(UnitType.Zerg_Hive, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Hive, 49);
        fields.get("dimensionDown").set(UnitType.Zerg_Hive, 32);
        fields.get("width").set(UnitType.Zerg_Hive, 99);
        fields.get("height").set(UnitType.Zerg_Hive, 65);
        fields.get("seekRange").set(UnitType.Zerg_Hive, 0);
        fields.get("sightRange").set(UnitType.Zerg_Hive, 352);
        fields.get("groundWeapon").set(UnitType.Zerg_Hive, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Hive, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Hive, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Hive, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Hive, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Hive, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Hive, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Hive, 0);
        fields.get("canProduce").set(UnitType.Zerg_Hive, true);
        fields.get("canAttack").set(UnitType.Zerg_Hive, false);
        fields.get("canMove").set(UnitType.Zerg_Hive, false);
        fields.get("isFlyer").set(UnitType.Zerg_Hive, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Hive, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Hive, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Hive, false);
        fields.get("isInvincible").set(UnitType.Zerg_Hive, false);
        fields.get("isOrganic").set(UnitType.Zerg_Hive, true);
        fields.get("isMechanical").set(UnitType.Zerg_Hive, false);
        fields.get("isRobotic").set(UnitType.Zerg_Hive, false);
        fields.get("isDetector").set(UnitType.Zerg_Hive, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Hive, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Hive, true);
        fields.get("isRefinery").set(UnitType.Zerg_Hive, false);
        fields.get("isWorker").set(UnitType.Zerg_Hive, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Hive, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Hive, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Hive, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Hive, false);
        fields.get("isCloakable").set(UnitType.Zerg_Hive, false);
        fields.get("isBuilding").set(UnitType.Zerg_Hive, true);
        fields.get("isAddon").set(UnitType.Zerg_Hive, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Hive, false);
        fields.get("isNeutral").set(UnitType.Zerg_Hive, false);
        fields.get("isHero").set(UnitType.Zerg_Hive, false);
        fields.get("isPowerup").set(UnitType.Zerg_Hive, false);
        fields.get("isBeacon").set(UnitType.Zerg_Hive, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Hive, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Hive, false);
        fields.get("isSpell").set(UnitType.Zerg_Hive, false);
        fields.get("producesCreep").set(UnitType.Zerg_Hive, true);
        fields.get("producesLarva").set(UnitType.Zerg_Hive, true);
        fields.get("isMineralField").set(UnitType.Zerg_Hive, false);
        fields.get("isCritter").set(UnitType.Zerg_Hive, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Hive, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList(TechType.Burrowing)));
        fields.get("upgradesWhat").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList(UpgradeType.Ventral_Sacs, UpgradeType.Antennae, UpgradeType.Pneumatized_Carapace)));
    }
    private void initializeUnitType_Zerg_Nydus_Canal() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Nydus_Canal, 134);
        fields.get("race").set(UnitType.Zerg_Nydus_Canal, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Nydus_Canal, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Hive)));
        fields.get("requiredTech").set(UnitType.Zerg_Nydus_Canal, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Nydus_Canal, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Nydus_Canal, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Nydus_Canal, 250);
        fields.get("maxShields").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("armor").set(UnitType.Zerg_Nydus_Canal, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Nydus_Canal, 150);
        fields.get("gasPrice").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("buildTime").set(UnitType.Zerg_Nydus_Canal, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Nydus_Canal, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("buildScore").set(UnitType.Zerg_Nydus_Canal, 75);
        fields.get("destroyScore").set(UnitType.Zerg_Nydus_Canal, 225);
        fields.get("size").set(UnitType.Zerg_Nydus_Canal, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Nydus_Canal, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Nydus_Canal, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Nydus_Canal, 32);
        fields.get("dimensionUp").set(UnitType.Zerg_Nydus_Canal, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Nydus_Canal, 31);
        fields.get("dimensionDown").set(UnitType.Zerg_Nydus_Canal, 31);
        fields.get("width").set(UnitType.Zerg_Nydus_Canal, 64);
        fields.get("height").set(UnitType.Zerg_Nydus_Canal, 64);
        fields.get("seekRange").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("sightRange").set(UnitType.Zerg_Nydus_Canal, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Nydus_Canal, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Nydus_Canal, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Nydus_Canal, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Nydus_Canal, 0);
        fields.get("canProduce").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("canAttack").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("canMove").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isFlyer").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Nydus_Canal, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isInvincible").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isOrganic").set(UnitType.Zerg_Nydus_Canal, true);
        fields.get("isMechanical").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isRobotic").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isDetector").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isRefinery").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isWorker").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Nydus_Canal, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isCloakable").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isBuilding").set(UnitType.Zerg_Nydus_Canal, true);
        fields.get("isAddon").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isNeutral").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isHero").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isPowerup").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isBeacon").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isSpell").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("producesCreep").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("producesLarva").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isMineralField").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("isCritter").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Nydus_Canal, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Hydralisk_Den() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Hydralisk_Den, 135);
        fields.get("race").set(UnitType.Zerg_Hydralisk_Den, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Hydralisk_Den, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Spawning_Pool)));
        fields.get("requiredTech").set(UnitType.Zerg_Hydralisk_Den, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Hydralisk_Den, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Hydralisk_Den, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Hydralisk_Den, 850);
        fields.get("maxShields").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("armor").set(UnitType.Zerg_Hydralisk_Den, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Hydralisk_Den, 100);
        fields.get("gasPrice").set(UnitType.Zerg_Hydralisk_Den, 50);
        fields.get("buildTime").set(UnitType.Zerg_Hydralisk_Den, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Hydralisk_Den, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("buildScore").set(UnitType.Zerg_Hydralisk_Den, 100);
        fields.get("destroyScore").set(UnitType.Zerg_Hydralisk_Den, 300);
        fields.get("size").set(UnitType.Zerg_Hydralisk_Den, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Hydralisk_Den, 3);
        fields.get("tileHeight").set(UnitType.Zerg_Hydralisk_Den, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Hydralisk_Den, 40);
        fields.get("dimensionUp").set(UnitType.Zerg_Hydralisk_Den, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Hydralisk_Den, 40);
        fields.get("dimensionDown").set(UnitType.Zerg_Hydralisk_Den, 24);
        fields.get("width").set(UnitType.Zerg_Hydralisk_Den, 81);
        fields.get("height").set(UnitType.Zerg_Hydralisk_Den, 57);
        fields.get("seekRange").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("sightRange").set(UnitType.Zerg_Hydralisk_Den, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Hydralisk_Den, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Hydralisk_Den, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Hydralisk_Den, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Hydralisk_Den, 0);
        fields.get("canProduce").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("canAttack").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("canMove").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isFlyer").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Hydralisk_Den, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isInvincible").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isOrganic").set(UnitType.Zerg_Hydralisk_Den, true);
        fields.get("isMechanical").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isRobotic").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isDetector").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isRefinery").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isWorker").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Hydralisk_Den, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isCloakable").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isBuilding").set(UnitType.Zerg_Hydralisk_Den, true);
        fields.get("isAddon").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isNeutral").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isHero").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isPowerup").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isBeacon").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isSpell").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("producesCreep").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("producesLarva").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isMineralField").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("isCritter").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Hydralisk_Den, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList(TechType.Lurker_Aspect)));
        fields.get("upgradesWhat").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList(UpgradeType.Muscular_Augments, UpgradeType.Grooved_Spines)));
    }
    private void initializeUnitType_Zerg_Defiler_Mound() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Defiler_Mound, 136);
        fields.get("race").set(UnitType.Zerg_Defiler_Mound, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Defiler_Mound, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Hive)));
        fields.get("requiredTech").set(UnitType.Zerg_Defiler_Mound, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Defiler_Mound, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Defiler_Mound, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Defiler_Mound, 850);
        fields.get("maxShields").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("armor").set(UnitType.Zerg_Defiler_Mound, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Defiler_Mound, 100);
        fields.get("gasPrice").set(UnitType.Zerg_Defiler_Mound, 100);
        fields.get("buildTime").set(UnitType.Zerg_Defiler_Mound, 900);
        fields.get("supplyRequired").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Defiler_Mound, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("buildScore").set(UnitType.Zerg_Defiler_Mound, 150);
        fields.get("destroyScore").set(UnitType.Zerg_Defiler_Mound, 450);
        fields.get("size").set(UnitType.Zerg_Defiler_Mound, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Defiler_Mound, 4);
        fields.get("tileHeight").set(UnitType.Zerg_Defiler_Mound, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Defiler_Mound, 48);
        fields.get("dimensionUp").set(UnitType.Zerg_Defiler_Mound, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Defiler_Mound, 48);
        fields.get("dimensionDown").set(UnitType.Zerg_Defiler_Mound, 4);
        fields.get("width").set(UnitType.Zerg_Defiler_Mound, 97);
        fields.get("height").set(UnitType.Zerg_Defiler_Mound, 37);
        fields.get("seekRange").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("sightRange").set(UnitType.Zerg_Defiler_Mound, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Defiler_Mound, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Defiler_Mound, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Defiler_Mound, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Defiler_Mound, 0);
        fields.get("canProduce").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("canAttack").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("canMove").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isFlyer").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Defiler_Mound, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isInvincible").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isOrganic").set(UnitType.Zerg_Defiler_Mound, true);
        fields.get("isMechanical").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isRobotic").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isDetector").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isRefinery").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isWorker").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Defiler_Mound, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isCloakable").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isBuilding").set(UnitType.Zerg_Defiler_Mound, true);
        fields.get("isAddon").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isNeutral").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isHero").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isPowerup").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isBeacon").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isSpell").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("producesCreep").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("producesLarva").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isMineralField").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("isCritter").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Defiler_Mound, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList(TechType.Consume, TechType.Plague)));
        fields.get("upgradesWhat").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList(UpgradeType.Metasynaptic_Node)));
    }
    private void initializeUnitType_Zerg_Greater_Spire() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Greater_Spire, 137);
        fields.get("race").set(UnitType.Zerg_Greater_Spire, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Greater_Spire, new Pair(UnitType.Zerg_Spire, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList(UnitType.Zerg_Hive, UnitType.Zerg_Spire)));
        fields.get("requiredTech").set(UnitType.Zerg_Greater_Spire, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Greater_Spire, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Greater_Spire, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Greater_Spire, 1000);
        fields.get("maxShields").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("armor").set(UnitType.Zerg_Greater_Spire, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Greater_Spire, 100);
        fields.get("gasPrice").set(UnitType.Zerg_Greater_Spire, 150);
        fields.get("buildTime").set(UnitType.Zerg_Greater_Spire, 1800);
        fields.get("supplyRequired").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Greater_Spire, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("buildScore").set(UnitType.Zerg_Greater_Spire, 200);
        fields.get("destroyScore").set(UnitType.Zerg_Greater_Spire, 1350);
        fields.get("size").set(UnitType.Zerg_Greater_Spire, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Greater_Spire, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Greater_Spire, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Greater_Spire, 28);
        fields.get("dimensionUp").set(UnitType.Zerg_Greater_Spire, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Greater_Spire, 28);
        fields.get("dimensionDown").set(UnitType.Zerg_Greater_Spire, 24);
        fields.get("width").set(UnitType.Zerg_Greater_Spire, 57);
        fields.get("height").set(UnitType.Zerg_Greater_Spire, 57);
        fields.get("seekRange").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("sightRange").set(UnitType.Zerg_Greater_Spire, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Greater_Spire, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Greater_Spire, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Greater_Spire, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Greater_Spire, 0);
        fields.get("canProduce").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("canAttack").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("canMove").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isFlyer").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Greater_Spire, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isInvincible").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isOrganic").set(UnitType.Zerg_Greater_Spire, true);
        fields.get("isMechanical").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isRobotic").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isDetector").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isRefinery").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isWorker").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Greater_Spire, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isCloakable").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isBuilding").set(UnitType.Zerg_Greater_Spire, true);
        fields.get("isAddon").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isNeutral").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isHero").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isPowerup").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isBeacon").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isSpell").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("producesCreep").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("producesLarva").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isMineralField").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("isCritter").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Greater_Spire, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace, UpgradeType.Zerg_Flyer_Attacks)));
    }
    private void initializeUnitType_Zerg_Queens_Nest() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Queens_Nest, 138);
        fields.get("race").set(UnitType.Zerg_Queens_Nest, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Queens_Nest, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Lair)));
        fields.get("requiredTech").set(UnitType.Zerg_Queens_Nest, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Queens_Nest, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Queens_Nest, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Queens_Nest, 850);
        fields.get("maxShields").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("armor").set(UnitType.Zerg_Queens_Nest, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Queens_Nest, 150);
        fields.get("gasPrice").set(UnitType.Zerg_Queens_Nest, 100);
        fields.get("buildTime").set(UnitType.Zerg_Queens_Nest, 900);
        fields.get("supplyRequired").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Queens_Nest, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("buildScore").set(UnitType.Zerg_Queens_Nest, 175);
        fields.get("destroyScore").set(UnitType.Zerg_Queens_Nest, 525);
        fields.get("size").set(UnitType.Zerg_Queens_Nest, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Queens_Nest, 3);
        fields.get("tileHeight").set(UnitType.Zerg_Queens_Nest, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Queens_Nest, 38);
        fields.get("dimensionUp").set(UnitType.Zerg_Queens_Nest, 28);
        fields.get("dimensionRight").set(UnitType.Zerg_Queens_Nest, 32);
        fields.get("dimensionDown").set(UnitType.Zerg_Queens_Nest, 28);
        fields.get("width").set(UnitType.Zerg_Queens_Nest, 71);
        fields.get("height").set(UnitType.Zerg_Queens_Nest, 57);
        fields.get("seekRange").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("sightRange").set(UnitType.Zerg_Queens_Nest, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Queens_Nest, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Queens_Nest, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Queens_Nest, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Queens_Nest, 0);
        fields.get("canProduce").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("canAttack").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("canMove").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isFlyer").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Queens_Nest, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isInvincible").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isOrganic").set(UnitType.Zerg_Queens_Nest, true);
        fields.get("isMechanical").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isRobotic").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isDetector").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isRefinery").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isWorker").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Queens_Nest, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isCloakable").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isBuilding").set(UnitType.Zerg_Queens_Nest, true);
        fields.get("isAddon").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isNeutral").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isHero").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isPowerup").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isBeacon").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isSpell").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("producesCreep").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("producesLarva").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isMineralField").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("isCritter").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Queens_Nest, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList(TechType.Ensnare, TechType.Spawn_Broodlings)));
        fields.get("upgradesWhat").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList(UpgradeType.Gamete_Meiosis)));
    }
    private void initializeUnitType_Zerg_Evolution_Chamber() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Evolution_Chamber, 139);
        fields.get("race").set(UnitType.Zerg_Evolution_Chamber, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Evolution_Chamber, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Hatchery)));
        fields.get("requiredTech").set(UnitType.Zerg_Evolution_Chamber, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Evolution_Chamber, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Evolution_Chamber, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Evolution_Chamber, 750);
        fields.get("maxShields").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("armor").set(UnitType.Zerg_Evolution_Chamber, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Evolution_Chamber, 75);
        fields.get("gasPrice").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("buildTime").set(UnitType.Zerg_Evolution_Chamber, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Evolution_Chamber, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("buildScore").set(UnitType.Zerg_Evolution_Chamber, 40);
        fields.get("destroyScore").set(UnitType.Zerg_Evolution_Chamber, 120);
        fields.get("size").set(UnitType.Zerg_Evolution_Chamber, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Evolution_Chamber, 3);
        fields.get("tileHeight").set(UnitType.Zerg_Evolution_Chamber, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Evolution_Chamber, 44);
        fields.get("dimensionUp").set(UnitType.Zerg_Evolution_Chamber, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Evolution_Chamber, 32);
        fields.get("dimensionDown").set(UnitType.Zerg_Evolution_Chamber, 20);
        fields.get("width").set(UnitType.Zerg_Evolution_Chamber, 77);
        fields.get("height").set(UnitType.Zerg_Evolution_Chamber, 53);
        fields.get("seekRange").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("sightRange").set(UnitType.Zerg_Evolution_Chamber, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Evolution_Chamber, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Evolution_Chamber, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Evolution_Chamber, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Evolution_Chamber, 0);
        fields.get("canProduce").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("canAttack").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("canMove").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isFlyer").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Evolution_Chamber, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isInvincible").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isOrganic").set(UnitType.Zerg_Evolution_Chamber, true);
        fields.get("isMechanical").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isRobotic").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isDetector").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isRefinery").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isWorker").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Evolution_Chamber, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isCloakable").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isBuilding").set(UnitType.Zerg_Evolution_Chamber, true);
        fields.get("isAddon").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isNeutral").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isHero").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isPowerup").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isBeacon").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isSpell").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("producesCreep").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("producesLarva").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isMineralField").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("isCritter").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Evolution_Chamber, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList(UpgradeType.Zerg_Melee_Attacks, UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Missile_Attacks)));
    }
    private void initializeUnitType_Zerg_Ultralisk_Cavern() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Ultralisk_Cavern, 140);
        fields.get("race").set(UnitType.Zerg_Ultralisk_Cavern, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Ultralisk_Cavern, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Hive)));
        fields.get("requiredTech").set(UnitType.Zerg_Ultralisk_Cavern, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Ultralisk_Cavern, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Ultralisk_Cavern, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Ultralisk_Cavern, 600);
        fields.get("maxShields").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("armor").set(UnitType.Zerg_Ultralisk_Cavern, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Ultralisk_Cavern, 150);
        fields.get("gasPrice").set(UnitType.Zerg_Ultralisk_Cavern, 200);
        fields.get("buildTime").set(UnitType.Zerg_Ultralisk_Cavern, 1200);
        fields.get("supplyRequired").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Ultralisk_Cavern, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("buildScore").set(UnitType.Zerg_Ultralisk_Cavern, 275);
        fields.get("destroyScore").set(UnitType.Zerg_Ultralisk_Cavern, 825);
        fields.get("size").set(UnitType.Zerg_Ultralisk_Cavern, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Ultralisk_Cavern, 3);
        fields.get("tileHeight").set(UnitType.Zerg_Ultralisk_Cavern, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Ultralisk_Cavern, 40);
        fields.get("dimensionUp").set(UnitType.Zerg_Ultralisk_Cavern, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Ultralisk_Cavern, 32);
        fields.get("dimensionDown").set(UnitType.Zerg_Ultralisk_Cavern, 31);
        fields.get("width").set(UnitType.Zerg_Ultralisk_Cavern, 73);
        fields.get("height").set(UnitType.Zerg_Ultralisk_Cavern, 64);
        fields.get("seekRange").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("sightRange").set(UnitType.Zerg_Ultralisk_Cavern, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Ultralisk_Cavern, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Ultralisk_Cavern, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Ultralisk_Cavern, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Ultralisk_Cavern, 0);
        fields.get("canProduce").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("canAttack").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("canMove").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isFlyer").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Ultralisk_Cavern, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isInvincible").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isOrganic").set(UnitType.Zerg_Ultralisk_Cavern, true);
        fields.get("isMechanical").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isRobotic").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isDetector").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isRefinery").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isWorker").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Ultralisk_Cavern, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isCloakable").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isBuilding").set(UnitType.Zerg_Ultralisk_Cavern, true);
        fields.get("isAddon").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isNeutral").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isHero").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isPowerup").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isBeacon").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isSpell").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("producesCreep").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("producesLarva").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isMineralField").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("isCritter").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Ultralisk_Cavern, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList(UpgradeType.Anabolic_Synthesis, UpgradeType.Chitinous_Plating)));
    }
    private void initializeUnitType_Zerg_Spire() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Spire, 141);
        fields.get("race").set(UnitType.Zerg_Spire, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Spire, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Lair)));
        fields.get("requiredTech").set(UnitType.Zerg_Spire, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Spire, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Spire, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Spire, 600);
        fields.get("maxShields").set(UnitType.Zerg_Spire, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Spire, 0);
        fields.get("armor").set(UnitType.Zerg_Spire, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Spire, 200);
        fields.get("gasPrice").set(UnitType.Zerg_Spire, 150);
        fields.get("buildTime").set(UnitType.Zerg_Spire, 1800);
        fields.get("supplyRequired").set(UnitType.Zerg_Spire, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Spire, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Spire, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Spire, 0);
        fields.get("buildScore").set(UnitType.Zerg_Spire, 250);
        fields.get("destroyScore").set(UnitType.Zerg_Spire, 750);
        fields.get("size").set(UnitType.Zerg_Spire, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Spire, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Spire, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Spire, 28);
        fields.get("dimensionUp").set(UnitType.Zerg_Spire, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Spire, 28);
        fields.get("dimensionDown").set(UnitType.Zerg_Spire, 24);
        fields.get("width").set(UnitType.Zerg_Spire, 57);
        fields.get("height").set(UnitType.Zerg_Spire, 57);
        fields.get("seekRange").set(UnitType.Zerg_Spire, 0);
        fields.get("sightRange").set(UnitType.Zerg_Spire, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Spire, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Spire, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Spire, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Spire, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Spire, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Spire, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Spire, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Spire, 0);
        fields.get("canProduce").set(UnitType.Zerg_Spire, false);
        fields.get("canAttack").set(UnitType.Zerg_Spire, false);
        fields.get("canMove").set(UnitType.Zerg_Spire, false);
        fields.get("isFlyer").set(UnitType.Zerg_Spire, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Spire, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Spire, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Spire, false);
        fields.get("isInvincible").set(UnitType.Zerg_Spire, false);
        fields.get("isOrganic").set(UnitType.Zerg_Spire, true);
        fields.get("isMechanical").set(UnitType.Zerg_Spire, false);
        fields.get("isRobotic").set(UnitType.Zerg_Spire, false);
        fields.get("isDetector").set(UnitType.Zerg_Spire, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Spire, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Spire, false);
        fields.get("isRefinery").set(UnitType.Zerg_Spire, false);
        fields.get("isWorker").set(UnitType.Zerg_Spire, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Spire, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Spire, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Spire, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Spire, false);
        fields.get("isCloakable").set(UnitType.Zerg_Spire, false);
        fields.get("isBuilding").set(UnitType.Zerg_Spire, true);
        fields.get("isAddon").set(UnitType.Zerg_Spire, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Spire, false);
        fields.get("isNeutral").set(UnitType.Zerg_Spire, false);
        fields.get("isHero").set(UnitType.Zerg_Spire, false);
        fields.get("isPowerup").set(UnitType.Zerg_Spire, false);
        fields.get("isBeacon").set(UnitType.Zerg_Spire, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Spire, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Spire, false);
        fields.get("isSpell").set(UnitType.Zerg_Spire, false);
        fields.get("producesCreep").set(UnitType.Zerg_Spire, false);
        fields.get("producesLarva").set(UnitType.Zerg_Spire, false);
        fields.get("isMineralField").set(UnitType.Zerg_Spire, false);
        fields.get("isCritter").set(UnitType.Zerg_Spire, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Spire, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace, UpgradeType.Zerg_Flyer_Attacks)));
    }
    private void initializeUnitType_Zerg_Spawning_Pool() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Spawning_Pool, 142);
        fields.get("race").set(UnitType.Zerg_Spawning_Pool, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Spawning_Pool, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList(UnitType.Zerg_Drone, UnitType.Zerg_Hatchery)));
        fields.get("requiredTech").set(UnitType.Zerg_Spawning_Pool, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Spawning_Pool, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Spawning_Pool, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Spawning_Pool, 750);
        fields.get("maxShields").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("armor").set(UnitType.Zerg_Spawning_Pool, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Spawning_Pool, 200);
        fields.get("gasPrice").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("buildTime").set(UnitType.Zerg_Spawning_Pool, 1200);
        fields.get("supplyRequired").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Spawning_Pool, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("buildScore").set(UnitType.Zerg_Spawning_Pool, 75);
        fields.get("destroyScore").set(UnitType.Zerg_Spawning_Pool, 225);
        fields.get("size").set(UnitType.Zerg_Spawning_Pool, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Spawning_Pool, 3);
        fields.get("tileHeight").set(UnitType.Zerg_Spawning_Pool, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Spawning_Pool, 36);
        fields.get("dimensionUp").set(UnitType.Zerg_Spawning_Pool, 28);
        fields.get("dimensionRight").set(UnitType.Zerg_Spawning_Pool, 40);
        fields.get("dimensionDown").set(UnitType.Zerg_Spawning_Pool, 18);
        fields.get("width").set(UnitType.Zerg_Spawning_Pool, 77);
        fields.get("height").set(UnitType.Zerg_Spawning_Pool, 47);
        fields.get("seekRange").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("sightRange").set(UnitType.Zerg_Spawning_Pool, 256);
        fields.get("groundWeapon").set(UnitType.Zerg_Spawning_Pool, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Spawning_Pool, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Spawning_Pool, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Spawning_Pool, 0);
        fields.get("canProduce").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("canAttack").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("canMove").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isFlyer").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Spawning_Pool, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isInvincible").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isOrganic").set(UnitType.Zerg_Spawning_Pool, true);
        fields.get("isMechanical").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isRobotic").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isDetector").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isRefinery").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isWorker").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Spawning_Pool, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isCloakable").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isBuilding").set(UnitType.Zerg_Spawning_Pool, true);
        fields.get("isAddon").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isNeutral").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isHero").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isPowerup").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isBeacon").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isSpell").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("producesCreep").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("producesLarva").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isMineralField").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("isCritter").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Spawning_Pool, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList(UpgradeType.Metabolic_Boost, UpgradeType.Adrenal_Glands)));
    }
    private void initializeUnitType_Zerg_Creep_Colony() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Creep_Colony, 143);
        fields.get("race").set(UnitType.Zerg_Creep_Colony, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Creep_Colony, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList(UnitType.Zerg_Drone)));
        fields.get("requiredTech").set(UnitType.Zerg_Creep_Colony, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Creep_Colony, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Creep_Colony, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Creep_Colony, 400);
        fields.get("maxShields").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("armor").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Creep_Colony, 75);
        fields.get("gasPrice").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("buildTime").set(UnitType.Zerg_Creep_Colony, 300);
        fields.get("supplyRequired").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Creep_Colony, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("buildScore").set(UnitType.Zerg_Creep_Colony, 40);
        fields.get("destroyScore").set(UnitType.Zerg_Creep_Colony, 120);
        fields.get("size").set(UnitType.Zerg_Creep_Colony, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Creep_Colony, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Creep_Colony, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Creep_Colony, 24);
        fields.get("dimensionUp").set(UnitType.Zerg_Creep_Colony, 24);
        fields.get("dimensionRight").set(UnitType.Zerg_Creep_Colony, 23);
        fields.get("dimensionDown").set(UnitType.Zerg_Creep_Colony, 23);
        fields.get("width").set(UnitType.Zerg_Creep_Colony, 48);
        fields.get("height").set(UnitType.Zerg_Creep_Colony, 48);
        fields.get("seekRange").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("sightRange").set(UnitType.Zerg_Creep_Colony, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Creep_Colony, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Creep_Colony, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Creep_Colony, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Creep_Colony, 0);
        fields.get("canProduce").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("canAttack").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("canMove").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isFlyer").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Creep_Colony, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isInvincible").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isOrganic").set(UnitType.Zerg_Creep_Colony, true);
        fields.get("isMechanical").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isRobotic").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isDetector").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isRefinery").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isWorker").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Creep_Colony, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isCloakable").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isBuilding").set(UnitType.Zerg_Creep_Colony, true);
        fields.get("isAddon").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isNeutral").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isHero").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isPowerup").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isBeacon").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isSpell").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("producesCreep").set(UnitType.Zerg_Creep_Colony, true);
        fields.get("producesLarva").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isMineralField").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("isCritter").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Creep_Colony, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Spore_Colony() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Spore_Colony, 144);
        fields.get("race").set(UnitType.Zerg_Spore_Colony, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Spore_Colony, new Pair(UnitType.Zerg_Creep_Colony, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList(UnitType.Zerg_Evolution_Chamber, UnitType.Zerg_Creep_Colony)));
        fields.get("requiredTech").set(UnitType.Zerg_Spore_Colony, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Spore_Colony, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Spore_Colony, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Spore_Colony, 400);
        fields.get("maxShields").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("armor").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("mineralPrice").set(UnitType.Zerg_Spore_Colony, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("buildTime").set(UnitType.Zerg_Spore_Colony, 300);
        fields.get("supplyRequired").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Spore_Colony, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("buildScore").set(UnitType.Zerg_Spore_Colony, 25);
        fields.get("destroyScore").set(UnitType.Zerg_Spore_Colony, 195);
        fields.get("size").set(UnitType.Zerg_Spore_Colony, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Spore_Colony, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Spore_Colony, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Spore_Colony, 24);
        fields.get("dimensionUp").set(UnitType.Zerg_Spore_Colony, 24);
        fields.get("dimensionRight").set(UnitType.Zerg_Spore_Colony, 23);
        fields.get("dimensionDown").set(UnitType.Zerg_Spore_Colony, 23);
        fields.get("width").set(UnitType.Zerg_Spore_Colony, 48);
        fields.get("height").set(UnitType.Zerg_Spore_Colony, 48);
        fields.get("seekRange").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("sightRange").set(UnitType.Zerg_Spore_Colony, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Spore_Colony, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Spore_Colony, WeaponType.Seeker_Spores);
        fields.get("maxAirHits").set(UnitType.Zerg_Spore_Colony, 1);
        fields.get("topSpeed").set(UnitType.Zerg_Spore_Colony, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Spore_Colony, 0);
        fields.get("canProduce").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("canAttack").set(UnitType.Zerg_Spore_Colony, true);
        fields.get("canMove").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isFlyer").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Spore_Colony, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isInvincible").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isOrganic").set(UnitType.Zerg_Spore_Colony, true);
        fields.get("isMechanical").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isRobotic").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isDetector").set(UnitType.Zerg_Spore_Colony, true);
        fields.get("isResourceContainer").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isRefinery").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isWorker").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Spore_Colony, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isCloakable").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isBuilding").set(UnitType.Zerg_Spore_Colony, true);
        fields.get("isAddon").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isNeutral").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isHero").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isPowerup").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isBeacon").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isSpell").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("producesCreep").set(UnitType.Zerg_Spore_Colony, true);
        fields.get("producesLarva").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isMineralField").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("isCritter").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Spore_Colony, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Zerg1() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Zerg1, 0);
        fields.get("race").set(UnitType.Unused_Zerg1, null);
        fields.get("whatBuilds").set(UnitType.Unused_Zerg1, null);
        fields.get("requiredUnits").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Zerg1, null);
        fields.get("cloakingTech").set(UnitType.Unused_Zerg1, null);
        fields.get("abilities").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Zerg1, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Zerg1, 0);
        fields.get("maxShields").set(UnitType.Unused_Zerg1, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Zerg1, 0);
        fields.get("armor").set(UnitType.Unused_Zerg1, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Zerg1, 0);
        fields.get("gasPrice").set(UnitType.Unused_Zerg1, 0);
        fields.get("buildTime").set(UnitType.Unused_Zerg1, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Zerg1, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Zerg1, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Zerg1, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Zerg1, 0);
        fields.get("buildScore").set(UnitType.Unused_Zerg1, 0);
        fields.get("destroyScore").set(UnitType.Unused_Zerg1, 0);
        fields.get("size").set(UnitType.Unused_Zerg1, null);
        fields.get("tileWidth").set(UnitType.Unused_Zerg1, 0);
        fields.get("tileHeight").set(UnitType.Unused_Zerg1, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Zerg1, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Zerg1, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Zerg1, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Zerg1, 0);
        fields.get("width").set(UnitType.Unused_Zerg1, 0);
        fields.get("height").set(UnitType.Unused_Zerg1, 0);
        fields.get("seekRange").set(UnitType.Unused_Zerg1, 0);
        fields.get("sightRange").set(UnitType.Unused_Zerg1, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Zerg1, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Zerg1, 0);
        fields.get("airWeapon").set(UnitType.Unused_Zerg1, null);
        fields.get("maxAirHits").set(UnitType.Unused_Zerg1, 0);
        fields.get("topSpeed").set(UnitType.Unused_Zerg1, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Zerg1, 0);
        fields.get("haltDistance").set(UnitType.Unused_Zerg1, 0);
        fields.get("turnRadius").set(UnitType.Unused_Zerg1, 0);
        fields.get("canProduce").set(UnitType.Unused_Zerg1, false);
        fields.get("canAttack").set(UnitType.Unused_Zerg1, false);
        fields.get("canMove").set(UnitType.Unused_Zerg1, false);
        fields.get("isFlyer").set(UnitType.Unused_Zerg1, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Zerg1, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Zerg1, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Zerg1, false);
        fields.get("isInvincible").set(UnitType.Unused_Zerg1, false);
        fields.get("isOrganic").set(UnitType.Unused_Zerg1, false);
        fields.get("isMechanical").set(UnitType.Unused_Zerg1, false);
        fields.get("isRobotic").set(UnitType.Unused_Zerg1, false);
        fields.get("isDetector").set(UnitType.Unused_Zerg1, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Zerg1, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Zerg1, false);
        fields.get("isRefinery").set(UnitType.Unused_Zerg1, false);
        fields.get("isWorker").set(UnitType.Unused_Zerg1, false);
        fields.get("requiresPsi").set(UnitType.Unused_Zerg1, false);
        fields.get("requiresCreep").set(UnitType.Unused_Zerg1, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Zerg1, false);
        fields.get("isBurrowable").set(UnitType.Unused_Zerg1, false);
        fields.get("isCloakable").set(UnitType.Unused_Zerg1, false);
        fields.get("isBuilding").set(UnitType.Unused_Zerg1, false);
        fields.get("isAddon").set(UnitType.Unused_Zerg1, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Zerg1, false);
        fields.get("isNeutral").set(UnitType.Unused_Zerg1, false);
        fields.get("isHero").set(UnitType.Unused_Zerg1, false);
        fields.get("isPowerup").set(UnitType.Unused_Zerg1, false);
        fields.get("isBeacon").set(UnitType.Unused_Zerg1, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Zerg1, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Zerg1, false);
        fields.get("isSpell").set(UnitType.Unused_Zerg1, false);
        fields.get("producesCreep").set(UnitType.Unused_Zerg1, false);
        fields.get("producesLarva").set(UnitType.Unused_Zerg1, false);
        fields.get("isMineralField").set(UnitType.Unused_Zerg1, false);
        fields.get("isCritter").set(UnitType.Unused_Zerg1, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Zerg1, false);
        fields.get("researchesWhat").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Sunken_Colony() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Sunken_Colony, 146);
        fields.get("race").set(UnitType.Zerg_Sunken_Colony, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Sunken_Colony, new Pair(UnitType.Zerg_Creep_Colony, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList(UnitType.Zerg_Spawning_Pool, UnitType.Zerg_Creep_Colony)));
        fields.get("requiredTech").set(UnitType.Zerg_Sunken_Colony, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Sunken_Colony, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Sunken_Colony, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Sunken_Colony, 300);
        fields.get("maxShields").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("armor").set(UnitType.Zerg_Sunken_Colony, 2);
        fields.get("mineralPrice").set(UnitType.Zerg_Sunken_Colony, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("buildTime").set(UnitType.Zerg_Sunken_Colony, 300);
        fields.get("supplyRequired").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Sunken_Colony, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("buildScore").set(UnitType.Zerg_Sunken_Colony, 40);
        fields.get("destroyScore").set(UnitType.Zerg_Sunken_Colony, 240);
        fields.get("size").set(UnitType.Zerg_Sunken_Colony, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Sunken_Colony, 2);
        fields.get("tileHeight").set(UnitType.Zerg_Sunken_Colony, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Sunken_Colony, 24);
        fields.get("dimensionUp").set(UnitType.Zerg_Sunken_Colony, 24);
        fields.get("dimensionRight").set(UnitType.Zerg_Sunken_Colony, 23);
        fields.get("dimensionDown").set(UnitType.Zerg_Sunken_Colony, 23);
        fields.get("width").set(UnitType.Zerg_Sunken_Colony, 48);
        fields.get("height").set(UnitType.Zerg_Sunken_Colony, 48);
        fields.get("seekRange").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("sightRange").set(UnitType.Zerg_Sunken_Colony, 320);
        fields.get("groundWeapon").set(UnitType.Zerg_Sunken_Colony, WeaponType.Subterranean_Tentacle);
        fields.get("maxGroundHits").set(UnitType.Zerg_Sunken_Colony, 1);
        fields.get("airWeapon").set(UnitType.Zerg_Sunken_Colony, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Sunken_Colony, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Sunken_Colony, 0);
        fields.get("canProduce").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("canAttack").set(UnitType.Zerg_Sunken_Colony, true);
        fields.get("canMove").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isFlyer").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Sunken_Colony, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isInvincible").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isOrganic").set(UnitType.Zerg_Sunken_Colony, true);
        fields.get("isMechanical").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isRobotic").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isDetector").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isResourceDepot").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isRefinery").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isWorker").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Sunken_Colony, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isCloakable").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isBuilding").set(UnitType.Zerg_Sunken_Colony, true);
        fields.get("isAddon").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isNeutral").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isHero").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isPowerup").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isBeacon").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isSpell").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("producesCreep").set(UnitType.Zerg_Sunken_Colony, true);
        fields.get("producesLarva").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isMineralField").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("isCritter").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Sunken_Colony, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Overmind_With_Shell() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Overmind_With_Shell, 147);
        fields.get("race").set(UnitType.Special_Overmind_With_Shell, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Overmind_With_Shell, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Overmind_With_Shell, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Overmind_With_Shell, TechType.None);
        fields.get("abilities").set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Overmind_With_Shell, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Overmind_With_Shell, 5000);
        fields.get("maxShields").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("maxEnergy").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("armor").set(UnitType.Special_Overmind_With_Shell, 1);
        fields.get("mineralPrice").set(UnitType.Special_Overmind_With_Shell, 1);
        fields.get("gasPrice").set(UnitType.Special_Overmind_With_Shell, 1);
        fields.get("buildTime").set(UnitType.Special_Overmind_With_Shell, 1);
        fields.get("supplyRequired").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("supplyProvided").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("spaceRequired").set(UnitType.Special_Overmind_With_Shell, 255);
        fields.get("spaceProvided").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("buildScore").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("destroyScore").set(UnitType.Special_Overmind_With_Shell, 10000);
        fields.get("size").set(UnitType.Special_Overmind_With_Shell, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Overmind_With_Shell, 5);
        fields.get("tileHeight").set(UnitType.Special_Overmind_With_Shell, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Overmind_With_Shell, 80);
        fields.get("dimensionUp").set(UnitType.Special_Overmind_With_Shell, 32);
        fields.get("dimensionRight").set(UnitType.Special_Overmind_With_Shell, 79);
        fields.get("dimensionDown").set(UnitType.Special_Overmind_With_Shell, 40);
        fields.get("width").set(UnitType.Special_Overmind_With_Shell, 160);
        fields.get("height").set(UnitType.Special_Overmind_With_Shell, 73);
        fields.get("seekRange").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("sightRange").set(UnitType.Special_Overmind_With_Shell, 256);
        fields.get("groundWeapon").set(UnitType.Special_Overmind_With_Shell, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("airWeapon").set(UnitType.Special_Overmind_With_Shell, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("topSpeed").set(UnitType.Special_Overmind_With_Shell, 0.0);
        fields.get("acceleration").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("haltDistance").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("turnRadius").set(UnitType.Special_Overmind_With_Shell, 0);
        fields.get("canProduce").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("canAttack").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("canMove").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isFlyer").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("regeneratesHP").set(UnitType.Special_Overmind_With_Shell, true);
        fields.get("isSpellcaster").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isInvincible").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isOrganic").set(UnitType.Special_Overmind_With_Shell, true);
        fields.get("isMechanical").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isRobotic").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isDetector").set(UnitType.Special_Overmind_With_Shell, true);
        fields.get("isResourceContainer").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isResourceDepot").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isRefinery").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isWorker").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("requiresPsi").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("requiresCreep").set(UnitType.Special_Overmind_With_Shell, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isBurrowable").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isCloakable").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isBuilding").set(UnitType.Special_Overmind_With_Shell, true);
        fields.get("isAddon").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isNeutral").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isHero").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isPowerup").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isBeacon").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Overmind_With_Shell, true);
        fields.get("isSpell").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("producesCreep").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("producesLarva").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isMineralField").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("isCritter").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("canBuildAddon").set(UnitType.Special_Overmind_With_Shell, false);
        fields.get("researchesWhat").set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Overmind() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Overmind, 148);
        fields.get("race").set(UnitType.Special_Overmind, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Overmind, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Overmind, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Overmind, TechType.None);
        fields.get("abilities").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Overmind, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Overmind, 2500);
        fields.get("maxShields").set(UnitType.Special_Overmind, 0);
        fields.get("maxEnergy").set(UnitType.Special_Overmind, 0);
        fields.get("armor").set(UnitType.Special_Overmind, 1);
        fields.get("mineralPrice").set(UnitType.Special_Overmind, 1);
        fields.get("gasPrice").set(UnitType.Special_Overmind, 1);
        fields.get("buildTime").set(UnitType.Special_Overmind, 1);
        fields.get("supplyRequired").set(UnitType.Special_Overmind, 0);
        fields.get("supplyProvided").set(UnitType.Special_Overmind, 0);
        fields.get("spaceRequired").set(UnitType.Special_Overmind, 255);
        fields.get("spaceProvided").set(UnitType.Special_Overmind, 0);
        fields.get("buildScore").set(UnitType.Special_Overmind, 0);
        fields.get("destroyScore").set(UnitType.Special_Overmind, 10000);
        fields.get("size").set(UnitType.Special_Overmind, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Overmind, 5);
        fields.get("tileHeight").set(UnitType.Special_Overmind, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Overmind, 80);
        fields.get("dimensionUp").set(UnitType.Special_Overmind, 32);
        fields.get("dimensionRight").set(UnitType.Special_Overmind, 79);
        fields.get("dimensionDown").set(UnitType.Special_Overmind, 40);
        fields.get("width").set(UnitType.Special_Overmind, 160);
        fields.get("height").set(UnitType.Special_Overmind, 73);
        fields.get("seekRange").set(UnitType.Special_Overmind, 0);
        fields.get("sightRange").set(UnitType.Special_Overmind, 256);
        fields.get("groundWeapon").set(UnitType.Special_Overmind, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Overmind, 0);
        fields.get("airWeapon").set(UnitType.Special_Overmind, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Overmind, 0);
        fields.get("topSpeed").set(UnitType.Special_Overmind, 0.0);
        fields.get("acceleration").set(UnitType.Special_Overmind, 0);
        fields.get("haltDistance").set(UnitType.Special_Overmind, 0);
        fields.get("turnRadius").set(UnitType.Special_Overmind, 0);
        fields.get("canProduce").set(UnitType.Special_Overmind, false);
        fields.get("canAttack").set(UnitType.Special_Overmind, false);
        fields.get("canMove").set(UnitType.Special_Overmind, false);
        fields.get("isFlyer").set(UnitType.Special_Overmind, false);
        fields.get("regeneratesHP").set(UnitType.Special_Overmind, true);
        fields.get("isSpellcaster").set(UnitType.Special_Overmind, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Overmind, false);
        fields.get("isInvincible").set(UnitType.Special_Overmind, false);
        fields.get("isOrganic").set(UnitType.Special_Overmind, true);
        fields.get("isMechanical").set(UnitType.Special_Overmind, false);
        fields.get("isRobotic").set(UnitType.Special_Overmind, false);
        fields.get("isDetector").set(UnitType.Special_Overmind, true);
        fields.get("isResourceContainer").set(UnitType.Special_Overmind, false);
        fields.get("isResourceDepot").set(UnitType.Special_Overmind, false);
        fields.get("isRefinery").set(UnitType.Special_Overmind, false);
        fields.get("isWorker").set(UnitType.Special_Overmind, false);
        fields.get("requiresPsi").set(UnitType.Special_Overmind, false);
        fields.get("requiresCreep").set(UnitType.Special_Overmind, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Overmind, false);
        fields.get("isBurrowable").set(UnitType.Special_Overmind, false);
        fields.get("isCloakable").set(UnitType.Special_Overmind, false);
        fields.get("isBuilding").set(UnitType.Special_Overmind, true);
        fields.get("isAddon").set(UnitType.Special_Overmind, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Overmind, false);
        fields.get("isNeutral").set(UnitType.Special_Overmind, false);
        fields.get("isHero").set(UnitType.Special_Overmind, false);
        fields.get("isPowerup").set(UnitType.Special_Overmind, false);
        fields.get("isBeacon").set(UnitType.Special_Overmind, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Overmind, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Overmind, true);
        fields.get("isSpell").set(UnitType.Special_Overmind, false);
        fields.get("producesCreep").set(UnitType.Special_Overmind, false);
        fields.get("producesLarva").set(UnitType.Special_Overmind, false);
        fields.get("isMineralField").set(UnitType.Special_Overmind, false);
        fields.get("isCritter").set(UnitType.Special_Overmind, false);
        fields.get("canBuildAddon").set(UnitType.Special_Overmind, false);
        fields.get("researchesWhat").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Zerg_Extractor() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Zerg_Extractor, 149);
        fields.get("race").set(UnitType.Zerg_Extractor, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Zerg_Extractor, new Pair(UnitType.Zerg_Drone, 1));
        fields.get("requiredUnits").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList(UnitType.Zerg_Drone)));
        fields.get("requiredTech").set(UnitType.Zerg_Extractor, TechType.None);
        fields.get("cloakingTech").set(UnitType.Zerg_Extractor, TechType.None);
        fields.get("abilities").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Zerg_Extractor, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Zerg_Extractor, 750);
        fields.get("maxShields").set(UnitType.Zerg_Extractor, 0);
        fields.get("maxEnergy").set(UnitType.Zerg_Extractor, 0);
        fields.get("armor").set(UnitType.Zerg_Extractor, 1);
        fields.get("mineralPrice").set(UnitType.Zerg_Extractor, 50);
        fields.get("gasPrice").set(UnitType.Zerg_Extractor, 0);
        fields.get("buildTime").set(UnitType.Zerg_Extractor, 600);
        fields.get("supplyRequired").set(UnitType.Zerg_Extractor, 0);
        fields.get("supplyProvided").set(UnitType.Zerg_Extractor, 0);
        fields.get("spaceRequired").set(UnitType.Zerg_Extractor, 255);
        fields.get("spaceProvided").set(UnitType.Zerg_Extractor, 0);
        fields.get("buildScore").set(UnitType.Zerg_Extractor, 25);
        fields.get("destroyScore").set(UnitType.Zerg_Extractor, 75);
        fields.get("size").set(UnitType.Zerg_Extractor, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Zerg_Extractor, 4);
        fields.get("tileHeight").set(UnitType.Zerg_Extractor, 2);
        fields.get("dimensionLeft").set(UnitType.Zerg_Extractor, 64);
        fields.get("dimensionUp").set(UnitType.Zerg_Extractor, 32);
        fields.get("dimensionRight").set(UnitType.Zerg_Extractor, 63);
        fields.get("dimensionDown").set(UnitType.Zerg_Extractor, 31);
        fields.get("width").set(UnitType.Zerg_Extractor, 128);
        fields.get("height").set(UnitType.Zerg_Extractor, 64);
        fields.get("seekRange").set(UnitType.Zerg_Extractor, 0);
        fields.get("sightRange").set(UnitType.Zerg_Extractor, 224);
        fields.get("groundWeapon").set(UnitType.Zerg_Extractor, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Zerg_Extractor, 0);
        fields.get("airWeapon").set(UnitType.Zerg_Extractor, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Zerg_Extractor, 0);
        fields.get("topSpeed").set(UnitType.Zerg_Extractor, 0.0);
        fields.get("acceleration").set(UnitType.Zerg_Extractor, 0);
        fields.get("haltDistance").set(UnitType.Zerg_Extractor, 0);
        fields.get("turnRadius").set(UnitType.Zerg_Extractor, 0);
        fields.get("canProduce").set(UnitType.Zerg_Extractor, false);
        fields.get("canAttack").set(UnitType.Zerg_Extractor, false);
        fields.get("canMove").set(UnitType.Zerg_Extractor, false);
        fields.get("isFlyer").set(UnitType.Zerg_Extractor, false);
        fields.get("regeneratesHP").set(UnitType.Zerg_Extractor, true);
        fields.get("isSpellcaster").set(UnitType.Zerg_Extractor, false);
        fields.get("hasPermanentCloak").set(UnitType.Zerg_Extractor, false);
        fields.get("isInvincible").set(UnitType.Zerg_Extractor, false);
        fields.get("isOrganic").set(UnitType.Zerg_Extractor, true);
        fields.get("isMechanical").set(UnitType.Zerg_Extractor, false);
        fields.get("isRobotic").set(UnitType.Zerg_Extractor, false);
        fields.get("isDetector").set(UnitType.Zerg_Extractor, false);
        fields.get("isResourceContainer").set(UnitType.Zerg_Extractor, true);
        fields.get("isResourceDepot").set(UnitType.Zerg_Extractor, false);
        fields.get("isRefinery").set(UnitType.Zerg_Extractor, true);
        fields.get("isWorker").set(UnitType.Zerg_Extractor, false);
        fields.get("requiresPsi").set(UnitType.Zerg_Extractor, false);
        fields.get("requiresCreep").set(UnitType.Zerg_Extractor, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Zerg_Extractor, false);
        fields.get("isBurrowable").set(UnitType.Zerg_Extractor, false);
        fields.get("isCloakable").set(UnitType.Zerg_Extractor, false);
        fields.get("isBuilding").set(UnitType.Zerg_Extractor, true);
        fields.get("isAddon").set(UnitType.Zerg_Extractor, false);
        fields.get("isFlyingBuilding").set(UnitType.Zerg_Extractor, false);
        fields.get("isNeutral").set(UnitType.Zerg_Extractor, false);
        fields.get("isHero").set(UnitType.Zerg_Extractor, false);
        fields.get("isPowerup").set(UnitType.Zerg_Extractor, false);
        fields.get("isBeacon").set(UnitType.Zerg_Extractor, false);
        fields.get("isFlagBeacon").set(UnitType.Zerg_Extractor, false);
        fields.get("isSpecialBuilding").set(UnitType.Zerg_Extractor, false);
        fields.get("isSpell").set(UnitType.Zerg_Extractor, false);
        fields.get("producesCreep").set(UnitType.Zerg_Extractor, false);
        fields.get("producesLarva").set(UnitType.Zerg_Extractor, false);
        fields.get("isMineralField").set(UnitType.Zerg_Extractor, false);
        fields.get("isCritter").set(UnitType.Zerg_Extractor, false);
        fields.get("canBuildAddon").set(UnitType.Zerg_Extractor, false);
        fields.get("researchesWhat").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Mature_Chrysalis() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Mature_Chrysalis, 150);
        fields.get("race").set(UnitType.Special_Mature_Chrysalis, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Mature_Chrysalis, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Mature_Chrysalis, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Mature_Chrysalis, TechType.None);
        fields.get("abilities").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Mature_Chrysalis, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Mature_Chrysalis, 250);
        fields.get("maxShields").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("maxEnergy").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("armor").set(UnitType.Special_Mature_Chrysalis, 1);
        fields.get("mineralPrice").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("gasPrice").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("buildTime").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("supplyRequired").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("supplyProvided").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("spaceRequired").set(UnitType.Special_Mature_Chrysalis, 255);
        fields.get("spaceProvided").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("buildScore").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("destroyScore").set(UnitType.Special_Mature_Chrysalis, 5000);
        fields.get("size").set(UnitType.Special_Mature_Chrysalis, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Mature_Chrysalis, 2);
        fields.get("tileHeight").set(UnitType.Special_Mature_Chrysalis, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Mature_Chrysalis, 32);
        fields.get("dimensionUp").set(UnitType.Special_Mature_Chrysalis, 32);
        fields.get("dimensionRight").set(UnitType.Special_Mature_Chrysalis, 31);
        fields.get("dimensionDown").set(UnitType.Special_Mature_Chrysalis, 31);
        fields.get("width").set(UnitType.Special_Mature_Chrysalis, 64);
        fields.get("height").set(UnitType.Special_Mature_Chrysalis, 64);
        fields.get("seekRange").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("sightRange").set(UnitType.Special_Mature_Chrysalis, 256);
        fields.get("groundWeapon").set(UnitType.Special_Mature_Chrysalis, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("airWeapon").set(UnitType.Special_Mature_Chrysalis, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("topSpeed").set(UnitType.Special_Mature_Chrysalis, 0.0);
        fields.get("acceleration").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("haltDistance").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("turnRadius").set(UnitType.Special_Mature_Chrysalis, 0);
        fields.get("canProduce").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("canAttack").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("canMove").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isFlyer").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("regeneratesHP").set(UnitType.Special_Mature_Chrysalis, true);
        fields.get("isSpellcaster").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isInvincible").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isOrganic").set(UnitType.Special_Mature_Chrysalis, true);
        fields.get("isMechanical").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isRobotic").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isDetector").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isResourceContainer").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isResourceDepot").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isRefinery").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isWorker").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("requiresPsi").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("requiresCreep").set(UnitType.Special_Mature_Chrysalis, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isBurrowable").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isCloakable").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isBuilding").set(UnitType.Special_Mature_Chrysalis, true);
        fields.get("isAddon").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isNeutral").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isHero").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isPowerup").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isBeacon").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Mature_Chrysalis, true);
        fields.get("isSpell").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("producesCreep").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("producesLarva").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isMineralField").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("isCritter").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("canBuildAddon").set(UnitType.Special_Mature_Chrysalis, false);
        fields.get("researchesWhat").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Cerebrate() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Cerebrate, 151);
        fields.get("race").set(UnitType.Special_Cerebrate, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Cerebrate, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Cerebrate, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Cerebrate, TechType.None);
        fields.get("abilities").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Cerebrate, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Cerebrate, 1500);
        fields.get("maxShields").set(UnitType.Special_Cerebrate, 0);
        fields.get("maxEnergy").set(UnitType.Special_Cerebrate, 0);
        fields.get("armor").set(UnitType.Special_Cerebrate, 1);
        fields.get("mineralPrice").set(UnitType.Special_Cerebrate, 0);
        fields.get("gasPrice").set(UnitType.Special_Cerebrate, 0);
        fields.get("buildTime").set(UnitType.Special_Cerebrate, 0);
        fields.get("supplyRequired").set(UnitType.Special_Cerebrate, 0);
        fields.get("supplyProvided").set(UnitType.Special_Cerebrate, 0);
        fields.get("spaceRequired").set(UnitType.Special_Cerebrate, 255);
        fields.get("spaceProvided").set(UnitType.Special_Cerebrate, 0);
        fields.get("buildScore").set(UnitType.Special_Cerebrate, 0);
        fields.get("destroyScore").set(UnitType.Special_Cerebrate, 2500);
        fields.get("size").set(UnitType.Special_Cerebrate, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Cerebrate, 3);
        fields.get("tileHeight").set(UnitType.Special_Cerebrate, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Cerebrate, 40);
        fields.get("dimensionUp").set(UnitType.Special_Cerebrate, 32);
        fields.get("dimensionRight").set(UnitType.Special_Cerebrate, 32);
        fields.get("dimensionDown").set(UnitType.Special_Cerebrate, 31);
        fields.get("width").set(UnitType.Special_Cerebrate, 73);
        fields.get("height").set(UnitType.Special_Cerebrate, 64);
        fields.get("seekRange").set(UnitType.Special_Cerebrate, 0);
        fields.get("sightRange").set(UnitType.Special_Cerebrate, 256);
        fields.get("groundWeapon").set(UnitType.Special_Cerebrate, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Cerebrate, 0);
        fields.get("airWeapon").set(UnitType.Special_Cerebrate, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Cerebrate, 0);
        fields.get("topSpeed").set(UnitType.Special_Cerebrate, 0.0);
        fields.get("acceleration").set(UnitType.Special_Cerebrate, 0);
        fields.get("haltDistance").set(UnitType.Special_Cerebrate, 0);
        fields.get("turnRadius").set(UnitType.Special_Cerebrate, 0);
        fields.get("canProduce").set(UnitType.Special_Cerebrate, false);
        fields.get("canAttack").set(UnitType.Special_Cerebrate, false);
        fields.get("canMove").set(UnitType.Special_Cerebrate, false);
        fields.get("isFlyer").set(UnitType.Special_Cerebrate, false);
        fields.get("regeneratesHP").set(UnitType.Special_Cerebrate, true);
        fields.get("isSpellcaster").set(UnitType.Special_Cerebrate, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Cerebrate, false);
        fields.get("isInvincible").set(UnitType.Special_Cerebrate, false);
        fields.get("isOrganic").set(UnitType.Special_Cerebrate, true);
        fields.get("isMechanical").set(UnitType.Special_Cerebrate, false);
        fields.get("isRobotic").set(UnitType.Special_Cerebrate, false);
        fields.get("isDetector").set(UnitType.Special_Cerebrate, true);
        fields.get("isResourceContainer").set(UnitType.Special_Cerebrate, false);
        fields.get("isResourceDepot").set(UnitType.Special_Cerebrate, false);
        fields.get("isRefinery").set(UnitType.Special_Cerebrate, false);
        fields.get("isWorker").set(UnitType.Special_Cerebrate, false);
        fields.get("requiresPsi").set(UnitType.Special_Cerebrate, false);
        fields.get("requiresCreep").set(UnitType.Special_Cerebrate, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Cerebrate, false);
        fields.get("isBurrowable").set(UnitType.Special_Cerebrate, false);
        fields.get("isCloakable").set(UnitType.Special_Cerebrate, false);
        fields.get("isBuilding").set(UnitType.Special_Cerebrate, true);
        fields.get("isAddon").set(UnitType.Special_Cerebrate, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Cerebrate, false);
        fields.get("isNeutral").set(UnitType.Special_Cerebrate, false);
        fields.get("isHero").set(UnitType.Special_Cerebrate, false);
        fields.get("isPowerup").set(UnitType.Special_Cerebrate, false);
        fields.get("isBeacon").set(UnitType.Special_Cerebrate, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Cerebrate, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Cerebrate, true);
        fields.get("isSpell").set(UnitType.Special_Cerebrate, false);
        fields.get("producesCreep").set(UnitType.Special_Cerebrate, false);
        fields.get("producesLarva").set(UnitType.Special_Cerebrate, false);
        fields.get("isMineralField").set(UnitType.Special_Cerebrate, false);
        fields.get("isCritter").set(UnitType.Special_Cerebrate, false);
        fields.get("canBuildAddon").set(UnitType.Special_Cerebrate, false);
        fields.get("researchesWhat").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Cerebrate_Daggoth() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Cerebrate_Daggoth, 152);
        fields.get("race").set(UnitType.Special_Cerebrate_Daggoth, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Cerebrate_Daggoth, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Cerebrate_Daggoth, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Cerebrate_Daggoth, TechType.None);
        fields.get("abilities").set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Cerebrate_Daggoth, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Cerebrate_Daggoth, 1500);
        fields.get("maxShields").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("maxEnergy").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("armor").set(UnitType.Special_Cerebrate_Daggoth, 1);
        fields.get("mineralPrice").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("gasPrice").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("buildTime").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("supplyRequired").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("supplyProvided").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("spaceRequired").set(UnitType.Special_Cerebrate_Daggoth, 255);
        fields.get("spaceProvided").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("buildScore").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("destroyScore").set(UnitType.Special_Cerebrate_Daggoth, 2500);
        fields.get("size").set(UnitType.Special_Cerebrate_Daggoth, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Cerebrate_Daggoth, 3);
        fields.get("tileHeight").set(UnitType.Special_Cerebrate_Daggoth, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Cerebrate_Daggoth, 40);
        fields.get("dimensionUp").set(UnitType.Special_Cerebrate_Daggoth, 32);
        fields.get("dimensionRight").set(UnitType.Special_Cerebrate_Daggoth, 32);
        fields.get("dimensionDown").set(UnitType.Special_Cerebrate_Daggoth, 31);
        fields.get("width").set(UnitType.Special_Cerebrate_Daggoth, 73);
        fields.get("height").set(UnitType.Special_Cerebrate_Daggoth, 64);
        fields.get("seekRange").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("sightRange").set(UnitType.Special_Cerebrate_Daggoth, 256);
        fields.get("groundWeapon").set(UnitType.Special_Cerebrate_Daggoth, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("airWeapon").set(UnitType.Special_Cerebrate_Daggoth, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("topSpeed").set(UnitType.Special_Cerebrate_Daggoth, 0.0);
        fields.get("acceleration").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("haltDistance").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("turnRadius").set(UnitType.Special_Cerebrate_Daggoth, 0);
        fields.get("canProduce").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("canAttack").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("canMove").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isFlyer").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("regeneratesHP").set(UnitType.Special_Cerebrate_Daggoth, true);
        fields.get("isSpellcaster").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isInvincible").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isOrganic").set(UnitType.Special_Cerebrate_Daggoth, true);
        fields.get("isMechanical").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isRobotic").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isDetector").set(UnitType.Special_Cerebrate_Daggoth, true);
        fields.get("isResourceContainer").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isResourceDepot").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isRefinery").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isWorker").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("requiresPsi").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("requiresCreep").set(UnitType.Special_Cerebrate_Daggoth, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isBurrowable").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isCloakable").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isBuilding").set(UnitType.Special_Cerebrate_Daggoth, true);
        fields.get("isAddon").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isNeutral").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isHero").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isPowerup").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isBeacon").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Cerebrate_Daggoth, true);
        fields.get("isSpell").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("producesCreep").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("producesLarva").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isMineralField").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("isCritter").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("canBuildAddon").set(UnitType.Special_Cerebrate_Daggoth, false);
        fields.get("researchesWhat").set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Zerg2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Zerg2, 0);
        fields.get("race").set(UnitType.Unused_Zerg2, null);
        fields.get("whatBuilds").set(UnitType.Unused_Zerg2, null);
        fields.get("requiredUnits").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Zerg2, null);
        fields.get("cloakingTech").set(UnitType.Unused_Zerg2, null);
        fields.get("abilities").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Zerg2, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Zerg2, 0);
        fields.get("maxShields").set(UnitType.Unused_Zerg2, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Zerg2, 0);
        fields.get("armor").set(UnitType.Unused_Zerg2, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Zerg2, 0);
        fields.get("gasPrice").set(UnitType.Unused_Zerg2, 0);
        fields.get("buildTime").set(UnitType.Unused_Zerg2, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Zerg2, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Zerg2, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Zerg2, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Zerg2, 0);
        fields.get("buildScore").set(UnitType.Unused_Zerg2, 0);
        fields.get("destroyScore").set(UnitType.Unused_Zerg2, 0);
        fields.get("size").set(UnitType.Unused_Zerg2, null);
        fields.get("tileWidth").set(UnitType.Unused_Zerg2, 0);
        fields.get("tileHeight").set(UnitType.Unused_Zerg2, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Zerg2, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Zerg2, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Zerg2, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Zerg2, 0);
        fields.get("width").set(UnitType.Unused_Zerg2, 0);
        fields.get("height").set(UnitType.Unused_Zerg2, 0);
        fields.get("seekRange").set(UnitType.Unused_Zerg2, 0);
        fields.get("sightRange").set(UnitType.Unused_Zerg2, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Zerg2, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Zerg2, 0);
        fields.get("airWeapon").set(UnitType.Unused_Zerg2, null);
        fields.get("maxAirHits").set(UnitType.Unused_Zerg2, 0);
        fields.get("topSpeed").set(UnitType.Unused_Zerg2, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Zerg2, 0);
        fields.get("haltDistance").set(UnitType.Unused_Zerg2, 0);
        fields.get("turnRadius").set(UnitType.Unused_Zerg2, 0);
        fields.get("canProduce").set(UnitType.Unused_Zerg2, false);
        fields.get("canAttack").set(UnitType.Unused_Zerg2, false);
        fields.get("canMove").set(UnitType.Unused_Zerg2, false);
        fields.get("isFlyer").set(UnitType.Unused_Zerg2, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Zerg2, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Zerg2, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Zerg2, false);
        fields.get("isInvincible").set(UnitType.Unused_Zerg2, false);
        fields.get("isOrganic").set(UnitType.Unused_Zerg2, false);
        fields.get("isMechanical").set(UnitType.Unused_Zerg2, false);
        fields.get("isRobotic").set(UnitType.Unused_Zerg2, false);
        fields.get("isDetector").set(UnitType.Unused_Zerg2, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Zerg2, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Zerg2, false);
        fields.get("isRefinery").set(UnitType.Unused_Zerg2, false);
        fields.get("isWorker").set(UnitType.Unused_Zerg2, false);
        fields.get("requiresPsi").set(UnitType.Unused_Zerg2, false);
        fields.get("requiresCreep").set(UnitType.Unused_Zerg2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Zerg2, false);
        fields.get("isBurrowable").set(UnitType.Unused_Zerg2, false);
        fields.get("isCloakable").set(UnitType.Unused_Zerg2, false);
        fields.get("isBuilding").set(UnitType.Unused_Zerg2, false);
        fields.get("isAddon").set(UnitType.Unused_Zerg2, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Zerg2, false);
        fields.get("isNeutral").set(UnitType.Unused_Zerg2, false);
        fields.get("isHero").set(UnitType.Unused_Zerg2, false);
        fields.get("isPowerup").set(UnitType.Unused_Zerg2, false);
        fields.get("isBeacon").set(UnitType.Unused_Zerg2, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Zerg2, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Zerg2, false);
        fields.get("isSpell").set(UnitType.Unused_Zerg2, false);
        fields.get("producesCreep").set(UnitType.Unused_Zerg2, false);
        fields.get("producesLarva").set(UnitType.Unused_Zerg2, false);
        fields.get("isMineralField").set(UnitType.Unused_Zerg2, false);
        fields.get("isCritter").set(UnitType.Unused_Zerg2, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Zerg2, false);
        fields.get("researchesWhat").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Nexus() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Nexus, 154);
        fields.get("race").set(UnitType.Protoss_Nexus, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Nexus, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList(UnitType.Protoss_Probe)));
        fields.get("requiredTech").set(UnitType.Protoss_Nexus, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Nexus, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Nexus, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Nexus, 750);
        fields.get("maxShields").set(UnitType.Protoss_Nexus, 750);
        fields.get("maxEnergy").set(UnitType.Protoss_Nexus, 0);
        fields.get("armor").set(UnitType.Protoss_Nexus, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Nexus, 400);
        fields.get("gasPrice").set(UnitType.Protoss_Nexus, 0);
        fields.get("buildTime").set(UnitType.Protoss_Nexus, 1800);
        fields.get("supplyRequired").set(UnitType.Protoss_Nexus, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Nexus, 18);
        fields.get("spaceRequired").set(UnitType.Protoss_Nexus, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Nexus, 0);
        fields.get("buildScore").set(UnitType.Protoss_Nexus, 400);
        fields.get("destroyScore").set(UnitType.Protoss_Nexus, 1200);
        fields.get("size").set(UnitType.Protoss_Nexus, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Nexus, 4);
        fields.get("tileHeight").set(UnitType.Protoss_Nexus, 3);
        fields.get("dimensionLeft").set(UnitType.Protoss_Nexus, 56);
        fields.get("dimensionUp").set(UnitType.Protoss_Nexus, 39);
        fields.get("dimensionRight").set(UnitType.Protoss_Nexus, 56);
        fields.get("dimensionDown").set(UnitType.Protoss_Nexus, 39);
        fields.get("width").set(UnitType.Protoss_Nexus, 113);
        fields.get("height").set(UnitType.Protoss_Nexus, 79);
        fields.get("seekRange").set(UnitType.Protoss_Nexus, 0);
        fields.get("sightRange").set(UnitType.Protoss_Nexus, 352);
        fields.get("groundWeapon").set(UnitType.Protoss_Nexus, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Nexus, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Nexus, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Nexus, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Nexus, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Nexus, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Nexus, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Nexus, 0);
        fields.get("canProduce").set(UnitType.Protoss_Nexus, true);
        fields.get("canAttack").set(UnitType.Protoss_Nexus, false);
        fields.get("canMove").set(UnitType.Protoss_Nexus, false);
        fields.get("isFlyer").set(UnitType.Protoss_Nexus, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Nexus, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Nexus, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Nexus, false);
        fields.get("isInvincible").set(UnitType.Protoss_Nexus, false);
        fields.get("isOrganic").set(UnitType.Protoss_Nexus, false);
        fields.get("isMechanical").set(UnitType.Protoss_Nexus, true);
        fields.get("isRobotic").set(UnitType.Protoss_Nexus, false);
        fields.get("isDetector").set(UnitType.Protoss_Nexus, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Nexus, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Nexus, true);
        fields.get("isRefinery").set(UnitType.Protoss_Nexus, false);
        fields.get("isWorker").set(UnitType.Protoss_Nexus, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Nexus, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Nexus, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Nexus, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Nexus, false);
        fields.get("isCloakable").set(UnitType.Protoss_Nexus, false);
        fields.get("isBuilding").set(UnitType.Protoss_Nexus, true);
        fields.get("isAddon").set(UnitType.Protoss_Nexus, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Nexus, false);
        fields.get("isNeutral").set(UnitType.Protoss_Nexus, false);
        fields.get("isHero").set(UnitType.Protoss_Nexus, false);
        fields.get("isPowerup").set(UnitType.Protoss_Nexus, false);
        fields.get("isBeacon").set(UnitType.Protoss_Nexus, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Nexus, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Nexus, false);
        fields.get("isSpell").set(UnitType.Protoss_Nexus, false);
        fields.get("producesCreep").set(UnitType.Protoss_Nexus, false);
        fields.get("producesLarva").set(UnitType.Protoss_Nexus, false);
        fields.get("isMineralField").set(UnitType.Protoss_Nexus, false);
        fields.get("isCritter").set(UnitType.Protoss_Nexus, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Nexus, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Robotics_Facility() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Robotics_Facility, 155);
        fields.get("race").set(UnitType.Protoss_Robotics_Facility, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Robotics_Facility, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Cybernetics_Core)));
        fields.get("requiredTech").set(UnitType.Protoss_Robotics_Facility, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Robotics_Facility, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Robotics_Facility, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Robotics_Facility, 500);
        fields.get("maxShields").set(UnitType.Protoss_Robotics_Facility, 500);
        fields.get("maxEnergy").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("armor").set(UnitType.Protoss_Robotics_Facility, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Robotics_Facility, 200);
        fields.get("gasPrice").set(UnitType.Protoss_Robotics_Facility, 200);
        fields.get("buildTime").set(UnitType.Protoss_Robotics_Facility, 1200);
        fields.get("supplyRequired").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Robotics_Facility, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("buildScore").set(UnitType.Protoss_Robotics_Facility, 300);
        fields.get("destroyScore").set(UnitType.Protoss_Robotics_Facility, 900);
        fields.get("size").set(UnitType.Protoss_Robotics_Facility, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Robotics_Facility, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Robotics_Facility, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Robotics_Facility, 36);
        fields.get("dimensionUp").set(UnitType.Protoss_Robotics_Facility, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Robotics_Facility, 40);
        fields.get("dimensionDown").set(UnitType.Protoss_Robotics_Facility, 20);
        fields.get("width").set(UnitType.Protoss_Robotics_Facility, 77);
        fields.get("height").set(UnitType.Protoss_Robotics_Facility, 37);
        fields.get("seekRange").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("sightRange").set(UnitType.Protoss_Robotics_Facility, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Robotics_Facility, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Robotics_Facility, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Robotics_Facility, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Robotics_Facility, 0);
        fields.get("canProduce").set(UnitType.Protoss_Robotics_Facility, true);
        fields.get("canAttack").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("canMove").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isFlyer").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isInvincible").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isOrganic").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isMechanical").set(UnitType.Protoss_Robotics_Facility, true);
        fields.get("isRobotic").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isDetector").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isRefinery").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isWorker").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Robotics_Facility, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isCloakable").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isBuilding").set(UnitType.Protoss_Robotics_Facility, true);
        fields.get("isAddon").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isNeutral").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isHero").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isPowerup").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isBeacon").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isSpell").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("producesCreep").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("producesLarva").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isMineralField").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("isCritter").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Robotics_Facility, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Pylon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Pylon, 156);
        fields.get("race").set(UnitType.Protoss_Pylon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Pylon, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList(UnitType.Protoss_Probe)));
        fields.get("requiredTech").set(UnitType.Protoss_Pylon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Pylon, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Pylon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Pylon, 300);
        fields.get("maxShields").set(UnitType.Protoss_Pylon, 300);
        fields.get("maxEnergy").set(UnitType.Protoss_Pylon, 0);
        fields.get("armor").set(UnitType.Protoss_Pylon, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Pylon, 100);
        fields.get("gasPrice").set(UnitType.Protoss_Pylon, 0);
        fields.get("buildTime").set(UnitType.Protoss_Pylon, 450);
        fields.get("supplyRequired").set(UnitType.Protoss_Pylon, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Pylon, 16);
        fields.get("spaceRequired").set(UnitType.Protoss_Pylon, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Pylon, 0);
        fields.get("buildScore").set(UnitType.Protoss_Pylon, 50);
        fields.get("destroyScore").set(UnitType.Protoss_Pylon, 150);
        fields.get("size").set(UnitType.Protoss_Pylon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Pylon, 2);
        fields.get("tileHeight").set(UnitType.Protoss_Pylon, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Pylon, 16);
        fields.get("dimensionUp").set(UnitType.Protoss_Pylon, 12);
        fields.get("dimensionRight").set(UnitType.Protoss_Pylon, 16);
        fields.get("dimensionDown").set(UnitType.Protoss_Pylon, 20);
        fields.get("width").set(UnitType.Protoss_Pylon, 33);
        fields.get("height").set(UnitType.Protoss_Pylon, 33);
        fields.get("seekRange").set(UnitType.Protoss_Pylon, 0);
        fields.get("sightRange").set(UnitType.Protoss_Pylon, 256);
        fields.get("groundWeapon").set(UnitType.Protoss_Pylon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Pylon, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Pylon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Pylon, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Pylon, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Pylon, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Pylon, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Pylon, 0);
        fields.get("canProduce").set(UnitType.Protoss_Pylon, false);
        fields.get("canAttack").set(UnitType.Protoss_Pylon, false);
        fields.get("canMove").set(UnitType.Protoss_Pylon, false);
        fields.get("isFlyer").set(UnitType.Protoss_Pylon, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Pylon, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Pylon, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Pylon, false);
        fields.get("isInvincible").set(UnitType.Protoss_Pylon, false);
        fields.get("isOrganic").set(UnitType.Protoss_Pylon, false);
        fields.get("isMechanical").set(UnitType.Protoss_Pylon, true);
        fields.get("isRobotic").set(UnitType.Protoss_Pylon, false);
        fields.get("isDetector").set(UnitType.Protoss_Pylon, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Pylon, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Pylon, false);
        fields.get("isRefinery").set(UnitType.Protoss_Pylon, false);
        fields.get("isWorker").set(UnitType.Protoss_Pylon, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Pylon, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Pylon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Pylon, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Pylon, false);
        fields.get("isCloakable").set(UnitType.Protoss_Pylon, false);
        fields.get("isBuilding").set(UnitType.Protoss_Pylon, true);
        fields.get("isAddon").set(UnitType.Protoss_Pylon, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Pylon, false);
        fields.get("isNeutral").set(UnitType.Protoss_Pylon, false);
        fields.get("isHero").set(UnitType.Protoss_Pylon, false);
        fields.get("isPowerup").set(UnitType.Protoss_Pylon, false);
        fields.get("isBeacon").set(UnitType.Protoss_Pylon, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Pylon, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Pylon, false);
        fields.get("isSpell").set(UnitType.Protoss_Pylon, false);
        fields.get("producesCreep").set(UnitType.Protoss_Pylon, false);
        fields.get("producesLarva").set(UnitType.Protoss_Pylon, false);
        fields.get("isMineralField").set(UnitType.Protoss_Pylon, false);
        fields.get("isCritter").set(UnitType.Protoss_Pylon, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Pylon, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Assimilator() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Assimilator, 157);
        fields.get("race").set(UnitType.Protoss_Assimilator, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Assimilator, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList(UnitType.Protoss_Probe)));
        fields.get("requiredTech").set(UnitType.Protoss_Assimilator, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Assimilator, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Assimilator, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Assimilator, 450);
        fields.get("maxShields").set(UnitType.Protoss_Assimilator, 450);
        fields.get("maxEnergy").set(UnitType.Protoss_Assimilator, 0);
        fields.get("armor").set(UnitType.Protoss_Assimilator, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Assimilator, 100);
        fields.get("gasPrice").set(UnitType.Protoss_Assimilator, 0);
        fields.get("buildTime").set(UnitType.Protoss_Assimilator, 600);
        fields.get("supplyRequired").set(UnitType.Protoss_Assimilator, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Assimilator, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Assimilator, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Assimilator, 0);
        fields.get("buildScore").set(UnitType.Protoss_Assimilator, 50);
        fields.get("destroyScore").set(UnitType.Protoss_Assimilator, 150);
        fields.get("size").set(UnitType.Protoss_Assimilator, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Assimilator, 4);
        fields.get("tileHeight").set(UnitType.Protoss_Assimilator, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Assimilator, 48);
        fields.get("dimensionUp").set(UnitType.Protoss_Assimilator, 32);
        fields.get("dimensionRight").set(UnitType.Protoss_Assimilator, 48);
        fields.get("dimensionDown").set(UnitType.Protoss_Assimilator, 24);
        fields.get("width").set(UnitType.Protoss_Assimilator, 97);
        fields.get("height").set(UnitType.Protoss_Assimilator, 57);
        fields.get("seekRange").set(UnitType.Protoss_Assimilator, 0);
        fields.get("sightRange").set(UnitType.Protoss_Assimilator, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Assimilator, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Assimilator, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Assimilator, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Assimilator, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Assimilator, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Assimilator, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Assimilator, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Assimilator, 0);
        fields.get("canProduce").set(UnitType.Protoss_Assimilator, false);
        fields.get("canAttack").set(UnitType.Protoss_Assimilator, false);
        fields.get("canMove").set(UnitType.Protoss_Assimilator, false);
        fields.get("isFlyer").set(UnitType.Protoss_Assimilator, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Assimilator, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Assimilator, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Assimilator, false);
        fields.get("isInvincible").set(UnitType.Protoss_Assimilator, false);
        fields.get("isOrganic").set(UnitType.Protoss_Assimilator, false);
        fields.get("isMechanical").set(UnitType.Protoss_Assimilator, true);
        fields.get("isRobotic").set(UnitType.Protoss_Assimilator, false);
        fields.get("isDetector").set(UnitType.Protoss_Assimilator, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Assimilator, true);
        fields.get("isResourceDepot").set(UnitType.Protoss_Assimilator, false);
        fields.get("isRefinery").set(UnitType.Protoss_Assimilator, true);
        fields.get("isWorker").set(UnitType.Protoss_Assimilator, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Assimilator, false);
        fields.get("requiresCreep").set(UnitType.Protoss_Assimilator, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Assimilator, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Assimilator, false);
        fields.get("isCloakable").set(UnitType.Protoss_Assimilator, false);
        fields.get("isBuilding").set(UnitType.Protoss_Assimilator, true);
        fields.get("isAddon").set(UnitType.Protoss_Assimilator, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Assimilator, false);
        fields.get("isNeutral").set(UnitType.Protoss_Assimilator, false);
        fields.get("isHero").set(UnitType.Protoss_Assimilator, false);
        fields.get("isPowerup").set(UnitType.Protoss_Assimilator, false);
        fields.get("isBeacon").set(UnitType.Protoss_Assimilator, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Assimilator, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Assimilator, false);
        fields.get("isSpell").set(UnitType.Protoss_Assimilator, false);
        fields.get("producesCreep").set(UnitType.Protoss_Assimilator, false);
        fields.get("producesLarva").set(UnitType.Protoss_Assimilator, false);
        fields.get("isMineralField").set(UnitType.Protoss_Assimilator, false);
        fields.get("isCritter").set(UnitType.Protoss_Assimilator, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Assimilator, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Protoss1() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Protoss1, 0);
        fields.get("race").set(UnitType.Unused_Protoss1, null);
        fields.get("whatBuilds").set(UnitType.Unused_Protoss1, null);
        fields.get("requiredUnits").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Protoss1, null);
        fields.get("cloakingTech").set(UnitType.Unused_Protoss1, null);
        fields.get("abilities").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Protoss1, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Protoss1, 0);
        fields.get("maxShields").set(UnitType.Unused_Protoss1, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Protoss1, 0);
        fields.get("armor").set(UnitType.Unused_Protoss1, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Protoss1, 0);
        fields.get("gasPrice").set(UnitType.Unused_Protoss1, 0);
        fields.get("buildTime").set(UnitType.Unused_Protoss1, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Protoss1, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Protoss1, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Protoss1, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Protoss1, 0);
        fields.get("buildScore").set(UnitType.Unused_Protoss1, 0);
        fields.get("destroyScore").set(UnitType.Unused_Protoss1, 0);
        fields.get("size").set(UnitType.Unused_Protoss1, null);
        fields.get("tileWidth").set(UnitType.Unused_Protoss1, 0);
        fields.get("tileHeight").set(UnitType.Unused_Protoss1, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Protoss1, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Protoss1, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Protoss1, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Protoss1, 0);
        fields.get("width").set(UnitType.Unused_Protoss1, 0);
        fields.get("height").set(UnitType.Unused_Protoss1, 0);
        fields.get("seekRange").set(UnitType.Unused_Protoss1, 0);
        fields.get("sightRange").set(UnitType.Unused_Protoss1, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Protoss1, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Protoss1, 0);
        fields.get("airWeapon").set(UnitType.Unused_Protoss1, null);
        fields.get("maxAirHits").set(UnitType.Unused_Protoss1, 0);
        fields.get("topSpeed").set(UnitType.Unused_Protoss1, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Protoss1, 0);
        fields.get("haltDistance").set(UnitType.Unused_Protoss1, 0);
        fields.get("turnRadius").set(UnitType.Unused_Protoss1, 0);
        fields.get("canProduce").set(UnitType.Unused_Protoss1, false);
        fields.get("canAttack").set(UnitType.Unused_Protoss1, false);
        fields.get("canMove").set(UnitType.Unused_Protoss1, false);
        fields.get("isFlyer").set(UnitType.Unused_Protoss1, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Protoss1, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Protoss1, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Protoss1, false);
        fields.get("isInvincible").set(UnitType.Unused_Protoss1, false);
        fields.get("isOrganic").set(UnitType.Unused_Protoss1, false);
        fields.get("isMechanical").set(UnitType.Unused_Protoss1, false);
        fields.get("isRobotic").set(UnitType.Unused_Protoss1, false);
        fields.get("isDetector").set(UnitType.Unused_Protoss1, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Protoss1, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Protoss1, false);
        fields.get("isRefinery").set(UnitType.Unused_Protoss1, false);
        fields.get("isWorker").set(UnitType.Unused_Protoss1, false);
        fields.get("requiresPsi").set(UnitType.Unused_Protoss1, false);
        fields.get("requiresCreep").set(UnitType.Unused_Protoss1, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Protoss1, false);
        fields.get("isBurrowable").set(UnitType.Unused_Protoss1, false);
        fields.get("isCloakable").set(UnitType.Unused_Protoss1, false);
        fields.get("isBuilding").set(UnitType.Unused_Protoss1, false);
        fields.get("isAddon").set(UnitType.Unused_Protoss1, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Protoss1, false);
        fields.get("isNeutral").set(UnitType.Unused_Protoss1, false);
        fields.get("isHero").set(UnitType.Unused_Protoss1, false);
        fields.get("isPowerup").set(UnitType.Unused_Protoss1, false);
        fields.get("isBeacon").set(UnitType.Unused_Protoss1, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Protoss1, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Protoss1, false);
        fields.get("isSpell").set(UnitType.Unused_Protoss1, false);
        fields.get("producesCreep").set(UnitType.Unused_Protoss1, false);
        fields.get("producesLarva").set(UnitType.Unused_Protoss1, false);
        fields.get("isMineralField").set(UnitType.Unused_Protoss1, false);
        fields.get("isCritter").set(UnitType.Unused_Protoss1, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Protoss1, false);
        fields.get("researchesWhat").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Observatory() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Observatory, 159);
        fields.get("race").set(UnitType.Protoss_Observatory, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Observatory, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Robotics_Facility)));
        fields.get("requiredTech").set(UnitType.Protoss_Observatory, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Observatory, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Observatory, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Observatory, 250);
        fields.get("maxShields").set(UnitType.Protoss_Observatory, 250);
        fields.get("maxEnergy").set(UnitType.Protoss_Observatory, 0);
        fields.get("armor").set(UnitType.Protoss_Observatory, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Observatory, 50);
        fields.get("gasPrice").set(UnitType.Protoss_Observatory, 100);
        fields.get("buildTime").set(UnitType.Protoss_Observatory, 450);
        fields.get("supplyRequired").set(UnitType.Protoss_Observatory, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Observatory, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Observatory, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Observatory, 0);
        fields.get("buildScore").set(UnitType.Protoss_Observatory, 175);
        fields.get("destroyScore").set(UnitType.Protoss_Observatory, 525);
        fields.get("size").set(UnitType.Protoss_Observatory, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Observatory, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Observatory, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Observatory, 44);
        fields.get("dimensionUp").set(UnitType.Protoss_Observatory, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Observatory, 44);
        fields.get("dimensionDown").set(UnitType.Protoss_Observatory, 28);
        fields.get("width").set(UnitType.Protoss_Observatory, 89);
        fields.get("height").set(UnitType.Protoss_Observatory, 45);
        fields.get("seekRange").set(UnitType.Protoss_Observatory, 0);
        fields.get("sightRange").set(UnitType.Protoss_Observatory, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Observatory, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Observatory, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Observatory, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Observatory, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Observatory, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Observatory, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Observatory, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Observatory, 0);
        fields.get("canProduce").set(UnitType.Protoss_Observatory, false);
        fields.get("canAttack").set(UnitType.Protoss_Observatory, false);
        fields.get("canMove").set(UnitType.Protoss_Observatory, false);
        fields.get("isFlyer").set(UnitType.Protoss_Observatory, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Observatory, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Observatory, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Observatory, false);
        fields.get("isInvincible").set(UnitType.Protoss_Observatory, false);
        fields.get("isOrganic").set(UnitType.Protoss_Observatory, false);
        fields.get("isMechanical").set(UnitType.Protoss_Observatory, true);
        fields.get("isRobotic").set(UnitType.Protoss_Observatory, false);
        fields.get("isDetector").set(UnitType.Protoss_Observatory, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Observatory, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Observatory, false);
        fields.get("isRefinery").set(UnitType.Protoss_Observatory, false);
        fields.get("isWorker").set(UnitType.Protoss_Observatory, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Observatory, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Observatory, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Observatory, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Observatory, false);
        fields.get("isCloakable").set(UnitType.Protoss_Observatory, false);
        fields.get("isBuilding").set(UnitType.Protoss_Observatory, true);
        fields.get("isAddon").set(UnitType.Protoss_Observatory, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Observatory, false);
        fields.get("isNeutral").set(UnitType.Protoss_Observatory, false);
        fields.get("isHero").set(UnitType.Protoss_Observatory, false);
        fields.get("isPowerup").set(UnitType.Protoss_Observatory, false);
        fields.get("isBeacon").set(UnitType.Protoss_Observatory, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Observatory, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Observatory, false);
        fields.get("isSpell").set(UnitType.Protoss_Observatory, false);
        fields.get("producesCreep").set(UnitType.Protoss_Observatory, false);
        fields.get("producesLarva").set(UnitType.Protoss_Observatory, false);
        fields.get("isMineralField").set(UnitType.Protoss_Observatory, false);
        fields.get("isCritter").set(UnitType.Protoss_Observatory, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Observatory, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList(UpgradeType.Sensor_Array, UpgradeType.Gravitic_Boosters)));
    }
    private void initializeUnitType_Protoss_Gateway() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Gateway, 160);
        fields.get("race").set(UnitType.Protoss_Gateway, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Gateway, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Nexus)));
        fields.get("requiredTech").set(UnitType.Protoss_Gateway, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Gateway, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Gateway, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Gateway, 500);
        fields.get("maxShields").set(UnitType.Protoss_Gateway, 500);
        fields.get("maxEnergy").set(UnitType.Protoss_Gateway, 0);
        fields.get("armor").set(UnitType.Protoss_Gateway, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Gateway, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Gateway, 0);
        fields.get("buildTime").set(UnitType.Protoss_Gateway, 900);
        fields.get("supplyRequired").set(UnitType.Protoss_Gateway, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Gateway, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Gateway, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Gateway, 0);
        fields.get("buildScore").set(UnitType.Protoss_Gateway, 75);
        fields.get("destroyScore").set(UnitType.Protoss_Gateway, 225);
        fields.get("size").set(UnitType.Protoss_Gateway, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Gateway, 4);
        fields.get("tileHeight").set(UnitType.Protoss_Gateway, 3);
        fields.get("dimensionLeft").set(UnitType.Protoss_Gateway, 48);
        fields.get("dimensionUp").set(UnitType.Protoss_Gateway, 32);
        fields.get("dimensionRight").set(UnitType.Protoss_Gateway, 48);
        fields.get("dimensionDown").set(UnitType.Protoss_Gateway, 40);
        fields.get("width").set(UnitType.Protoss_Gateway, 97);
        fields.get("height").set(UnitType.Protoss_Gateway, 73);
        fields.get("seekRange").set(UnitType.Protoss_Gateway, 0);
        fields.get("sightRange").set(UnitType.Protoss_Gateway, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Gateway, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Gateway, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Gateway, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Gateway, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Gateway, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Gateway, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Gateway, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Gateway, 0);
        fields.get("canProduce").set(UnitType.Protoss_Gateway, true);
        fields.get("canAttack").set(UnitType.Protoss_Gateway, false);
        fields.get("canMove").set(UnitType.Protoss_Gateway, false);
        fields.get("isFlyer").set(UnitType.Protoss_Gateway, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Gateway, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Gateway, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Gateway, false);
        fields.get("isInvincible").set(UnitType.Protoss_Gateway, false);
        fields.get("isOrganic").set(UnitType.Protoss_Gateway, false);
        fields.get("isMechanical").set(UnitType.Protoss_Gateway, true);
        fields.get("isRobotic").set(UnitType.Protoss_Gateway, false);
        fields.get("isDetector").set(UnitType.Protoss_Gateway, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Gateway, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Gateway, false);
        fields.get("isRefinery").set(UnitType.Protoss_Gateway, false);
        fields.get("isWorker").set(UnitType.Protoss_Gateway, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Gateway, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Gateway, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Gateway, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Gateway, false);
        fields.get("isCloakable").set(UnitType.Protoss_Gateway, false);
        fields.get("isBuilding").set(UnitType.Protoss_Gateway, true);
        fields.get("isAddon").set(UnitType.Protoss_Gateway, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Gateway, false);
        fields.get("isNeutral").set(UnitType.Protoss_Gateway, false);
        fields.get("isHero").set(UnitType.Protoss_Gateway, false);
        fields.get("isPowerup").set(UnitType.Protoss_Gateway, false);
        fields.get("isBeacon").set(UnitType.Protoss_Gateway, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Gateway, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Gateway, false);
        fields.get("isSpell").set(UnitType.Protoss_Gateway, false);
        fields.get("producesCreep").set(UnitType.Protoss_Gateway, false);
        fields.get("producesLarva").set(UnitType.Protoss_Gateway, false);
        fields.get("isMineralField").set(UnitType.Protoss_Gateway, false);
        fields.get("isCritter").set(UnitType.Protoss_Gateway, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Gateway, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Protoss2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Protoss2, 0);
        fields.get("race").set(UnitType.Unused_Protoss2, null);
        fields.get("whatBuilds").set(UnitType.Unused_Protoss2, null);
        fields.get("requiredUnits").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Protoss2, null);
        fields.get("cloakingTech").set(UnitType.Unused_Protoss2, null);
        fields.get("abilities").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Protoss2, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Protoss2, 0);
        fields.get("maxShields").set(UnitType.Unused_Protoss2, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Protoss2, 0);
        fields.get("armor").set(UnitType.Unused_Protoss2, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Protoss2, 0);
        fields.get("gasPrice").set(UnitType.Unused_Protoss2, 0);
        fields.get("buildTime").set(UnitType.Unused_Protoss2, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Protoss2, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Protoss2, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Protoss2, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Protoss2, 0);
        fields.get("buildScore").set(UnitType.Unused_Protoss2, 0);
        fields.get("destroyScore").set(UnitType.Unused_Protoss2, 0);
        fields.get("size").set(UnitType.Unused_Protoss2, null);
        fields.get("tileWidth").set(UnitType.Unused_Protoss2, 0);
        fields.get("tileHeight").set(UnitType.Unused_Protoss2, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Protoss2, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Protoss2, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Protoss2, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Protoss2, 0);
        fields.get("width").set(UnitType.Unused_Protoss2, 0);
        fields.get("height").set(UnitType.Unused_Protoss2, 0);
        fields.get("seekRange").set(UnitType.Unused_Protoss2, 0);
        fields.get("sightRange").set(UnitType.Unused_Protoss2, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Protoss2, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Protoss2, 0);
        fields.get("airWeapon").set(UnitType.Unused_Protoss2, null);
        fields.get("maxAirHits").set(UnitType.Unused_Protoss2, 0);
        fields.get("topSpeed").set(UnitType.Unused_Protoss2, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Protoss2, 0);
        fields.get("haltDistance").set(UnitType.Unused_Protoss2, 0);
        fields.get("turnRadius").set(UnitType.Unused_Protoss2, 0);
        fields.get("canProduce").set(UnitType.Unused_Protoss2, false);
        fields.get("canAttack").set(UnitType.Unused_Protoss2, false);
        fields.get("canMove").set(UnitType.Unused_Protoss2, false);
        fields.get("isFlyer").set(UnitType.Unused_Protoss2, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Protoss2, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Protoss2, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Protoss2, false);
        fields.get("isInvincible").set(UnitType.Unused_Protoss2, false);
        fields.get("isOrganic").set(UnitType.Unused_Protoss2, false);
        fields.get("isMechanical").set(UnitType.Unused_Protoss2, false);
        fields.get("isRobotic").set(UnitType.Unused_Protoss2, false);
        fields.get("isDetector").set(UnitType.Unused_Protoss2, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Protoss2, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Protoss2, false);
        fields.get("isRefinery").set(UnitType.Unused_Protoss2, false);
        fields.get("isWorker").set(UnitType.Unused_Protoss2, false);
        fields.get("requiresPsi").set(UnitType.Unused_Protoss2, false);
        fields.get("requiresCreep").set(UnitType.Unused_Protoss2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Protoss2, false);
        fields.get("isBurrowable").set(UnitType.Unused_Protoss2, false);
        fields.get("isCloakable").set(UnitType.Unused_Protoss2, false);
        fields.get("isBuilding").set(UnitType.Unused_Protoss2, false);
        fields.get("isAddon").set(UnitType.Unused_Protoss2, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Protoss2, false);
        fields.get("isNeutral").set(UnitType.Unused_Protoss2, false);
        fields.get("isHero").set(UnitType.Unused_Protoss2, false);
        fields.get("isPowerup").set(UnitType.Unused_Protoss2, false);
        fields.get("isBeacon").set(UnitType.Unused_Protoss2, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Protoss2, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Protoss2, false);
        fields.get("isSpell").set(UnitType.Unused_Protoss2, false);
        fields.get("producesCreep").set(UnitType.Unused_Protoss2, false);
        fields.get("producesLarva").set(UnitType.Unused_Protoss2, false);
        fields.get("isMineralField").set(UnitType.Unused_Protoss2, false);
        fields.get("isCritter").set(UnitType.Unused_Protoss2, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Protoss2, false);
        fields.get("researchesWhat").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Photon_Cannon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Photon_Cannon, 162);
        fields.get("race").set(UnitType.Protoss_Photon_Cannon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Photon_Cannon, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Forge)));
        fields.get("requiredTech").set(UnitType.Protoss_Photon_Cannon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Photon_Cannon, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Photon_Cannon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Photon_Cannon, 100);
        fields.get("maxShields").set(UnitType.Protoss_Photon_Cannon, 100);
        fields.get("maxEnergy").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("armor").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("mineralPrice").set(UnitType.Protoss_Photon_Cannon, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("buildTime").set(UnitType.Protoss_Photon_Cannon, 750);
        fields.get("supplyRequired").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Photon_Cannon, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("buildScore").set(UnitType.Protoss_Photon_Cannon, 100);
        fields.get("destroyScore").set(UnitType.Protoss_Photon_Cannon, 300);
        fields.get("size").set(UnitType.Protoss_Photon_Cannon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Photon_Cannon, 2);
        fields.get("tileHeight").set(UnitType.Protoss_Photon_Cannon, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Photon_Cannon, 20);
        fields.get("dimensionUp").set(UnitType.Protoss_Photon_Cannon, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Photon_Cannon, 20);
        fields.get("dimensionDown").set(UnitType.Protoss_Photon_Cannon, 16);
        fields.get("width").set(UnitType.Protoss_Photon_Cannon, 41);
        fields.get("height").set(UnitType.Protoss_Photon_Cannon, 33);
        fields.get("seekRange").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("sightRange").set(UnitType.Protoss_Photon_Cannon, 352);
        fields.get("groundWeapon").set(UnitType.Protoss_Photon_Cannon, WeaponType.STS_Photon_Cannon);
        fields.get("maxGroundHits").set(UnitType.Protoss_Photon_Cannon, 1);
        fields.get("airWeapon").set(UnitType.Protoss_Photon_Cannon, WeaponType.STA_Photon_Cannon);
        fields.get("maxAirHits").set(UnitType.Protoss_Photon_Cannon, 1);
        fields.get("topSpeed").set(UnitType.Protoss_Photon_Cannon, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Photon_Cannon, 0);
        fields.get("canProduce").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("canAttack").set(UnitType.Protoss_Photon_Cannon, true);
        fields.get("canMove").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isFlyer").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isInvincible").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isOrganic").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isMechanical").set(UnitType.Protoss_Photon_Cannon, true);
        fields.get("isRobotic").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isDetector").set(UnitType.Protoss_Photon_Cannon, true);
        fields.get("isResourceContainer").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isRefinery").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isWorker").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Photon_Cannon, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isCloakable").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isBuilding").set(UnitType.Protoss_Photon_Cannon, true);
        fields.get("isAddon").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isNeutral").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isHero").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isPowerup").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isBeacon").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isSpell").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("producesCreep").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("producesLarva").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isMineralField").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("isCritter").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Photon_Cannon, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Citadel_of_Adun() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Citadel_of_Adun, 163);
        fields.get("race").set(UnitType.Protoss_Citadel_of_Adun, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Citadel_of_Adun, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Cybernetics_Core)));
        fields.get("requiredTech").set(UnitType.Protoss_Citadel_of_Adun, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Citadel_of_Adun, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Citadel_of_Adun, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Citadel_of_Adun, 450);
        fields.get("maxShields").set(UnitType.Protoss_Citadel_of_Adun, 450);
        fields.get("maxEnergy").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("armor").set(UnitType.Protoss_Citadel_of_Adun, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Citadel_of_Adun, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Citadel_of_Adun, 100);
        fields.get("buildTime").set(UnitType.Protoss_Citadel_of_Adun, 900);
        fields.get("supplyRequired").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Citadel_of_Adun, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("buildScore").set(UnitType.Protoss_Citadel_of_Adun, 200);
        fields.get("destroyScore").set(UnitType.Protoss_Citadel_of_Adun, 600);
        fields.get("size").set(UnitType.Protoss_Citadel_of_Adun, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Citadel_of_Adun, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Citadel_of_Adun, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Citadel_of_Adun, 24);
        fields.get("dimensionUp").set(UnitType.Protoss_Citadel_of_Adun, 24);
        fields.get("dimensionRight").set(UnitType.Protoss_Citadel_of_Adun, 40);
        fields.get("dimensionDown").set(UnitType.Protoss_Citadel_of_Adun, 24);
        fields.get("width").set(UnitType.Protoss_Citadel_of_Adun, 65);
        fields.get("height").set(UnitType.Protoss_Citadel_of_Adun, 49);
        fields.get("seekRange").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("sightRange").set(UnitType.Protoss_Citadel_of_Adun, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Citadel_of_Adun, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Citadel_of_Adun, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Citadel_of_Adun, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Citadel_of_Adun, 0);
        fields.get("canProduce").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("canAttack").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("canMove").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isFlyer").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isInvincible").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isOrganic").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isMechanical").set(UnitType.Protoss_Citadel_of_Adun, true);
        fields.get("isRobotic").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isDetector").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isRefinery").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isWorker").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Citadel_of_Adun, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isCloakable").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isBuilding").set(UnitType.Protoss_Citadel_of_Adun, true);
        fields.get("isAddon").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isNeutral").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isHero").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isPowerup").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isBeacon").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isSpell").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("producesCreep").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("producesLarva").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isMineralField").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("isCritter").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Citadel_of_Adun, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList(UpgradeType.Leg_Enhancements)));
    }
    private void initializeUnitType_Protoss_Cybernetics_Core() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Cybernetics_Core, 164);
        fields.get("race").set(UnitType.Protoss_Cybernetics_Core, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Cybernetics_Core, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Gateway)));
        fields.get("requiredTech").set(UnitType.Protoss_Cybernetics_Core, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Cybernetics_Core, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Cybernetics_Core, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Cybernetics_Core, 500);
        fields.get("maxShields").set(UnitType.Protoss_Cybernetics_Core, 500);
        fields.get("maxEnergy").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("armor").set(UnitType.Protoss_Cybernetics_Core, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Cybernetics_Core, 200);
        fields.get("gasPrice").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("buildTime").set(UnitType.Protoss_Cybernetics_Core, 900);
        fields.get("supplyRequired").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Cybernetics_Core, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("buildScore").set(UnitType.Protoss_Cybernetics_Core, 100);
        fields.get("destroyScore").set(UnitType.Protoss_Cybernetics_Core, 300);
        fields.get("size").set(UnitType.Protoss_Cybernetics_Core, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Cybernetics_Core, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Cybernetics_Core, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Cybernetics_Core, 40);
        fields.get("dimensionUp").set(UnitType.Protoss_Cybernetics_Core, 24);
        fields.get("dimensionRight").set(UnitType.Protoss_Cybernetics_Core, 40);
        fields.get("dimensionDown").set(UnitType.Protoss_Cybernetics_Core, 24);
        fields.get("width").set(UnitType.Protoss_Cybernetics_Core, 81);
        fields.get("height").set(UnitType.Protoss_Cybernetics_Core, 49);
        fields.get("seekRange").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("sightRange").set(UnitType.Protoss_Cybernetics_Core, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Cybernetics_Core, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Cybernetics_Core, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Cybernetics_Core, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Cybernetics_Core, 0);
        fields.get("canProduce").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("canAttack").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("canMove").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isFlyer").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isInvincible").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isOrganic").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isMechanical").set(UnitType.Protoss_Cybernetics_Core, true);
        fields.get("isRobotic").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isDetector").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isRefinery").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isWorker").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Cybernetics_Core, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isCloakable").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isBuilding").set(UnitType.Protoss_Cybernetics_Core, true);
        fields.get("isAddon").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isNeutral").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isHero").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isPowerup").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isBeacon").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isSpell").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("producesCreep").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("producesLarva").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isMineralField").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("isCritter").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Cybernetics_Core, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList(UpgradeType.Protoss_Air_Weapons, UpgradeType.Protoss_Air_Armor, UpgradeType.Singularity_Charge)));
    }
    private void initializeUnitType_Protoss_Templar_Archives() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Templar_Archives, 165);
        fields.get("race").set(UnitType.Protoss_Templar_Archives, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Templar_Archives, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Templar_Archives, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Citadel_of_Adun)));
        fields.get("requiredTech").set(UnitType.Protoss_Templar_Archives, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Templar_Archives, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Templar_Archives, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Templar_Archives, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Templar_Archives, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Templar_Archives, 500);
        fields.get("maxShields").set(UnitType.Protoss_Templar_Archives, 500);
        fields.get("maxEnergy").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("armor").set(UnitType.Protoss_Templar_Archives, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Templar_Archives, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Templar_Archives, 200);
        fields.get("buildTime").set(UnitType.Protoss_Templar_Archives, 900);
        fields.get("supplyRequired").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Templar_Archives, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("buildScore").set(UnitType.Protoss_Templar_Archives, 250);
        fields.get("destroyScore").set(UnitType.Protoss_Templar_Archives, 750);
        fields.get("size").set(UnitType.Protoss_Templar_Archives, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Templar_Archives, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Templar_Archives, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Templar_Archives, 32);
        fields.get("dimensionUp").set(UnitType.Protoss_Templar_Archives, 24);
        fields.get("dimensionRight").set(UnitType.Protoss_Templar_Archives, 32);
        fields.get("dimensionDown").set(UnitType.Protoss_Templar_Archives, 24);
        fields.get("width").set(UnitType.Protoss_Templar_Archives, 65);
        fields.get("height").set(UnitType.Protoss_Templar_Archives, 49);
        fields.get("seekRange").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("sightRange").set(UnitType.Protoss_Templar_Archives, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Templar_Archives, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Templar_Archives, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Templar_Archives, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Templar_Archives, 0);
        fields.get("canProduce").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("canAttack").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("canMove").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isFlyer").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isInvincible").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isOrganic").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isMechanical").set(UnitType.Protoss_Templar_Archives, true);
        fields.get("isRobotic").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isDetector").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isRefinery").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isWorker").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Templar_Archives, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isCloakable").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isBuilding").set(UnitType.Protoss_Templar_Archives, true);
        fields.get("isAddon").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isNeutral").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isHero").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isPowerup").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isBeacon").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isSpell").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("producesCreep").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("producesLarva").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isMineralField").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("isCritter").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Templar_Archives, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Templar_Archives, new ArrayList(Arrays.asList(TechType.Mind_Control, TechType.Psionic_Storm, TechType.Hallucination, TechType.Maelstrom)));
        fields.get("upgradesWhat").set(UnitType.Protoss_Templar_Archives, new ArrayList(Arrays.asList(UpgradeType.Khaydarin_Amulet, UpgradeType.Argus_Talisman)));
    }
    private void initializeUnitType_Protoss_Forge() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Forge, 166);
        fields.get("race").set(UnitType.Protoss_Forge, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Forge, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Nexus)));
        fields.get("requiredTech").set(UnitType.Protoss_Forge, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Forge, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Forge, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Forge, 550);
        fields.get("maxShields").set(UnitType.Protoss_Forge, 550);
        fields.get("maxEnergy").set(UnitType.Protoss_Forge, 0);
        fields.get("armor").set(UnitType.Protoss_Forge, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Forge, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Forge, 0);
        fields.get("buildTime").set(UnitType.Protoss_Forge, 600);
        fields.get("supplyRequired").set(UnitType.Protoss_Forge, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Forge, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Forge, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Forge, 0);
        fields.get("buildScore").set(UnitType.Protoss_Forge, 100);
        fields.get("destroyScore").set(UnitType.Protoss_Forge, 300);
        fields.get("size").set(UnitType.Protoss_Forge, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Forge, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Forge, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Forge, 36);
        fields.get("dimensionUp").set(UnitType.Protoss_Forge, 24);
        fields.get("dimensionRight").set(UnitType.Protoss_Forge, 36);
        fields.get("dimensionDown").set(UnitType.Protoss_Forge, 20);
        fields.get("width").set(UnitType.Protoss_Forge, 73);
        fields.get("height").set(UnitType.Protoss_Forge, 45);
        fields.get("seekRange").set(UnitType.Protoss_Forge, 0);
        fields.get("sightRange").set(UnitType.Protoss_Forge, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Forge, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Forge, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Forge, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Forge, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Forge, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Forge, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Forge, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Forge, 0);
        fields.get("canProduce").set(UnitType.Protoss_Forge, false);
        fields.get("canAttack").set(UnitType.Protoss_Forge, false);
        fields.get("canMove").set(UnitType.Protoss_Forge, false);
        fields.get("isFlyer").set(UnitType.Protoss_Forge, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Forge, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Forge, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Forge, false);
        fields.get("isInvincible").set(UnitType.Protoss_Forge, false);
        fields.get("isOrganic").set(UnitType.Protoss_Forge, false);
        fields.get("isMechanical").set(UnitType.Protoss_Forge, true);
        fields.get("isRobotic").set(UnitType.Protoss_Forge, false);
        fields.get("isDetector").set(UnitType.Protoss_Forge, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Forge, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Forge, false);
        fields.get("isRefinery").set(UnitType.Protoss_Forge, false);
        fields.get("isWorker").set(UnitType.Protoss_Forge, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Forge, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Forge, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Forge, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Forge, false);
        fields.get("isCloakable").set(UnitType.Protoss_Forge, false);
        fields.get("isBuilding").set(UnitType.Protoss_Forge, true);
        fields.get("isAddon").set(UnitType.Protoss_Forge, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Forge, false);
        fields.get("isNeutral").set(UnitType.Protoss_Forge, false);
        fields.get("isHero").set(UnitType.Protoss_Forge, false);
        fields.get("isPowerup").set(UnitType.Protoss_Forge, false);
        fields.get("isBeacon").set(UnitType.Protoss_Forge, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Forge, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Forge, false);
        fields.get("isSpell").set(UnitType.Protoss_Forge, false);
        fields.get("producesCreep").set(UnitType.Protoss_Forge, false);
        fields.get("producesLarva").set(UnitType.Protoss_Forge, false);
        fields.get("isMineralField").set(UnitType.Protoss_Forge, false);
        fields.get("isCritter").set(UnitType.Protoss_Forge, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Forge, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList(UpgradeType.Protoss_Ground_Weapons, UpgradeType.Protoss_Ground_Armor, UpgradeType.Protoss_Plasma_Shields)));
    }
    private void initializeUnitType_Protoss_Stargate() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Stargate, 167);
        fields.get("race").set(UnitType.Protoss_Stargate, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Stargate, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Cybernetics_Core)));
        fields.get("requiredTech").set(UnitType.Protoss_Stargate, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Stargate, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Stargate, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Stargate, 600);
        fields.get("maxShields").set(UnitType.Protoss_Stargate, 600);
        fields.get("maxEnergy").set(UnitType.Protoss_Stargate, 0);
        fields.get("armor").set(UnitType.Protoss_Stargate, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Stargate, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Stargate, 150);
        fields.get("buildTime").set(UnitType.Protoss_Stargate, 1050);
        fields.get("supplyRequired").set(UnitType.Protoss_Stargate, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Stargate, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Stargate, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Stargate, 0);
        fields.get("buildScore").set(UnitType.Protoss_Stargate, 300);
        fields.get("destroyScore").set(UnitType.Protoss_Stargate, 900);
        fields.get("size").set(UnitType.Protoss_Stargate, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Stargate, 4);
        fields.get("tileHeight").set(UnitType.Protoss_Stargate, 3);
        fields.get("dimensionLeft").set(UnitType.Protoss_Stargate, 48);
        fields.get("dimensionUp").set(UnitType.Protoss_Stargate, 40);
        fields.get("dimensionRight").set(UnitType.Protoss_Stargate, 48);
        fields.get("dimensionDown").set(UnitType.Protoss_Stargate, 32);
        fields.get("width").set(UnitType.Protoss_Stargate, 97);
        fields.get("height").set(UnitType.Protoss_Stargate, 73);
        fields.get("seekRange").set(UnitType.Protoss_Stargate, 0);
        fields.get("sightRange").set(UnitType.Protoss_Stargate, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Stargate, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Stargate, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Stargate, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Stargate, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Stargate, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Stargate, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Stargate, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Stargate, 0);
        fields.get("canProduce").set(UnitType.Protoss_Stargate, true);
        fields.get("canAttack").set(UnitType.Protoss_Stargate, false);
        fields.get("canMove").set(UnitType.Protoss_Stargate, false);
        fields.get("isFlyer").set(UnitType.Protoss_Stargate, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Stargate, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Stargate, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Stargate, false);
        fields.get("isInvincible").set(UnitType.Protoss_Stargate, false);
        fields.get("isOrganic").set(UnitType.Protoss_Stargate, false);
        fields.get("isMechanical").set(UnitType.Protoss_Stargate, true);
        fields.get("isRobotic").set(UnitType.Protoss_Stargate, false);
        fields.get("isDetector").set(UnitType.Protoss_Stargate, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Stargate, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Stargate, false);
        fields.get("isRefinery").set(UnitType.Protoss_Stargate, false);
        fields.get("isWorker").set(UnitType.Protoss_Stargate, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Stargate, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Stargate, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Stargate, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Stargate, false);
        fields.get("isCloakable").set(UnitType.Protoss_Stargate, false);
        fields.get("isBuilding").set(UnitType.Protoss_Stargate, true);
        fields.get("isAddon").set(UnitType.Protoss_Stargate, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Stargate, false);
        fields.get("isNeutral").set(UnitType.Protoss_Stargate, false);
        fields.get("isHero").set(UnitType.Protoss_Stargate, false);
        fields.get("isPowerup").set(UnitType.Protoss_Stargate, false);
        fields.get("isBeacon").set(UnitType.Protoss_Stargate, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Stargate, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Stargate, false);
        fields.get("isSpell").set(UnitType.Protoss_Stargate, false);
        fields.get("producesCreep").set(UnitType.Protoss_Stargate, false);
        fields.get("producesLarva").set(UnitType.Protoss_Stargate, false);
        fields.get("isMineralField").set(UnitType.Protoss_Stargate, false);
        fields.get("isCritter").set(UnitType.Protoss_Stargate, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Stargate, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Stasis_Cell_Prison() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Stasis_Cell_Prison, 168);
        fields.get("race").set(UnitType.Special_Stasis_Cell_Prison, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Special_Stasis_Cell_Prison, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Stasis_Cell_Prison, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Stasis_Cell_Prison, TechType.None);
        fields.get("abilities").set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Stasis_Cell_Prison, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Stasis_Cell_Prison, 2000);
        fields.get("maxShields").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("maxEnergy").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("armor").set(UnitType.Special_Stasis_Cell_Prison, 1);
        fields.get("mineralPrice").set(UnitType.Special_Stasis_Cell_Prison, 150);
        fields.get("gasPrice").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("buildTime").set(UnitType.Special_Stasis_Cell_Prison, 1);
        fields.get("supplyRequired").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("supplyProvided").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("spaceRequired").set(UnitType.Special_Stasis_Cell_Prison, 255);
        fields.get("spaceProvided").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("buildScore").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("destroyScore").set(UnitType.Special_Stasis_Cell_Prison, 5000);
        fields.get("size").set(UnitType.Special_Stasis_Cell_Prison, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Stasis_Cell_Prison, 4);
        fields.get("tileHeight").set(UnitType.Special_Stasis_Cell_Prison, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Stasis_Cell_Prison, 64);
        fields.get("dimensionUp").set(UnitType.Special_Stasis_Cell_Prison, 48);
        fields.get("dimensionRight").set(UnitType.Special_Stasis_Cell_Prison, 63);
        fields.get("dimensionDown").set(UnitType.Special_Stasis_Cell_Prison, 47);
        fields.get("width").set(UnitType.Special_Stasis_Cell_Prison, 128);
        fields.get("height").set(UnitType.Special_Stasis_Cell_Prison, 96);
        fields.get("seekRange").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("sightRange").set(UnitType.Special_Stasis_Cell_Prison, 256);
        fields.get("groundWeapon").set(UnitType.Special_Stasis_Cell_Prison, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("airWeapon").set(UnitType.Special_Stasis_Cell_Prison, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("topSpeed").set(UnitType.Special_Stasis_Cell_Prison, 0.0);
        fields.get("acceleration").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("haltDistance").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("turnRadius").set(UnitType.Special_Stasis_Cell_Prison, 0);
        fields.get("canProduce").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("canAttack").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("canMove").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isFlyer").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("regeneratesHP").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isSpellcaster").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isInvincible").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isOrganic").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isMechanical").set(UnitType.Special_Stasis_Cell_Prison, true);
        fields.get("isRobotic").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isDetector").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isResourceContainer").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isResourceDepot").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isRefinery").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isWorker").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("requiresPsi").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("requiresCreep").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isBurrowable").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isCloakable").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isBuilding").set(UnitType.Special_Stasis_Cell_Prison, true);
        fields.get("isAddon").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isNeutral").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isHero").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isPowerup").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isBeacon").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Stasis_Cell_Prison, true);
        fields.get("isSpell").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("producesCreep").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("producesLarva").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isMineralField").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("isCritter").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("canBuildAddon").set(UnitType.Special_Stasis_Cell_Prison, false);
        fields.get("researchesWhat").set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Protoss_Fleet_Beacon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Fleet_Beacon, 169);
        fields.get("race").set(UnitType.Protoss_Fleet_Beacon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Fleet_Beacon, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Stargate)));
        fields.get("requiredTech").set(UnitType.Protoss_Fleet_Beacon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Fleet_Beacon, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Fleet_Beacon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Fleet_Beacon, 500);
        fields.get("maxShields").set(UnitType.Protoss_Fleet_Beacon, 500);
        fields.get("maxEnergy").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("armor").set(UnitType.Protoss_Fleet_Beacon, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Fleet_Beacon, 300);
        fields.get("gasPrice").set(UnitType.Protoss_Fleet_Beacon, 200);
        fields.get("buildTime").set(UnitType.Protoss_Fleet_Beacon, 900);
        fields.get("supplyRequired").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Fleet_Beacon, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("buildScore").set(UnitType.Protoss_Fleet_Beacon, 350);
        fields.get("destroyScore").set(UnitType.Protoss_Fleet_Beacon, 1050);
        fields.get("size").set(UnitType.Protoss_Fleet_Beacon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Fleet_Beacon, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Fleet_Beacon, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Fleet_Beacon, 40);
        fields.get("dimensionUp").set(UnitType.Protoss_Fleet_Beacon, 32);
        fields.get("dimensionRight").set(UnitType.Protoss_Fleet_Beacon, 47);
        fields.get("dimensionDown").set(UnitType.Protoss_Fleet_Beacon, 24);
        fields.get("width").set(UnitType.Protoss_Fleet_Beacon, 88);
        fields.get("height").set(UnitType.Protoss_Fleet_Beacon, 57);
        fields.get("seekRange").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("sightRange").set(UnitType.Protoss_Fleet_Beacon, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Fleet_Beacon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Fleet_Beacon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Fleet_Beacon, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Fleet_Beacon, 0);
        fields.get("canProduce").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("canAttack").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("canMove").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isFlyer").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isInvincible").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isOrganic").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isMechanical").set(UnitType.Protoss_Fleet_Beacon, true);
        fields.get("isRobotic").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isDetector").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isRefinery").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isWorker").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Fleet_Beacon, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isCloakable").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isBuilding").set(UnitType.Protoss_Fleet_Beacon, true);
        fields.get("isAddon").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isNeutral").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isHero").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isPowerup").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isBeacon").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isSpell").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("producesCreep").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("producesLarva").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isMineralField").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("isCritter").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Fleet_Beacon, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList(TechType.Disruption_Web)));
        fields.get("upgradesWhat").set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList(UpgradeType.Carrier_Capacity, UpgradeType.Apial_Sensors, UpgradeType.Gravitic_Thrusters, UpgradeType.Argus_Jewel)));
    }
    private void initializeUnitType_Protoss_Arbiter_Tribunal() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Arbiter_Tribunal, 170);
        fields.get("race").set(UnitType.Protoss_Arbiter_Tribunal, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Arbiter_Tribunal, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Arbiter_Tribunal, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Templar_Archives, UnitType.Protoss_Stargate)));
        fields.get("requiredTech").set(UnitType.Protoss_Arbiter_Tribunal, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Arbiter_Tribunal, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Arbiter_Tribunal, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Arbiter_Tribunal, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Arbiter_Tribunal, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Arbiter_Tribunal, 500);
        fields.get("maxShields").set(UnitType.Protoss_Arbiter_Tribunal, 500);
        fields.get("maxEnergy").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("armor").set(UnitType.Protoss_Arbiter_Tribunal, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Arbiter_Tribunal, 200);
        fields.get("gasPrice").set(UnitType.Protoss_Arbiter_Tribunal, 150);
        fields.get("buildTime").set(UnitType.Protoss_Arbiter_Tribunal, 900);
        fields.get("supplyRequired").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Arbiter_Tribunal, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("buildScore").set(UnitType.Protoss_Arbiter_Tribunal, 450);
        fields.get("destroyScore").set(UnitType.Protoss_Arbiter_Tribunal, 1350);
        fields.get("size").set(UnitType.Protoss_Arbiter_Tribunal, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Arbiter_Tribunal, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Arbiter_Tribunal, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Arbiter_Tribunal, 44);
        fields.get("dimensionUp").set(UnitType.Protoss_Arbiter_Tribunal, 28);
        fields.get("dimensionRight").set(UnitType.Protoss_Arbiter_Tribunal, 44);
        fields.get("dimensionDown").set(UnitType.Protoss_Arbiter_Tribunal, 28);
        fields.get("width").set(UnitType.Protoss_Arbiter_Tribunal, 89);
        fields.get("height").set(UnitType.Protoss_Arbiter_Tribunal, 57);
        fields.get("seekRange").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("sightRange").set(UnitType.Protoss_Arbiter_Tribunal, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Arbiter_Tribunal, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Arbiter_Tribunal, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Arbiter_Tribunal, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Arbiter_Tribunal, 0);
        fields.get("canProduce").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("canAttack").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("canMove").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isFlyer").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isInvincible").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isOrganic").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isMechanical").set(UnitType.Protoss_Arbiter_Tribunal, true);
        fields.get("isRobotic").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isDetector").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isRefinery").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isWorker").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Arbiter_Tribunal, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isCloakable").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isBuilding").set(UnitType.Protoss_Arbiter_Tribunal, true);
        fields.get("isAddon").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isNeutral").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isHero").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isPowerup").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isBeacon").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isSpell").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("producesCreep").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("producesLarva").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isMineralField").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("isCritter").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Arbiter_Tribunal, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Arbiter_Tribunal, new ArrayList(Arrays.asList(TechType.Stasis_Field, TechType.Recall)));
        fields.get("upgradesWhat").set(UnitType.Protoss_Arbiter_Tribunal, new ArrayList(Arrays.asList(UpgradeType.Khaydarin_Core)));
    }
    private void initializeUnitType_Protoss_Robotics_Support_Bay() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Robotics_Support_Bay, 171);
        fields.get("race").set(UnitType.Protoss_Robotics_Support_Bay, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Robotics_Support_Bay, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Robotics_Facility)));
        fields.get("requiredTech").set(UnitType.Protoss_Robotics_Support_Bay, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Robotics_Support_Bay, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Robotics_Support_Bay, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Robotics_Support_Bay, 450);
        fields.get("maxShields").set(UnitType.Protoss_Robotics_Support_Bay, 450);
        fields.get("maxEnergy").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("armor").set(UnitType.Protoss_Robotics_Support_Bay, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Robotics_Support_Bay, 150);
        fields.get("gasPrice").set(UnitType.Protoss_Robotics_Support_Bay, 100);
        fields.get("buildTime").set(UnitType.Protoss_Robotics_Support_Bay, 450);
        fields.get("supplyRequired").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Robotics_Support_Bay, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("buildScore").set(UnitType.Protoss_Robotics_Support_Bay, 125);
        fields.get("destroyScore").set(UnitType.Protoss_Robotics_Support_Bay, 375);
        fields.get("size").set(UnitType.Protoss_Robotics_Support_Bay, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Robotics_Support_Bay, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Robotics_Support_Bay, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Robotics_Support_Bay, 32);
        fields.get("dimensionUp").set(UnitType.Protoss_Robotics_Support_Bay, 32);
        fields.get("dimensionRight").set(UnitType.Protoss_Robotics_Support_Bay, 32);
        fields.get("dimensionDown").set(UnitType.Protoss_Robotics_Support_Bay, 20);
        fields.get("width").set(UnitType.Protoss_Robotics_Support_Bay, 65);
        fields.get("height").set(UnitType.Protoss_Robotics_Support_Bay, 53);
        fields.get("seekRange").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("sightRange").set(UnitType.Protoss_Robotics_Support_Bay, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Robotics_Support_Bay, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Robotics_Support_Bay, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Robotics_Support_Bay, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Robotics_Support_Bay, 0);
        fields.get("canProduce").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("canAttack").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("canMove").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isFlyer").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isInvincible").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isOrganic").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isMechanical").set(UnitType.Protoss_Robotics_Support_Bay, true);
        fields.get("isRobotic").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isDetector").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isRefinery").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isWorker").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Robotics_Support_Bay, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isCloakable").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isBuilding").set(UnitType.Protoss_Robotics_Support_Bay, true);
        fields.get("isAddon").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isNeutral").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isHero").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isPowerup").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isBeacon").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isSpell").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("producesCreep").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("producesLarva").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isMineralField").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("isCritter").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Robotics_Support_Bay, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList(UpgradeType.Scarab_Damage, UpgradeType.Reaver_Capacity, UpgradeType.Gravitic_Drive)));
    }
    private void initializeUnitType_Protoss_Shield_Battery() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Protoss_Shield_Battery, 172);
        fields.get("race").set(UnitType.Protoss_Shield_Battery, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Protoss_Shield_Battery, new Pair(UnitType.Protoss_Probe, 1));
        fields.get("requiredUnits").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList(UnitType.Protoss_Probe, UnitType.Protoss_Gateway)));
        fields.get("requiredTech").set(UnitType.Protoss_Shield_Battery, TechType.None);
        fields.get("cloakingTech").set(UnitType.Protoss_Shield_Battery, TechType.None);
        fields.get("abilities").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
        fields.get("armorUpgrade").set(UnitType.Protoss_Shield_Battery, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Protoss_Shield_Battery, 200);
        fields.get("maxShields").set(UnitType.Protoss_Shield_Battery, 200);
        fields.get("maxEnergy").set(UnitType.Protoss_Shield_Battery, 200);
        fields.get("armor").set(UnitType.Protoss_Shield_Battery, 1);
        fields.get("mineralPrice").set(UnitType.Protoss_Shield_Battery, 100);
        fields.get("gasPrice").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("buildTime").set(UnitType.Protoss_Shield_Battery, 450);
        fields.get("supplyRequired").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("supplyProvided").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("spaceRequired").set(UnitType.Protoss_Shield_Battery, 255);
        fields.get("spaceProvided").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("buildScore").set(UnitType.Protoss_Shield_Battery, 50);
        fields.get("destroyScore").set(UnitType.Protoss_Shield_Battery, 150);
        fields.get("size").set(UnitType.Protoss_Shield_Battery, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Protoss_Shield_Battery, 3);
        fields.get("tileHeight").set(UnitType.Protoss_Shield_Battery, 2);
        fields.get("dimensionLeft").set(UnitType.Protoss_Shield_Battery, 32);
        fields.get("dimensionUp").set(UnitType.Protoss_Shield_Battery, 16);
        fields.get("dimensionRight").set(UnitType.Protoss_Shield_Battery, 32);
        fields.get("dimensionDown").set(UnitType.Protoss_Shield_Battery, 16);
        fields.get("width").set(UnitType.Protoss_Shield_Battery, 65);
        fields.get("height").set(UnitType.Protoss_Shield_Battery, 33);
        fields.get("seekRange").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("sightRange").set(UnitType.Protoss_Shield_Battery, 320);
        fields.get("groundWeapon").set(UnitType.Protoss_Shield_Battery, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("airWeapon").set(UnitType.Protoss_Shield_Battery, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("topSpeed").set(UnitType.Protoss_Shield_Battery, 0.0);
        fields.get("acceleration").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("haltDistance").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("turnRadius").set(UnitType.Protoss_Shield_Battery, 0);
        fields.get("canProduce").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("canAttack").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("canMove").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isFlyer").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("regeneratesHP").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isSpellcaster").set(UnitType.Protoss_Shield_Battery, true);
        fields.get("hasPermanentCloak").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isInvincible").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isOrganic").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isMechanical").set(UnitType.Protoss_Shield_Battery, true);
        fields.get("isRobotic").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isDetector").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isResourceContainer").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isResourceDepot").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isRefinery").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isWorker").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("requiresPsi").set(UnitType.Protoss_Shield_Battery, true);
        fields.get("requiresCreep").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isBurrowable").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isCloakable").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isBuilding").set(UnitType.Protoss_Shield_Battery, true);
        fields.get("isAddon").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isFlyingBuilding").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isNeutral").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isHero").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isPowerup").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isBeacon").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isFlagBeacon").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isSpecialBuilding").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isSpell").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("producesCreep").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("producesLarva").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isMineralField").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("isCritter").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("canBuildAddon").set(UnitType.Protoss_Shield_Battery, false);
        fields.get("researchesWhat").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Khaydarin_Crystal_Form() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Khaydarin_Crystal_Form, 173);
        fields.get("race").set(UnitType.Special_Khaydarin_Crystal_Form, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Special_Khaydarin_Crystal_Form, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Khaydarin_Crystal_Form, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Khaydarin_Crystal_Form, TechType.None);
        fields.get("abilities").set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Khaydarin_Crystal_Form, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Khaydarin_Crystal_Form, 100000);
        fields.get("maxShields").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("maxEnergy").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("armor").set(UnitType.Special_Khaydarin_Crystal_Form, 1);
        fields.get("mineralPrice").set(UnitType.Special_Khaydarin_Crystal_Form, 250);
        fields.get("gasPrice").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("buildTime").set(UnitType.Special_Khaydarin_Crystal_Form, 1);
        fields.get("supplyRequired").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("supplyProvided").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("spaceRequired").set(UnitType.Special_Khaydarin_Crystal_Form, 255);
        fields.get("spaceProvided").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("buildScore").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("destroyScore").set(UnitType.Special_Khaydarin_Crystal_Form, 2500);
        fields.get("size").set(UnitType.Special_Khaydarin_Crystal_Form, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Khaydarin_Crystal_Form, 4);
        fields.get("tileHeight").set(UnitType.Special_Khaydarin_Crystal_Form, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Khaydarin_Crystal_Form, 64);
        fields.get("dimensionUp").set(UnitType.Special_Khaydarin_Crystal_Form, 48);
        fields.get("dimensionRight").set(UnitType.Special_Khaydarin_Crystal_Form, 63);
        fields.get("dimensionDown").set(UnitType.Special_Khaydarin_Crystal_Form, 47);
        fields.get("width").set(UnitType.Special_Khaydarin_Crystal_Form, 128);
        fields.get("height").set(UnitType.Special_Khaydarin_Crystal_Form, 96);
        fields.get("seekRange").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("sightRange").set(UnitType.Special_Khaydarin_Crystal_Form, 320);
        fields.get("groundWeapon").set(UnitType.Special_Khaydarin_Crystal_Form, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("airWeapon").set(UnitType.Special_Khaydarin_Crystal_Form, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("topSpeed").set(UnitType.Special_Khaydarin_Crystal_Form, 0.0);
        fields.get("acceleration").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("haltDistance").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("turnRadius").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
        fields.get("canProduce").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("canAttack").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("canMove").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isFlyer").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("regeneratesHP").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isSpellcaster").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isInvincible").set(UnitType.Special_Khaydarin_Crystal_Form, true);
        fields.get("isOrganic").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isMechanical").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isRobotic").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isDetector").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isResourceContainer").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isResourceDepot").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isRefinery").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isWorker").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("requiresPsi").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("requiresCreep").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isBurrowable").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isCloakable").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isBuilding").set(UnitType.Special_Khaydarin_Crystal_Form, true);
        fields.get("isAddon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isNeutral").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isHero").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isPowerup").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isBeacon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Khaydarin_Crystal_Form, true);
        fields.get("isSpell").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("producesCreep").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("producesLarva").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isMineralField").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("isCritter").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("canBuildAddon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
        fields.get("researchesWhat").set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Protoss_Temple() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Protoss_Temple, 174);
        fields.get("race").set(UnitType.Special_Protoss_Temple, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Special_Protoss_Temple, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Protoss_Temple, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Protoss_Temple, TechType.None);
        fields.get("abilities").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Protoss_Temple, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Protoss_Temple, 1500);
        fields.get("maxShields").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("maxEnergy").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("armor").set(UnitType.Special_Protoss_Temple, 1);
        fields.get("mineralPrice").set(UnitType.Special_Protoss_Temple, 250);
        fields.get("gasPrice").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("buildTime").set(UnitType.Special_Protoss_Temple, 1);
        fields.get("supplyRequired").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("supplyProvided").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("spaceRequired").set(UnitType.Special_Protoss_Temple, 255);
        fields.get("spaceProvided").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("buildScore").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("destroyScore").set(UnitType.Special_Protoss_Temple, 5000);
        fields.get("size").set(UnitType.Special_Protoss_Temple, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Protoss_Temple, 7);
        fields.get("tileHeight").set(UnitType.Special_Protoss_Temple, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Protoss_Temple, 112);
        fields.get("dimensionUp").set(UnitType.Special_Protoss_Temple, 48);
        fields.get("dimensionRight").set(UnitType.Special_Protoss_Temple, 111);
        fields.get("dimensionDown").set(UnitType.Special_Protoss_Temple, 47);
        fields.get("width").set(UnitType.Special_Protoss_Temple, 224);
        fields.get("height").set(UnitType.Special_Protoss_Temple, 96);
        fields.get("seekRange").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("sightRange").set(UnitType.Special_Protoss_Temple, 320);
        fields.get("groundWeapon").set(UnitType.Special_Protoss_Temple, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("airWeapon").set(UnitType.Special_Protoss_Temple, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("topSpeed").set(UnitType.Special_Protoss_Temple, 0.0);
        fields.get("acceleration").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("haltDistance").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("turnRadius").set(UnitType.Special_Protoss_Temple, 0);
        fields.get("canProduce").set(UnitType.Special_Protoss_Temple, false);
        fields.get("canAttack").set(UnitType.Special_Protoss_Temple, false);
        fields.get("canMove").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isFlyer").set(UnitType.Special_Protoss_Temple, false);
        fields.get("regeneratesHP").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isSpellcaster").set(UnitType.Special_Protoss_Temple, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isInvincible").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isOrganic").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isMechanical").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isRobotic").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isDetector").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isResourceContainer").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isResourceDepot").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isRefinery").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isWorker").set(UnitType.Special_Protoss_Temple, false);
        fields.get("requiresPsi").set(UnitType.Special_Protoss_Temple, false);
        fields.get("requiresCreep").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isBurrowable").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isCloakable").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isBuilding").set(UnitType.Special_Protoss_Temple, true);
        fields.get("isAddon").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isNeutral").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isHero").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isPowerup").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isBeacon").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Protoss_Temple, true);
        fields.get("isSpell").set(UnitType.Special_Protoss_Temple, false);
        fields.get("producesCreep").set(UnitType.Special_Protoss_Temple, false);
        fields.get("producesLarva").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isMineralField").set(UnitType.Special_Protoss_Temple, false);
        fields.get("isCritter").set(UnitType.Special_Protoss_Temple, false);
        fields.get("canBuildAddon").set(UnitType.Special_Protoss_Temple, false);
        fields.get("researchesWhat").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_XelNaga_Temple() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_XelNaga_Temple, 175);
        fields.get("race").set(UnitType.Special_XelNaga_Temple, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Special_XelNaga_Temple, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_XelNaga_Temple, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_XelNaga_Temple, TechType.None);
        fields.get("abilities").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_XelNaga_Temple, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_XelNaga_Temple, 5000);
        fields.get("maxShields").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("maxEnergy").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("armor").set(UnitType.Special_XelNaga_Temple, 1);
        fields.get("mineralPrice").set(UnitType.Special_XelNaga_Temple, 1500);
        fields.get("gasPrice").set(UnitType.Special_XelNaga_Temple, 500);
        fields.get("buildTime").set(UnitType.Special_XelNaga_Temple, 4800);
        fields.get("supplyRequired").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("supplyProvided").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("spaceRequired").set(UnitType.Special_XelNaga_Temple, 255);
        fields.get("spaceProvided").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("buildScore").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("destroyScore").set(UnitType.Special_XelNaga_Temple, 5000);
        fields.get("size").set(UnitType.Special_XelNaga_Temple, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_XelNaga_Temple, 5);
        fields.get("tileHeight").set(UnitType.Special_XelNaga_Temple, 4);
        fields.get("dimensionLeft").set(UnitType.Special_XelNaga_Temple, 80);
        fields.get("dimensionUp").set(UnitType.Special_XelNaga_Temple, 34);
        fields.get("dimensionRight").set(UnitType.Special_XelNaga_Temple, 79);
        fields.get("dimensionDown").set(UnitType.Special_XelNaga_Temple, 63);
        fields.get("width").set(UnitType.Special_XelNaga_Temple, 160);
        fields.get("height").set(UnitType.Special_XelNaga_Temple, 98);
        fields.get("seekRange").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("sightRange").set(UnitType.Special_XelNaga_Temple, 320);
        fields.get("groundWeapon").set(UnitType.Special_XelNaga_Temple, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("airWeapon").set(UnitType.Special_XelNaga_Temple, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("topSpeed").set(UnitType.Special_XelNaga_Temple, 0.0);
        fields.get("acceleration").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("haltDistance").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("turnRadius").set(UnitType.Special_XelNaga_Temple, 0);
        fields.get("canProduce").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("canAttack").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("canMove").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isFlyer").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("regeneratesHP").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isSpellcaster").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isInvincible").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isOrganic").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isMechanical").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isRobotic").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isDetector").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isResourceContainer").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isResourceDepot").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isRefinery").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isWorker").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("requiresPsi").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("requiresCreep").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isBurrowable").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isCloakable").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isBuilding").set(UnitType.Special_XelNaga_Temple, true);
        fields.get("isAddon").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isNeutral").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isHero").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isPowerup").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isBeacon").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isFlagBeacon").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_XelNaga_Temple, true);
        fields.get("isSpell").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("producesCreep").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("producesLarva").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isMineralField").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("isCritter").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("canBuildAddon").set(UnitType.Special_XelNaga_Temple, false);
        fields.get("researchesWhat").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Resource_Mineral_Field() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Resource_Mineral_Field, 176);
        fields.get("race").set(UnitType.Resource_Mineral_Field, Race.None);
        fields.get("whatBuilds").set(UnitType.Resource_Mineral_Field, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Resource_Mineral_Field, TechType.None);
        fields.get("cloakingTech").set(UnitType.Resource_Mineral_Field, TechType.None);
        fields.get("abilities").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Resource_Mineral_Field, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Resource_Mineral_Field, 100000);
        fields.get("maxShields").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("maxEnergy").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("armor").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("mineralPrice").set(UnitType.Resource_Mineral_Field, 1);
        fields.get("gasPrice").set(UnitType.Resource_Mineral_Field, 1);
        fields.get("buildTime").set(UnitType.Resource_Mineral_Field, 1);
        fields.get("supplyRequired").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("supplyProvided").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("spaceRequired").set(UnitType.Resource_Mineral_Field, 255);
        fields.get("spaceProvided").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("buildScore").set(UnitType.Resource_Mineral_Field, 10);
        fields.get("destroyScore").set(UnitType.Resource_Mineral_Field, 10);
        fields.get("size").set(UnitType.Resource_Mineral_Field, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Resource_Mineral_Field, 2);
        fields.get("tileHeight").set(UnitType.Resource_Mineral_Field, 1);
        fields.get("dimensionLeft").set(UnitType.Resource_Mineral_Field, 32);
        fields.get("dimensionUp").set(UnitType.Resource_Mineral_Field, 16);
        fields.get("dimensionRight").set(UnitType.Resource_Mineral_Field, 31);
        fields.get("dimensionDown").set(UnitType.Resource_Mineral_Field, 15);
        fields.get("width").set(UnitType.Resource_Mineral_Field, 64);
        fields.get("height").set(UnitType.Resource_Mineral_Field, 32);
        fields.get("seekRange").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("sightRange").set(UnitType.Resource_Mineral_Field, 288);
        fields.get("groundWeapon").set(UnitType.Resource_Mineral_Field, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("airWeapon").set(UnitType.Resource_Mineral_Field, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("topSpeed").set(UnitType.Resource_Mineral_Field, 0.0);
        fields.get("acceleration").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("haltDistance").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("turnRadius").set(UnitType.Resource_Mineral_Field, 0);
        fields.get("canProduce").set(UnitType.Resource_Mineral_Field, false);
        fields.get("canAttack").set(UnitType.Resource_Mineral_Field, false);
        fields.get("canMove").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isFlyer").set(UnitType.Resource_Mineral_Field, false);
        fields.get("regeneratesHP").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isSpellcaster").set(UnitType.Resource_Mineral_Field, false);
        fields.get("hasPermanentCloak").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isInvincible").set(UnitType.Resource_Mineral_Field, true);
        fields.get("isOrganic").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isMechanical").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isRobotic").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isDetector").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isResourceContainer").set(UnitType.Resource_Mineral_Field, true);
        fields.get("isResourceDepot").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isRefinery").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isWorker").set(UnitType.Resource_Mineral_Field, false);
        fields.get("requiresPsi").set(UnitType.Resource_Mineral_Field, false);
        fields.get("requiresCreep").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isBurrowable").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isCloakable").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isBuilding").set(UnitType.Resource_Mineral_Field, true);
        fields.get("isAddon").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isFlyingBuilding").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isNeutral").set(UnitType.Resource_Mineral_Field, true);
        fields.get("isHero").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isPowerup").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isBeacon").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isFlagBeacon").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isSpecialBuilding").set(UnitType.Resource_Mineral_Field, true);
        fields.get("isSpell").set(UnitType.Resource_Mineral_Field, false);
        fields.get("producesCreep").set(UnitType.Resource_Mineral_Field, false);
        fields.get("producesLarva").set(UnitType.Resource_Mineral_Field, false);
        fields.get("isMineralField").set(UnitType.Resource_Mineral_Field, true);
        fields.get("isCritter").set(UnitType.Resource_Mineral_Field, false);
        fields.get("canBuildAddon").set(UnitType.Resource_Mineral_Field, false);
        fields.get("researchesWhat").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Resource_Mineral_Field_Type_2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Resource_Mineral_Field_Type_2, 177);
        fields.get("race").set(UnitType.Resource_Mineral_Field_Type_2, Race.None);
        fields.get("whatBuilds").set(UnitType.Resource_Mineral_Field_Type_2, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Resource_Mineral_Field_Type_2, TechType.None);
        fields.get("cloakingTech").set(UnitType.Resource_Mineral_Field_Type_2, TechType.None);
        fields.get("abilities").set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Resource_Mineral_Field_Type_2, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Resource_Mineral_Field_Type_2, 100000);
        fields.get("maxShields").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("maxEnergy").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("armor").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("mineralPrice").set(UnitType.Resource_Mineral_Field_Type_2, 1);
        fields.get("gasPrice").set(UnitType.Resource_Mineral_Field_Type_2, 1);
        fields.get("buildTime").set(UnitType.Resource_Mineral_Field_Type_2, 1);
        fields.get("supplyRequired").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("supplyProvided").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("spaceRequired").set(UnitType.Resource_Mineral_Field_Type_2, 255);
        fields.get("spaceProvided").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("buildScore").set(UnitType.Resource_Mineral_Field_Type_2, 10);
        fields.get("destroyScore").set(UnitType.Resource_Mineral_Field_Type_2, 10);
        fields.get("size").set(UnitType.Resource_Mineral_Field_Type_2, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Resource_Mineral_Field_Type_2, 2);
        fields.get("tileHeight").set(UnitType.Resource_Mineral_Field_Type_2, 1);
        fields.get("dimensionLeft").set(UnitType.Resource_Mineral_Field_Type_2, 32);
        fields.get("dimensionUp").set(UnitType.Resource_Mineral_Field_Type_2, 16);
        fields.get("dimensionRight").set(UnitType.Resource_Mineral_Field_Type_2, 31);
        fields.get("dimensionDown").set(UnitType.Resource_Mineral_Field_Type_2, 15);
        fields.get("width").set(UnitType.Resource_Mineral_Field_Type_2, 64);
        fields.get("height").set(UnitType.Resource_Mineral_Field_Type_2, 32);
        fields.get("seekRange").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("sightRange").set(UnitType.Resource_Mineral_Field_Type_2, 288);
        fields.get("groundWeapon").set(UnitType.Resource_Mineral_Field_Type_2, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("airWeapon").set(UnitType.Resource_Mineral_Field_Type_2, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("topSpeed").set(UnitType.Resource_Mineral_Field_Type_2, 0.0);
        fields.get("acceleration").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("haltDistance").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("turnRadius").set(UnitType.Resource_Mineral_Field_Type_2, 0);
        fields.get("canProduce").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("canAttack").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("canMove").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isFlyer").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("regeneratesHP").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isSpellcaster").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("hasPermanentCloak").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isInvincible").set(UnitType.Resource_Mineral_Field_Type_2, true);
        fields.get("isOrganic").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isMechanical").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isRobotic").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isDetector").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isResourceContainer").set(UnitType.Resource_Mineral_Field_Type_2, true);
        fields.get("isResourceDepot").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isRefinery").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isWorker").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("requiresPsi").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("requiresCreep").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isBurrowable").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isCloakable").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isBuilding").set(UnitType.Resource_Mineral_Field_Type_2, true);
        fields.get("isAddon").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isFlyingBuilding").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isNeutral").set(UnitType.Resource_Mineral_Field_Type_2, true);
        fields.get("isHero").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isPowerup").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isBeacon").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isFlagBeacon").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isSpecialBuilding").set(UnitType.Resource_Mineral_Field_Type_2, true);
        fields.get("isSpell").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("producesCreep").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("producesLarva").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("isMineralField").set(UnitType.Resource_Mineral_Field_Type_2, true);
        fields.get("isCritter").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("canBuildAddon").set(UnitType.Resource_Mineral_Field_Type_2, false);
        fields.get("researchesWhat").set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Resource_Mineral_Field_Type_3() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Resource_Mineral_Field_Type_3, 178);
        fields.get("race").set(UnitType.Resource_Mineral_Field_Type_3, Race.None);
        fields.get("whatBuilds").set(UnitType.Resource_Mineral_Field_Type_3, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Resource_Mineral_Field_Type_3, TechType.None);
        fields.get("cloakingTech").set(UnitType.Resource_Mineral_Field_Type_3, TechType.None);
        fields.get("abilities").set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Resource_Mineral_Field_Type_3, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Resource_Mineral_Field_Type_3, 100000);
        fields.get("maxShields").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("maxEnergy").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("armor").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("mineralPrice").set(UnitType.Resource_Mineral_Field_Type_3, 1);
        fields.get("gasPrice").set(UnitType.Resource_Mineral_Field_Type_3, 1);
        fields.get("buildTime").set(UnitType.Resource_Mineral_Field_Type_3, 1);
        fields.get("supplyRequired").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("supplyProvided").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("spaceRequired").set(UnitType.Resource_Mineral_Field_Type_3, 255);
        fields.get("spaceProvided").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("buildScore").set(UnitType.Resource_Mineral_Field_Type_3, 10);
        fields.get("destroyScore").set(UnitType.Resource_Mineral_Field_Type_3, 10);
        fields.get("size").set(UnitType.Resource_Mineral_Field_Type_3, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Resource_Mineral_Field_Type_3, 2);
        fields.get("tileHeight").set(UnitType.Resource_Mineral_Field_Type_3, 1);
        fields.get("dimensionLeft").set(UnitType.Resource_Mineral_Field_Type_3, 32);
        fields.get("dimensionUp").set(UnitType.Resource_Mineral_Field_Type_3, 16);
        fields.get("dimensionRight").set(UnitType.Resource_Mineral_Field_Type_3, 31);
        fields.get("dimensionDown").set(UnitType.Resource_Mineral_Field_Type_3, 15);
        fields.get("width").set(UnitType.Resource_Mineral_Field_Type_3, 64);
        fields.get("height").set(UnitType.Resource_Mineral_Field_Type_3, 32);
        fields.get("seekRange").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("sightRange").set(UnitType.Resource_Mineral_Field_Type_3, 288);
        fields.get("groundWeapon").set(UnitType.Resource_Mineral_Field_Type_3, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("airWeapon").set(UnitType.Resource_Mineral_Field_Type_3, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("topSpeed").set(UnitType.Resource_Mineral_Field_Type_3, 0.0);
        fields.get("acceleration").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("haltDistance").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("turnRadius").set(UnitType.Resource_Mineral_Field_Type_3, 0);
        fields.get("canProduce").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("canAttack").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("canMove").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isFlyer").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("regeneratesHP").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isSpellcaster").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("hasPermanentCloak").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isInvincible").set(UnitType.Resource_Mineral_Field_Type_3, true);
        fields.get("isOrganic").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isMechanical").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isRobotic").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isDetector").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isResourceContainer").set(UnitType.Resource_Mineral_Field_Type_3, true);
        fields.get("isResourceDepot").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isRefinery").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isWorker").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("requiresPsi").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("requiresCreep").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isBurrowable").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isCloakable").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isBuilding").set(UnitType.Resource_Mineral_Field_Type_3, true);
        fields.get("isAddon").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isFlyingBuilding").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isNeutral").set(UnitType.Resource_Mineral_Field_Type_3, true);
        fields.get("isHero").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isPowerup").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isBeacon").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isFlagBeacon").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isSpecialBuilding").set(UnitType.Resource_Mineral_Field_Type_3, true);
        fields.get("isSpell").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("producesCreep").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("producesLarva").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("isMineralField").set(UnitType.Resource_Mineral_Field_Type_3, true);
        fields.get("isCritter").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("canBuildAddon").set(UnitType.Resource_Mineral_Field_Type_3, false);
        fields.get("researchesWhat").set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Cave() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Cave, 0);
        fields.get("race").set(UnitType.Unused_Cave, null);
        fields.get("whatBuilds").set(UnitType.Unused_Cave, null);
        fields.get("requiredUnits").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Cave, null);
        fields.get("cloakingTech").set(UnitType.Unused_Cave, null);
        fields.get("abilities").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Cave, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Cave, 0);
        fields.get("maxShields").set(UnitType.Unused_Cave, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Cave, 0);
        fields.get("armor").set(UnitType.Unused_Cave, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Cave, 0);
        fields.get("gasPrice").set(UnitType.Unused_Cave, 0);
        fields.get("buildTime").set(UnitType.Unused_Cave, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Cave, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Cave, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Cave, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Cave, 0);
        fields.get("buildScore").set(UnitType.Unused_Cave, 0);
        fields.get("destroyScore").set(UnitType.Unused_Cave, 0);
        fields.get("size").set(UnitType.Unused_Cave, null);
        fields.get("tileWidth").set(UnitType.Unused_Cave, 0);
        fields.get("tileHeight").set(UnitType.Unused_Cave, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Cave, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Cave, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Cave, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Cave, 0);
        fields.get("width").set(UnitType.Unused_Cave, 0);
        fields.get("height").set(UnitType.Unused_Cave, 0);
        fields.get("seekRange").set(UnitType.Unused_Cave, 0);
        fields.get("sightRange").set(UnitType.Unused_Cave, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Cave, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Cave, 0);
        fields.get("airWeapon").set(UnitType.Unused_Cave, null);
        fields.get("maxAirHits").set(UnitType.Unused_Cave, 0);
        fields.get("topSpeed").set(UnitType.Unused_Cave, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Cave, 0);
        fields.get("haltDistance").set(UnitType.Unused_Cave, 0);
        fields.get("turnRadius").set(UnitType.Unused_Cave, 0);
        fields.get("canProduce").set(UnitType.Unused_Cave, false);
        fields.get("canAttack").set(UnitType.Unused_Cave, false);
        fields.get("canMove").set(UnitType.Unused_Cave, false);
        fields.get("isFlyer").set(UnitType.Unused_Cave, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Cave, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Cave, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Cave, false);
        fields.get("isInvincible").set(UnitType.Unused_Cave, false);
        fields.get("isOrganic").set(UnitType.Unused_Cave, false);
        fields.get("isMechanical").set(UnitType.Unused_Cave, false);
        fields.get("isRobotic").set(UnitType.Unused_Cave, false);
        fields.get("isDetector").set(UnitType.Unused_Cave, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Cave, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Cave, false);
        fields.get("isRefinery").set(UnitType.Unused_Cave, false);
        fields.get("isWorker").set(UnitType.Unused_Cave, false);
        fields.get("requiresPsi").set(UnitType.Unused_Cave, false);
        fields.get("requiresCreep").set(UnitType.Unused_Cave, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Cave, false);
        fields.get("isBurrowable").set(UnitType.Unused_Cave, false);
        fields.get("isCloakable").set(UnitType.Unused_Cave, false);
        fields.get("isBuilding").set(UnitType.Unused_Cave, false);
        fields.get("isAddon").set(UnitType.Unused_Cave, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Cave, false);
        fields.get("isNeutral").set(UnitType.Unused_Cave, false);
        fields.get("isHero").set(UnitType.Unused_Cave, false);
        fields.get("isPowerup").set(UnitType.Unused_Cave, false);
        fields.get("isBeacon").set(UnitType.Unused_Cave, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Cave, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Cave, false);
        fields.get("isSpell").set(UnitType.Unused_Cave, false);
        fields.get("producesCreep").set(UnitType.Unused_Cave, false);
        fields.get("producesLarva").set(UnitType.Unused_Cave, false);
        fields.get("isMineralField").set(UnitType.Unused_Cave, false);
        fields.get("isCritter").set(UnitType.Unused_Cave, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Cave, false);
        fields.get("researchesWhat").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Cave_In() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Cave_In, 0);
        fields.get("race").set(UnitType.Unused_Cave_In, null);
        fields.get("whatBuilds").set(UnitType.Unused_Cave_In, null);
        fields.get("requiredUnits").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Cave_In, null);
        fields.get("cloakingTech").set(UnitType.Unused_Cave_In, null);
        fields.get("abilities").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Cave_In, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Cave_In, 0);
        fields.get("maxShields").set(UnitType.Unused_Cave_In, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Cave_In, 0);
        fields.get("armor").set(UnitType.Unused_Cave_In, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Cave_In, 0);
        fields.get("gasPrice").set(UnitType.Unused_Cave_In, 0);
        fields.get("buildTime").set(UnitType.Unused_Cave_In, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Cave_In, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Cave_In, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Cave_In, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Cave_In, 0);
        fields.get("buildScore").set(UnitType.Unused_Cave_In, 0);
        fields.get("destroyScore").set(UnitType.Unused_Cave_In, 0);
        fields.get("size").set(UnitType.Unused_Cave_In, null);
        fields.get("tileWidth").set(UnitType.Unused_Cave_In, 0);
        fields.get("tileHeight").set(UnitType.Unused_Cave_In, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Cave_In, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Cave_In, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Cave_In, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Cave_In, 0);
        fields.get("width").set(UnitType.Unused_Cave_In, 0);
        fields.get("height").set(UnitType.Unused_Cave_In, 0);
        fields.get("seekRange").set(UnitType.Unused_Cave_In, 0);
        fields.get("sightRange").set(UnitType.Unused_Cave_In, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Cave_In, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Cave_In, 0);
        fields.get("airWeapon").set(UnitType.Unused_Cave_In, null);
        fields.get("maxAirHits").set(UnitType.Unused_Cave_In, 0);
        fields.get("topSpeed").set(UnitType.Unused_Cave_In, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Cave_In, 0);
        fields.get("haltDistance").set(UnitType.Unused_Cave_In, 0);
        fields.get("turnRadius").set(UnitType.Unused_Cave_In, 0);
        fields.get("canProduce").set(UnitType.Unused_Cave_In, false);
        fields.get("canAttack").set(UnitType.Unused_Cave_In, false);
        fields.get("canMove").set(UnitType.Unused_Cave_In, false);
        fields.get("isFlyer").set(UnitType.Unused_Cave_In, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Cave_In, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Cave_In, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Cave_In, false);
        fields.get("isInvincible").set(UnitType.Unused_Cave_In, false);
        fields.get("isOrganic").set(UnitType.Unused_Cave_In, false);
        fields.get("isMechanical").set(UnitType.Unused_Cave_In, false);
        fields.get("isRobotic").set(UnitType.Unused_Cave_In, false);
        fields.get("isDetector").set(UnitType.Unused_Cave_In, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Cave_In, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Cave_In, false);
        fields.get("isRefinery").set(UnitType.Unused_Cave_In, false);
        fields.get("isWorker").set(UnitType.Unused_Cave_In, false);
        fields.get("requiresPsi").set(UnitType.Unused_Cave_In, false);
        fields.get("requiresCreep").set(UnitType.Unused_Cave_In, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Cave_In, false);
        fields.get("isBurrowable").set(UnitType.Unused_Cave_In, false);
        fields.get("isCloakable").set(UnitType.Unused_Cave_In, false);
        fields.get("isBuilding").set(UnitType.Unused_Cave_In, false);
        fields.get("isAddon").set(UnitType.Unused_Cave_In, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Cave_In, false);
        fields.get("isNeutral").set(UnitType.Unused_Cave_In, false);
        fields.get("isHero").set(UnitType.Unused_Cave_In, false);
        fields.get("isPowerup").set(UnitType.Unused_Cave_In, false);
        fields.get("isBeacon").set(UnitType.Unused_Cave_In, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Cave_In, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Cave_In, false);
        fields.get("isSpell").set(UnitType.Unused_Cave_In, false);
        fields.get("producesCreep").set(UnitType.Unused_Cave_In, false);
        fields.get("producesLarva").set(UnitType.Unused_Cave_In, false);
        fields.get("isMineralField").set(UnitType.Unused_Cave_In, false);
        fields.get("isCritter").set(UnitType.Unused_Cave_In, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Cave_In, false);
        fields.get("researchesWhat").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Cantina() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Cantina, 0);
        fields.get("race").set(UnitType.Unused_Cantina, null);
        fields.get("whatBuilds").set(UnitType.Unused_Cantina, null);
        fields.get("requiredUnits").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Cantina, null);
        fields.get("cloakingTech").set(UnitType.Unused_Cantina, null);
        fields.get("abilities").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Cantina, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Cantina, 0);
        fields.get("maxShields").set(UnitType.Unused_Cantina, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Cantina, 0);
        fields.get("armor").set(UnitType.Unused_Cantina, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Cantina, 0);
        fields.get("gasPrice").set(UnitType.Unused_Cantina, 0);
        fields.get("buildTime").set(UnitType.Unused_Cantina, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Cantina, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Cantina, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Cantina, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Cantina, 0);
        fields.get("buildScore").set(UnitType.Unused_Cantina, 0);
        fields.get("destroyScore").set(UnitType.Unused_Cantina, 0);
        fields.get("size").set(UnitType.Unused_Cantina, null);
        fields.get("tileWidth").set(UnitType.Unused_Cantina, 0);
        fields.get("tileHeight").set(UnitType.Unused_Cantina, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Cantina, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Cantina, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Cantina, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Cantina, 0);
        fields.get("width").set(UnitType.Unused_Cantina, 0);
        fields.get("height").set(UnitType.Unused_Cantina, 0);
        fields.get("seekRange").set(UnitType.Unused_Cantina, 0);
        fields.get("sightRange").set(UnitType.Unused_Cantina, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Cantina, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Cantina, 0);
        fields.get("airWeapon").set(UnitType.Unused_Cantina, null);
        fields.get("maxAirHits").set(UnitType.Unused_Cantina, 0);
        fields.get("topSpeed").set(UnitType.Unused_Cantina, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Cantina, 0);
        fields.get("haltDistance").set(UnitType.Unused_Cantina, 0);
        fields.get("turnRadius").set(UnitType.Unused_Cantina, 0);
        fields.get("canProduce").set(UnitType.Unused_Cantina, false);
        fields.get("canAttack").set(UnitType.Unused_Cantina, false);
        fields.get("canMove").set(UnitType.Unused_Cantina, false);
        fields.get("isFlyer").set(UnitType.Unused_Cantina, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Cantina, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Cantina, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Cantina, false);
        fields.get("isInvincible").set(UnitType.Unused_Cantina, false);
        fields.get("isOrganic").set(UnitType.Unused_Cantina, false);
        fields.get("isMechanical").set(UnitType.Unused_Cantina, false);
        fields.get("isRobotic").set(UnitType.Unused_Cantina, false);
        fields.get("isDetector").set(UnitType.Unused_Cantina, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Cantina, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Cantina, false);
        fields.get("isRefinery").set(UnitType.Unused_Cantina, false);
        fields.get("isWorker").set(UnitType.Unused_Cantina, false);
        fields.get("requiresPsi").set(UnitType.Unused_Cantina, false);
        fields.get("requiresCreep").set(UnitType.Unused_Cantina, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Cantina, false);
        fields.get("isBurrowable").set(UnitType.Unused_Cantina, false);
        fields.get("isCloakable").set(UnitType.Unused_Cantina, false);
        fields.get("isBuilding").set(UnitType.Unused_Cantina, false);
        fields.get("isAddon").set(UnitType.Unused_Cantina, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Cantina, false);
        fields.get("isNeutral").set(UnitType.Unused_Cantina, false);
        fields.get("isHero").set(UnitType.Unused_Cantina, false);
        fields.get("isPowerup").set(UnitType.Unused_Cantina, false);
        fields.get("isBeacon").set(UnitType.Unused_Cantina, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Cantina, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Cantina, false);
        fields.get("isSpell").set(UnitType.Unused_Cantina, false);
        fields.get("producesCreep").set(UnitType.Unused_Cantina, false);
        fields.get("producesLarva").set(UnitType.Unused_Cantina, false);
        fields.get("isMineralField").set(UnitType.Unused_Cantina, false);
        fields.get("isCritter").set(UnitType.Unused_Cantina, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Cantina, false);
        fields.get("researchesWhat").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Mining_Platform() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("race").set(UnitType.Unused_Mining_Platform, null);
        fields.get("whatBuilds").set(UnitType.Unused_Mining_Platform, null);
        fields.get("requiredUnits").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Mining_Platform, null);
        fields.get("cloakingTech").set(UnitType.Unused_Mining_Platform, null);
        fields.get("abilities").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Mining_Platform, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("maxShields").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("armor").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("gasPrice").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("buildTime").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("buildScore").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("destroyScore").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("size").set(UnitType.Unused_Mining_Platform, null);
        fields.get("tileWidth").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("tileHeight").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("width").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("height").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("seekRange").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("sightRange").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Mining_Platform, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("airWeapon").set(UnitType.Unused_Mining_Platform, null);
        fields.get("maxAirHits").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("topSpeed").set(UnitType.Unused_Mining_Platform, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("haltDistance").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("turnRadius").set(UnitType.Unused_Mining_Platform, 0);
        fields.get("canProduce").set(UnitType.Unused_Mining_Platform, false);
        fields.get("canAttack").set(UnitType.Unused_Mining_Platform, false);
        fields.get("canMove").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isFlyer").set(UnitType.Unused_Mining_Platform, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Mining_Platform, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isInvincible").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isOrganic").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isMechanical").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isRobotic").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isDetector").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isRefinery").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isWorker").set(UnitType.Unused_Mining_Platform, false);
        fields.get("requiresPsi").set(UnitType.Unused_Mining_Platform, false);
        fields.get("requiresCreep").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isBurrowable").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isCloakable").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isBuilding").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isAddon").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isNeutral").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isHero").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isPowerup").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isBeacon").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isSpell").set(UnitType.Unused_Mining_Platform, false);
        fields.get("producesCreep").set(UnitType.Unused_Mining_Platform, false);
        fields.get("producesLarva").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isMineralField").set(UnitType.Unused_Mining_Platform, false);
        fields.get("isCritter").set(UnitType.Unused_Mining_Platform, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Mining_Platform, false);
        fields.get("researchesWhat").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Independant_Command_Center() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("race").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("whatBuilds").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("requiredUnits").set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("cloakingTech").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("abilities").set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("maxShields").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("armor").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("gasPrice").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("buildTime").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("buildScore").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("destroyScore").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("size").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("tileWidth").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("tileHeight").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("width").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("height").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("seekRange").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("sightRange").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("airWeapon").set(UnitType.Unused_Independant_Command_Center, null);
        fields.get("maxAirHits").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("topSpeed").set(UnitType.Unused_Independant_Command_Center, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("haltDistance").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("turnRadius").set(UnitType.Unused_Independant_Command_Center, 0);
        fields.get("canProduce").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("canAttack").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("canMove").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isFlyer").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isInvincible").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isOrganic").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isMechanical").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isRobotic").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isDetector").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isRefinery").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isWorker").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("requiresPsi").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("requiresCreep").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isBurrowable").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isCloakable").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isBuilding").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isAddon").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isNeutral").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isHero").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isPowerup").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isBeacon").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isSpell").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("producesCreep").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("producesLarva").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isMineralField").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("isCritter").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Independant_Command_Center, false);
        fields.get("researchesWhat").set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Independant_Starport() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Independant_Starport, 184);
        fields.get("race").set(UnitType.Special_Independant_Starport, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Independant_Starport, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Independant_Starport, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Independant_Starport, TechType.None);
        fields.get("abilities").set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Independant_Starport, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Independant_Starport, 800);
        fields.get("maxShields").set(UnitType.Special_Independant_Starport, 0);
        fields.get("maxEnergy").set(UnitType.Special_Independant_Starport, 0);
        fields.get("armor").set(UnitType.Special_Independant_Starport, 0);
        fields.get("mineralPrice").set(UnitType.Special_Independant_Starport, 1);
        fields.get("gasPrice").set(UnitType.Special_Independant_Starport, 1);
        fields.get("buildTime").set(UnitType.Special_Independant_Starport, 1);
        fields.get("supplyRequired").set(UnitType.Special_Independant_Starport, 0);
        fields.get("supplyProvided").set(UnitType.Special_Independant_Starport, 0);
        fields.get("spaceRequired").set(UnitType.Special_Independant_Starport, 255);
        fields.get("spaceProvided").set(UnitType.Special_Independant_Starport, 0);
        fields.get("buildScore").set(UnitType.Special_Independant_Starport, 10);
        fields.get("destroyScore").set(UnitType.Special_Independant_Starport, 10);
        fields.get("size").set(UnitType.Special_Independant_Starport, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Independant_Starport, 2);
        fields.get("tileHeight").set(UnitType.Special_Independant_Starport, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Independant_Starport, 32);
        fields.get("dimensionUp").set(UnitType.Special_Independant_Starport, 32);
        fields.get("dimensionRight").set(UnitType.Special_Independant_Starport, 31);
        fields.get("dimensionDown").set(UnitType.Special_Independant_Starport, 31);
        fields.get("width").set(UnitType.Special_Independant_Starport, 64);
        fields.get("height").set(UnitType.Special_Independant_Starport, 64);
        fields.get("seekRange").set(UnitType.Special_Independant_Starport, 0);
        fields.get("sightRange").set(UnitType.Special_Independant_Starport, 288);
        fields.get("groundWeapon").set(UnitType.Special_Independant_Starport, WeaponType.Independant_Laser_Battery);
        fields.get("maxGroundHits").set(UnitType.Special_Independant_Starport, 1);
        fields.get("airWeapon").set(UnitType.Special_Independant_Starport, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Independant_Starport, 0);
        fields.get("topSpeed").set(UnitType.Special_Independant_Starport, 0.0);
        fields.get("acceleration").set(UnitType.Special_Independant_Starport, 0);
        fields.get("haltDistance").set(UnitType.Special_Independant_Starport, 0);
        fields.get("turnRadius").set(UnitType.Special_Independant_Starport, 0);
        fields.get("canProduce").set(UnitType.Special_Independant_Starport, false);
        fields.get("canAttack").set(UnitType.Special_Independant_Starport, false);
        fields.get("canMove").set(UnitType.Special_Independant_Starport, false);
        fields.get("isFlyer").set(UnitType.Special_Independant_Starport, false);
        fields.get("regeneratesHP").set(UnitType.Special_Independant_Starport, false);
        fields.get("isSpellcaster").set(UnitType.Special_Independant_Starport, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Independant_Starport, false);
        fields.get("isInvincible").set(UnitType.Special_Independant_Starport, false);
        fields.get("isOrganic").set(UnitType.Special_Independant_Starport, false);
        fields.get("isMechanical").set(UnitType.Special_Independant_Starport, true);
        fields.get("isRobotic").set(UnitType.Special_Independant_Starport, false);
        fields.get("isDetector").set(UnitType.Special_Independant_Starport, false);
        fields.get("isResourceContainer").set(UnitType.Special_Independant_Starport, false);
        fields.get("isResourceDepot").set(UnitType.Special_Independant_Starport, false);
        fields.get("isRefinery").set(UnitType.Special_Independant_Starport, false);
        fields.get("isWorker").set(UnitType.Special_Independant_Starport, false);
        fields.get("requiresPsi").set(UnitType.Special_Independant_Starport, false);
        fields.get("requiresCreep").set(UnitType.Special_Independant_Starport, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Independant_Starport, false);
        fields.get("isBurrowable").set(UnitType.Special_Independant_Starport, false);
        fields.get("isCloakable").set(UnitType.Special_Independant_Starport, false);
        fields.get("isBuilding").set(UnitType.Special_Independant_Starport, true);
        fields.get("isAddon").set(UnitType.Special_Independant_Starport, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Independant_Starport, false);
        fields.get("isNeutral").set(UnitType.Special_Independant_Starport, false);
        fields.get("isHero").set(UnitType.Special_Independant_Starport, false);
        fields.get("isPowerup").set(UnitType.Special_Independant_Starport, false);
        fields.get("isBeacon").set(UnitType.Special_Independant_Starport, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Independant_Starport, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Independant_Starport, true);
        fields.get("isSpell").set(UnitType.Special_Independant_Starport, false);
        fields.get("producesCreep").set(UnitType.Special_Independant_Starport, false);
        fields.get("producesLarva").set(UnitType.Special_Independant_Starport, false);
        fields.get("isMineralField").set(UnitType.Special_Independant_Starport, false);
        fields.get("isCritter").set(UnitType.Special_Independant_Starport, false);
        fields.get("canBuildAddon").set(UnitType.Special_Independant_Starport, false);
        fields.get("researchesWhat").set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Independant_Jump_Gate() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("race").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("whatBuilds").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("requiredUnits").set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("cloakingTech").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("abilities").set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("maxShields").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("armor").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("gasPrice").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("buildTime").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("buildScore").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("destroyScore").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("size").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("tileWidth").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("tileHeight").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("width").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("height").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("seekRange").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("sightRange").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("airWeapon").set(UnitType.Unused_Independant_Jump_Gate, null);
        fields.get("maxAirHits").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("topSpeed").set(UnitType.Unused_Independant_Jump_Gate, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("haltDistance").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("turnRadius").set(UnitType.Unused_Independant_Jump_Gate, 0);
        fields.get("canProduce").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("canAttack").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("canMove").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isFlyer").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isInvincible").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isOrganic").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isMechanical").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isRobotic").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isDetector").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isRefinery").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isWorker").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("requiresPsi").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("requiresCreep").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isBurrowable").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isCloakable").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isBuilding").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isAddon").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isNeutral").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isHero").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isPowerup").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isBeacon").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isSpell").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("producesCreep").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("producesLarva").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isMineralField").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("isCritter").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Independant_Jump_Gate, false);
        fields.get("researchesWhat").set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Ruins() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Ruins, 0);
        fields.get("race").set(UnitType.Unused_Ruins, null);
        fields.get("whatBuilds").set(UnitType.Unused_Ruins, null);
        fields.get("requiredUnits").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Ruins, null);
        fields.get("cloakingTech").set(UnitType.Unused_Ruins, null);
        fields.get("abilities").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Ruins, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Ruins, 0);
        fields.get("maxShields").set(UnitType.Unused_Ruins, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Ruins, 0);
        fields.get("armor").set(UnitType.Unused_Ruins, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Ruins, 0);
        fields.get("gasPrice").set(UnitType.Unused_Ruins, 0);
        fields.get("buildTime").set(UnitType.Unused_Ruins, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Ruins, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Ruins, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Ruins, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Ruins, 0);
        fields.get("buildScore").set(UnitType.Unused_Ruins, 0);
        fields.get("destroyScore").set(UnitType.Unused_Ruins, 0);
        fields.get("size").set(UnitType.Unused_Ruins, null);
        fields.get("tileWidth").set(UnitType.Unused_Ruins, 0);
        fields.get("tileHeight").set(UnitType.Unused_Ruins, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Ruins, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Ruins, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Ruins, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Ruins, 0);
        fields.get("width").set(UnitType.Unused_Ruins, 0);
        fields.get("height").set(UnitType.Unused_Ruins, 0);
        fields.get("seekRange").set(UnitType.Unused_Ruins, 0);
        fields.get("sightRange").set(UnitType.Unused_Ruins, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Ruins, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Ruins, 0);
        fields.get("airWeapon").set(UnitType.Unused_Ruins, null);
        fields.get("maxAirHits").set(UnitType.Unused_Ruins, 0);
        fields.get("topSpeed").set(UnitType.Unused_Ruins, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Ruins, 0);
        fields.get("haltDistance").set(UnitType.Unused_Ruins, 0);
        fields.get("turnRadius").set(UnitType.Unused_Ruins, 0);
        fields.get("canProduce").set(UnitType.Unused_Ruins, false);
        fields.get("canAttack").set(UnitType.Unused_Ruins, false);
        fields.get("canMove").set(UnitType.Unused_Ruins, false);
        fields.get("isFlyer").set(UnitType.Unused_Ruins, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Ruins, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Ruins, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Ruins, false);
        fields.get("isInvincible").set(UnitType.Unused_Ruins, false);
        fields.get("isOrganic").set(UnitType.Unused_Ruins, false);
        fields.get("isMechanical").set(UnitType.Unused_Ruins, false);
        fields.get("isRobotic").set(UnitType.Unused_Ruins, false);
        fields.get("isDetector").set(UnitType.Unused_Ruins, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Ruins, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Ruins, false);
        fields.get("isRefinery").set(UnitType.Unused_Ruins, false);
        fields.get("isWorker").set(UnitType.Unused_Ruins, false);
        fields.get("requiresPsi").set(UnitType.Unused_Ruins, false);
        fields.get("requiresCreep").set(UnitType.Unused_Ruins, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Ruins, false);
        fields.get("isBurrowable").set(UnitType.Unused_Ruins, false);
        fields.get("isCloakable").set(UnitType.Unused_Ruins, false);
        fields.get("isBuilding").set(UnitType.Unused_Ruins, false);
        fields.get("isAddon").set(UnitType.Unused_Ruins, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Ruins, false);
        fields.get("isNeutral").set(UnitType.Unused_Ruins, false);
        fields.get("isHero").set(UnitType.Unused_Ruins, false);
        fields.get("isPowerup").set(UnitType.Unused_Ruins, false);
        fields.get("isBeacon").set(UnitType.Unused_Ruins, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Ruins, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Ruins, false);
        fields.get("isSpell").set(UnitType.Unused_Ruins, false);
        fields.get("producesCreep").set(UnitType.Unused_Ruins, false);
        fields.get("producesLarva").set(UnitType.Unused_Ruins, false);
        fields.get("isMineralField").set(UnitType.Unused_Ruins, false);
        fields.get("isCritter").set(UnitType.Unused_Ruins, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Ruins, false);
        fields.get("researchesWhat").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Khaydarin_Crystal_Formation() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("race").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("whatBuilds").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("requiredUnits").set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("cloakingTech").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("abilities").set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("maxShields").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("armor").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("gasPrice").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("buildTime").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("buildScore").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("destroyScore").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("size").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("tileWidth").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("tileHeight").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("width").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("height").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("seekRange").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("sightRange").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("airWeapon").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
        fields.get("maxAirHits").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("topSpeed").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("haltDistance").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("turnRadius").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
        fields.get("canProduce").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("canAttack").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("canMove").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isFlyer").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isInvincible").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isOrganic").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isMechanical").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isRobotic").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isDetector").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isRefinery").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isWorker").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("requiresPsi").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("requiresCreep").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isBurrowable").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isCloakable").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isBuilding").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isAddon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isNeutral").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isHero").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isPowerup").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isBeacon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isSpell").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("producesCreep").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("producesLarva").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isMineralField").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("isCritter").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
        fields.get("researchesWhat").set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Resource_Vespene_Geyser() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Resource_Vespene_Geyser, 188);
        fields.get("race").set(UnitType.Resource_Vespene_Geyser, Race.None);
        fields.get("whatBuilds").set(UnitType.Resource_Vespene_Geyser, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Resource_Vespene_Geyser, TechType.None);
        fields.get("cloakingTech").set(UnitType.Resource_Vespene_Geyser, TechType.None);
        fields.get("abilities").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Resource_Vespene_Geyser, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Resource_Vespene_Geyser, 100000);
        fields.get("maxShields").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("maxEnergy").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("armor").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("mineralPrice").set(UnitType.Resource_Vespene_Geyser, 1);
        fields.get("gasPrice").set(UnitType.Resource_Vespene_Geyser, 1);
        fields.get("buildTime").set(UnitType.Resource_Vespene_Geyser, 1);
        fields.get("supplyRequired").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("supplyProvided").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("spaceRequired").set(UnitType.Resource_Vespene_Geyser, 255);
        fields.get("spaceProvided").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("buildScore").set(UnitType.Resource_Vespene_Geyser, 10);
        fields.get("destroyScore").set(UnitType.Resource_Vespene_Geyser, 10);
        fields.get("size").set(UnitType.Resource_Vespene_Geyser, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Resource_Vespene_Geyser, 4);
        fields.get("tileHeight").set(UnitType.Resource_Vespene_Geyser, 2);
        fields.get("dimensionLeft").set(UnitType.Resource_Vespene_Geyser, 64);
        fields.get("dimensionUp").set(UnitType.Resource_Vespene_Geyser, 32);
        fields.get("dimensionRight").set(UnitType.Resource_Vespene_Geyser, 63);
        fields.get("dimensionDown").set(UnitType.Resource_Vespene_Geyser, 31);
        fields.get("width").set(UnitType.Resource_Vespene_Geyser, 128);
        fields.get("height").set(UnitType.Resource_Vespene_Geyser, 64);
        fields.get("seekRange").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("sightRange").set(UnitType.Resource_Vespene_Geyser, 288);
        fields.get("groundWeapon").set(UnitType.Resource_Vespene_Geyser, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("airWeapon").set(UnitType.Resource_Vespene_Geyser, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("topSpeed").set(UnitType.Resource_Vespene_Geyser, 0.0);
        fields.get("acceleration").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("haltDistance").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("turnRadius").set(UnitType.Resource_Vespene_Geyser, 0);
        fields.get("canProduce").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("canAttack").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("canMove").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isFlyer").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("regeneratesHP").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isSpellcaster").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("hasPermanentCloak").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isInvincible").set(UnitType.Resource_Vespene_Geyser, true);
        fields.get("isOrganic").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isMechanical").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isRobotic").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isDetector").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isResourceContainer").set(UnitType.Resource_Vespene_Geyser, true);
        fields.get("isResourceDepot").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isRefinery").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isWorker").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("requiresPsi").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("requiresCreep").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isBurrowable").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isCloakable").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isBuilding").set(UnitType.Resource_Vespene_Geyser, true);
        fields.get("isAddon").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isFlyingBuilding").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isNeutral").set(UnitType.Resource_Vespene_Geyser, true);
        fields.get("isHero").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isPowerup").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isBeacon").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isFlagBeacon").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isSpecialBuilding").set(UnitType.Resource_Vespene_Geyser, true);
        fields.get("isSpell").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("producesCreep").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("producesLarva").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isMineralField").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("isCritter").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("canBuildAddon").set(UnitType.Resource_Vespene_Geyser, false);
        fields.get("researchesWhat").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Warp_Gate() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Warp_Gate, 189);
        fields.get("race").set(UnitType.Special_Warp_Gate, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Special_Warp_Gate, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Warp_Gate, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Warp_Gate, TechType.None);
        fields.get("abilities").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Warp_Gate, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Warp_Gate, 700);
        fields.get("maxShields").set(UnitType.Special_Warp_Gate, 0);
        fields.get("maxEnergy").set(UnitType.Special_Warp_Gate, 0);
        fields.get("armor").set(UnitType.Special_Warp_Gate, 1);
        fields.get("mineralPrice").set(UnitType.Special_Warp_Gate, 600);
        fields.get("gasPrice").set(UnitType.Special_Warp_Gate, 200);
        fields.get("buildTime").set(UnitType.Special_Warp_Gate, 2400);
        fields.get("supplyRequired").set(UnitType.Special_Warp_Gate, 0);
        fields.get("supplyProvided").set(UnitType.Special_Warp_Gate, 0);
        fields.get("spaceRequired").set(UnitType.Special_Warp_Gate, 255);
        fields.get("spaceProvided").set(UnitType.Special_Warp_Gate, 0);
        fields.get("buildScore").set(UnitType.Special_Warp_Gate, 0);
        fields.get("destroyScore").set(UnitType.Special_Warp_Gate, 2000);
        fields.get("size").set(UnitType.Special_Warp_Gate, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Warp_Gate, 3);
        fields.get("tileHeight").set(UnitType.Special_Warp_Gate, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Warp_Gate, 48);
        fields.get("dimensionUp").set(UnitType.Special_Warp_Gate, 32);
        fields.get("dimensionRight").set(UnitType.Special_Warp_Gate, 47);
        fields.get("dimensionDown").set(UnitType.Special_Warp_Gate, 31);
        fields.get("width").set(UnitType.Special_Warp_Gate, 96);
        fields.get("height").set(UnitType.Special_Warp_Gate, 64);
        fields.get("seekRange").set(UnitType.Special_Warp_Gate, 0);
        fields.get("sightRange").set(UnitType.Special_Warp_Gate, 256);
        fields.get("groundWeapon").set(UnitType.Special_Warp_Gate, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Warp_Gate, 0);
        fields.get("airWeapon").set(UnitType.Special_Warp_Gate, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Warp_Gate, 0);
        fields.get("topSpeed").set(UnitType.Special_Warp_Gate, 0.0);
        fields.get("acceleration").set(UnitType.Special_Warp_Gate, 0);
        fields.get("haltDistance").set(UnitType.Special_Warp_Gate, 0);
        fields.get("turnRadius").set(UnitType.Special_Warp_Gate, 0);
        fields.get("canProduce").set(UnitType.Special_Warp_Gate, false);
        fields.get("canAttack").set(UnitType.Special_Warp_Gate, false);
        fields.get("canMove").set(UnitType.Special_Warp_Gate, false);
        fields.get("isFlyer").set(UnitType.Special_Warp_Gate, false);
        fields.get("regeneratesHP").set(UnitType.Special_Warp_Gate, false);
        fields.get("isSpellcaster").set(UnitType.Special_Warp_Gate, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Warp_Gate, false);
        fields.get("isInvincible").set(UnitType.Special_Warp_Gate, false);
        fields.get("isOrganic").set(UnitType.Special_Warp_Gate, false);
        fields.get("isMechanical").set(UnitType.Special_Warp_Gate, true);
        fields.get("isRobotic").set(UnitType.Special_Warp_Gate, false);
        fields.get("isDetector").set(UnitType.Special_Warp_Gate, false);
        fields.get("isResourceContainer").set(UnitType.Special_Warp_Gate, false);
        fields.get("isResourceDepot").set(UnitType.Special_Warp_Gate, false);
        fields.get("isRefinery").set(UnitType.Special_Warp_Gate, false);
        fields.get("isWorker").set(UnitType.Special_Warp_Gate, false);
        fields.get("requiresPsi").set(UnitType.Special_Warp_Gate, false);
        fields.get("requiresCreep").set(UnitType.Special_Warp_Gate, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Warp_Gate, false);
        fields.get("isBurrowable").set(UnitType.Special_Warp_Gate, false);
        fields.get("isCloakable").set(UnitType.Special_Warp_Gate, false);
        fields.get("isBuilding").set(UnitType.Special_Warp_Gate, true);
        fields.get("isAddon").set(UnitType.Special_Warp_Gate, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Warp_Gate, false);
        fields.get("isNeutral").set(UnitType.Special_Warp_Gate, false);
        fields.get("isHero").set(UnitType.Special_Warp_Gate, false);
        fields.get("isPowerup").set(UnitType.Special_Warp_Gate, false);
        fields.get("isBeacon").set(UnitType.Special_Warp_Gate, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Warp_Gate, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Warp_Gate, true);
        fields.get("isSpell").set(UnitType.Special_Warp_Gate, false);
        fields.get("producesCreep").set(UnitType.Special_Warp_Gate, false);
        fields.get("producesLarva").set(UnitType.Special_Warp_Gate, false);
        fields.get("isMineralField").set(UnitType.Special_Warp_Gate, false);
        fields.get("isCritter").set(UnitType.Special_Warp_Gate, false);
        fields.get("canBuildAddon").set(UnitType.Special_Warp_Gate, false);
        fields.get("researchesWhat").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Psi_Disrupter() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Psi_Disrupter, 190);
        fields.get("race").set(UnitType.Special_Psi_Disrupter, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Special_Psi_Disrupter, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Psi_Disrupter, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Psi_Disrupter, TechType.None);
        fields.get("abilities").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Psi_Disrupter, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Psi_Disrupter, 2000);
        fields.get("maxShields").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("maxEnergy").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("armor").set(UnitType.Special_Psi_Disrupter, 1);
        fields.get("mineralPrice").set(UnitType.Special_Psi_Disrupter, 1000);
        fields.get("gasPrice").set(UnitType.Special_Psi_Disrupter, 400);
        fields.get("buildTime").set(UnitType.Special_Psi_Disrupter, 4800);
        fields.get("supplyRequired").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("supplyProvided").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("spaceRequired").set(UnitType.Special_Psi_Disrupter, 255);
        fields.get("spaceProvided").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("buildScore").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("destroyScore").set(UnitType.Special_Psi_Disrupter, 3600);
        fields.get("size").set(UnitType.Special_Psi_Disrupter, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Psi_Disrupter, 5);
        fields.get("tileHeight").set(UnitType.Special_Psi_Disrupter, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Psi_Disrupter, 80);
        fields.get("dimensionUp").set(UnitType.Special_Psi_Disrupter, 38);
        fields.get("dimensionRight").set(UnitType.Special_Psi_Disrupter, 69);
        fields.get("dimensionDown").set(UnitType.Special_Psi_Disrupter, 47);
        fields.get("width").set(UnitType.Special_Psi_Disrupter, 150);
        fields.get("height").set(UnitType.Special_Psi_Disrupter, 86);
        fields.get("seekRange").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("sightRange").set(UnitType.Special_Psi_Disrupter, 320);
        fields.get("groundWeapon").set(UnitType.Special_Psi_Disrupter, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("airWeapon").set(UnitType.Special_Psi_Disrupter, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("topSpeed").set(UnitType.Special_Psi_Disrupter, 0.0);
        fields.get("acceleration").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("haltDistance").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("turnRadius").set(UnitType.Special_Psi_Disrupter, 0);
        fields.get("canProduce").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("canAttack").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("canMove").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isFlyer").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("regeneratesHP").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isSpellcaster").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isInvincible").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isOrganic").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isMechanical").set(UnitType.Special_Psi_Disrupter, true);
        fields.get("isRobotic").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isDetector").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isResourceContainer").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isResourceDepot").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isRefinery").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isWorker").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("requiresPsi").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("requiresCreep").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isBurrowable").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isCloakable").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isBuilding").set(UnitType.Special_Psi_Disrupter, true);
        fields.get("isAddon").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isNeutral").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isHero").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isPowerup").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isBeacon").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Psi_Disrupter, true);
        fields.get("isSpell").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("producesCreep").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("producesLarva").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isMineralField").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("isCritter").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("canBuildAddon").set(UnitType.Special_Psi_Disrupter, false);
        fields.get("researchesWhat").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Zerg_Marker() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("race").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("whatBuilds").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("requiredUnits").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("cloakingTech").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("abilities").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("maxShields").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("armor").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("gasPrice").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("buildTime").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("buildScore").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("destroyScore").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("size").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("tileWidth").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("tileHeight").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("width").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("height").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("seekRange").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("sightRange").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("airWeapon").set(UnitType.Unused_Zerg_Marker, null);
        fields.get("maxAirHits").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("topSpeed").set(UnitType.Unused_Zerg_Marker, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("haltDistance").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("turnRadius").set(UnitType.Unused_Zerg_Marker, 0);
        fields.get("canProduce").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("canAttack").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("canMove").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isFlyer").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isInvincible").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isOrganic").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isMechanical").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isRobotic").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isDetector").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isRefinery").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isWorker").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("requiresPsi").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("requiresCreep").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isBurrowable").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isCloakable").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isBuilding").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isAddon").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isNeutral").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isHero").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isPowerup").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isBeacon").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isSpell").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("producesCreep").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("producesLarva").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isMineralField").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("isCritter").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Zerg_Marker, false);
        fields.get("researchesWhat").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Terran_Marker() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("race").set(UnitType.Unused_Terran_Marker, null);
        fields.get("whatBuilds").set(UnitType.Unused_Terran_Marker, null);
        fields.get("requiredUnits").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Terran_Marker, null);
        fields.get("cloakingTech").set(UnitType.Unused_Terran_Marker, null);
        fields.get("abilities").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Terran_Marker, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("maxShields").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("armor").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("gasPrice").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("buildTime").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("buildScore").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("destroyScore").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("size").set(UnitType.Unused_Terran_Marker, null);
        fields.get("tileWidth").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("tileHeight").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("width").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("height").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("seekRange").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("sightRange").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Terran_Marker, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("airWeapon").set(UnitType.Unused_Terran_Marker, null);
        fields.get("maxAirHits").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("topSpeed").set(UnitType.Unused_Terran_Marker, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("haltDistance").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("turnRadius").set(UnitType.Unused_Terran_Marker, 0);
        fields.get("canProduce").set(UnitType.Unused_Terran_Marker, false);
        fields.get("canAttack").set(UnitType.Unused_Terran_Marker, false);
        fields.get("canMove").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isFlyer").set(UnitType.Unused_Terran_Marker, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Terran_Marker, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isInvincible").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isOrganic").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isMechanical").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isRobotic").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isDetector").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isRefinery").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isWorker").set(UnitType.Unused_Terran_Marker, false);
        fields.get("requiresPsi").set(UnitType.Unused_Terran_Marker, false);
        fields.get("requiresCreep").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isBurrowable").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isCloakable").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isBuilding").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isAddon").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isNeutral").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isHero").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isPowerup").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isBeacon").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isSpell").set(UnitType.Unused_Terran_Marker, false);
        fields.get("producesCreep").set(UnitType.Unused_Terran_Marker, false);
        fields.get("producesLarva").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isMineralField").set(UnitType.Unused_Terran_Marker, false);
        fields.get("isCritter").set(UnitType.Unused_Terran_Marker, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Terran_Marker, false);
        fields.get("researchesWhat").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unused_Protoss_Marker() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("race").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("whatBuilds").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("requiredUnits").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("cloakingTech").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("abilities").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("maxHitPoints").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("maxShields").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("maxEnergy").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("armor").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("mineralPrice").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("gasPrice").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("buildTime").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("supplyRequired").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("supplyProvided").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("spaceRequired").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("spaceProvided").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("buildScore").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("destroyScore").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("size").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("tileWidth").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("tileHeight").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("dimensionLeft").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("dimensionUp").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("dimensionRight").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("dimensionDown").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("width").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("height").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("seekRange").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("sightRange").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("groundWeapon").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("maxGroundHits").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("airWeapon").set(UnitType.Unused_Protoss_Marker, null);
        fields.get("maxAirHits").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("topSpeed").set(UnitType.Unused_Protoss_Marker, 0.0);
        fields.get("acceleration").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("haltDistance").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("turnRadius").set(UnitType.Unused_Protoss_Marker, 0);
        fields.get("canProduce").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("canAttack").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("canMove").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isFlyer").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("regeneratesHP").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isSpellcaster").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("hasPermanentCloak").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isInvincible").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isOrganic").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isMechanical").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isRobotic").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isDetector").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isResourceContainer").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isResourceDepot").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isRefinery").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isWorker").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("requiresPsi").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("requiresCreep").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isBurrowable").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isCloakable").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isBuilding").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isAddon").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isFlyingBuilding").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isNeutral").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isHero").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isPowerup").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isBeacon").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isFlagBeacon").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isSpecialBuilding").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isSpell").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("producesCreep").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("producesLarva").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isMineralField").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("isCritter").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("canBuildAddon").set(UnitType.Unused_Protoss_Marker, false);
        fields.get("researchesWhat").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Zerg_Beacon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Zerg_Beacon, 194);
        fields.get("race").set(UnitType.Special_Zerg_Beacon, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Zerg_Beacon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Zerg_Beacon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Zerg_Beacon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Zerg_Beacon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Zerg_Beacon, 100000);
        fields.get("maxShields").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("armor").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("mineralPrice").set(UnitType.Special_Zerg_Beacon, 250);
        fields.get("gasPrice").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("buildTime").set(UnitType.Special_Zerg_Beacon, 1);
        fields.get("supplyRequired").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Zerg_Beacon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("buildScore").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("destroyScore").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("size").set(UnitType.Special_Zerg_Beacon, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Zerg_Beacon, 3);
        fields.get("tileHeight").set(UnitType.Special_Zerg_Beacon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Zerg_Beacon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Zerg_Beacon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Zerg_Beacon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Zerg_Beacon, 31);
        fields.get("width").set(UnitType.Special_Zerg_Beacon, 96);
        fields.get("height").set(UnitType.Special_Zerg_Beacon, 64);
        fields.get("seekRange").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("sightRange").set(UnitType.Special_Zerg_Beacon, 256);
        fields.get("groundWeapon").set(UnitType.Special_Zerg_Beacon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("airWeapon").set(UnitType.Special_Zerg_Beacon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("topSpeed").set(UnitType.Special_Zerg_Beacon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("haltDistance").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("turnRadius").set(UnitType.Special_Zerg_Beacon, 0);
        fields.get("canProduce").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("canAttack").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("canMove").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isFlyer").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isSpellcaster").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isInvincible").set(UnitType.Special_Zerg_Beacon, true);
        fields.get("isOrganic").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isMechanical").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isRobotic").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isDetector").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isResourceContainer").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isRefinery").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isWorker").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("requiresPsi").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("requiresCreep").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isBurrowable").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isCloakable").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isBuilding").set(UnitType.Special_Zerg_Beacon, true);
        fields.get("isAddon").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isNeutral").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isHero").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isPowerup").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isBeacon").set(UnitType.Special_Zerg_Beacon, true);
        fields.get("isFlagBeacon").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Zerg_Beacon, true);
        fields.get("isSpell").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("producesCreep").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("producesLarva").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isMineralField").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("isCritter").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Zerg_Beacon, false);
        fields.get("researchesWhat").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Terran_Beacon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Terran_Beacon, 195);
        fields.get("race").set(UnitType.Special_Terran_Beacon, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Special_Terran_Beacon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Terran_Beacon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Terran_Beacon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Terran_Beacon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Terran_Beacon, 100000);
        fields.get("maxShields").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("armor").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("mineralPrice").set(UnitType.Special_Terran_Beacon, 50);
        fields.get("gasPrice").set(UnitType.Special_Terran_Beacon, 50);
        fields.get("buildTime").set(UnitType.Special_Terran_Beacon, 1);
        fields.get("supplyRequired").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Terran_Beacon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("buildScore").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("destroyScore").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("size").set(UnitType.Special_Terran_Beacon, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Terran_Beacon, 3);
        fields.get("tileHeight").set(UnitType.Special_Terran_Beacon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Terran_Beacon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Terran_Beacon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Terran_Beacon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Terran_Beacon, 31);
        fields.get("width").set(UnitType.Special_Terran_Beacon, 96);
        fields.get("height").set(UnitType.Special_Terran_Beacon, 64);
        fields.get("seekRange").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("sightRange").set(UnitType.Special_Terran_Beacon, 256);
        fields.get("groundWeapon").set(UnitType.Special_Terran_Beacon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("airWeapon").set(UnitType.Special_Terran_Beacon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("topSpeed").set(UnitType.Special_Terran_Beacon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("haltDistance").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("turnRadius").set(UnitType.Special_Terran_Beacon, 0);
        fields.get("canProduce").set(UnitType.Special_Terran_Beacon, false);
        fields.get("canAttack").set(UnitType.Special_Terran_Beacon, false);
        fields.get("canMove").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isFlyer").set(UnitType.Special_Terran_Beacon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isSpellcaster").set(UnitType.Special_Terran_Beacon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isInvincible").set(UnitType.Special_Terran_Beacon, true);
        fields.get("isOrganic").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isMechanical").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isRobotic").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isDetector").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isResourceContainer").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isRefinery").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isWorker").set(UnitType.Special_Terran_Beacon, false);
        fields.get("requiresPsi").set(UnitType.Special_Terran_Beacon, false);
        fields.get("requiresCreep").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isBurrowable").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isCloakable").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isBuilding").set(UnitType.Special_Terran_Beacon, true);
        fields.get("isAddon").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isNeutral").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isHero").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isPowerup").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isBeacon").set(UnitType.Special_Terran_Beacon, true);
        fields.get("isFlagBeacon").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Terran_Beacon, true);
        fields.get("isSpell").set(UnitType.Special_Terran_Beacon, false);
        fields.get("producesCreep").set(UnitType.Special_Terran_Beacon, false);
        fields.get("producesLarva").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isMineralField").set(UnitType.Special_Terran_Beacon, false);
        fields.get("isCritter").set(UnitType.Special_Terran_Beacon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Terran_Beacon, false);
        fields.get("researchesWhat").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Protoss_Beacon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Protoss_Beacon, 196);
        fields.get("race").set(UnitType.Special_Protoss_Beacon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Special_Protoss_Beacon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Protoss_Beacon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Protoss_Beacon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Protoss_Beacon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Protoss_Beacon, 100000);
        fields.get("maxShields").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("armor").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("mineralPrice").set(UnitType.Special_Protoss_Beacon, 100);
        fields.get("gasPrice").set(UnitType.Special_Protoss_Beacon, 100);
        fields.get("buildTime").set(UnitType.Special_Protoss_Beacon, 1);
        fields.get("supplyRequired").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Protoss_Beacon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("buildScore").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("destroyScore").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("size").set(UnitType.Special_Protoss_Beacon, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Protoss_Beacon, 3);
        fields.get("tileHeight").set(UnitType.Special_Protoss_Beacon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Protoss_Beacon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Protoss_Beacon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Protoss_Beacon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Protoss_Beacon, 31);
        fields.get("width").set(UnitType.Special_Protoss_Beacon, 96);
        fields.get("height").set(UnitType.Special_Protoss_Beacon, 64);
        fields.get("seekRange").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("sightRange").set(UnitType.Special_Protoss_Beacon, 256);
        fields.get("groundWeapon").set(UnitType.Special_Protoss_Beacon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("airWeapon").set(UnitType.Special_Protoss_Beacon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("topSpeed").set(UnitType.Special_Protoss_Beacon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("haltDistance").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("turnRadius").set(UnitType.Special_Protoss_Beacon, 0);
        fields.get("canProduce").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("canAttack").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("canMove").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isFlyer").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isSpellcaster").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isInvincible").set(UnitType.Special_Protoss_Beacon, true);
        fields.get("isOrganic").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isMechanical").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isRobotic").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isDetector").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isResourceContainer").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isRefinery").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isWorker").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("requiresPsi").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("requiresCreep").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isBurrowable").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isCloakable").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isBuilding").set(UnitType.Special_Protoss_Beacon, true);
        fields.get("isAddon").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isNeutral").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isHero").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isPowerup").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isBeacon").set(UnitType.Special_Protoss_Beacon, true);
        fields.get("isFlagBeacon").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Protoss_Beacon, true);
        fields.get("isSpell").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("producesCreep").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("producesLarva").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isMineralField").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("isCritter").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Protoss_Beacon, false);
        fields.get("researchesWhat").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Zerg_Flag_Beacon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Zerg_Flag_Beacon, 197);
        fields.get("race").set(UnitType.Special_Zerg_Flag_Beacon, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Zerg_Flag_Beacon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Zerg_Flag_Beacon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Zerg_Flag_Beacon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Zerg_Flag_Beacon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Zerg_Flag_Beacon, 100000);
        fields.get("maxShields").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("armor").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("mineralPrice").set(UnitType.Special_Zerg_Flag_Beacon, 250);
        fields.get("gasPrice").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("buildTime").set(UnitType.Special_Zerg_Flag_Beacon, 1);
        fields.get("supplyRequired").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Zerg_Flag_Beacon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("buildScore").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("destroyScore").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("size").set(UnitType.Special_Zerg_Flag_Beacon, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Zerg_Flag_Beacon, 3);
        fields.get("tileHeight").set(UnitType.Special_Zerg_Flag_Beacon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Zerg_Flag_Beacon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Zerg_Flag_Beacon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Zerg_Flag_Beacon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Zerg_Flag_Beacon, 31);
        fields.get("width").set(UnitType.Special_Zerg_Flag_Beacon, 96);
        fields.get("height").set(UnitType.Special_Zerg_Flag_Beacon, 64);
        fields.get("seekRange").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("sightRange").set(UnitType.Special_Zerg_Flag_Beacon, 256);
        fields.get("groundWeapon").set(UnitType.Special_Zerg_Flag_Beacon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("airWeapon").set(UnitType.Special_Zerg_Flag_Beacon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("topSpeed").set(UnitType.Special_Zerg_Flag_Beacon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("haltDistance").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("turnRadius").set(UnitType.Special_Zerg_Flag_Beacon, 0);
        fields.get("canProduce").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("canAttack").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("canMove").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isFlyer").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isSpellcaster").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isInvincible").set(UnitType.Special_Zerg_Flag_Beacon, true);
        fields.get("isOrganic").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isMechanical").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isRobotic").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isDetector").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isResourceContainer").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isRefinery").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isWorker").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("requiresPsi").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("requiresCreep").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isBurrowable").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isCloakable").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isBuilding").set(UnitType.Special_Zerg_Flag_Beacon, true);
        fields.get("isAddon").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isNeutral").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isHero").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isPowerup").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isBeacon").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Zerg_Flag_Beacon, true);
        fields.get("isSpecialBuilding").set(UnitType.Special_Zerg_Flag_Beacon, true);
        fields.get("isSpell").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("producesCreep").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("producesLarva").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isMineralField").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("isCritter").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Zerg_Flag_Beacon, false);
        fields.get("researchesWhat").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Terran_Flag_Beacon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Terran_Flag_Beacon, 198);
        fields.get("race").set(UnitType.Special_Terran_Flag_Beacon, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Special_Terran_Flag_Beacon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Terran_Flag_Beacon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Terran_Flag_Beacon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Terran_Flag_Beacon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Terran_Flag_Beacon, 100000);
        fields.get("maxShields").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("armor").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("mineralPrice").set(UnitType.Special_Terran_Flag_Beacon, 50);
        fields.get("gasPrice").set(UnitType.Special_Terran_Flag_Beacon, 50);
        fields.get("buildTime").set(UnitType.Special_Terran_Flag_Beacon, 1);
        fields.get("supplyRequired").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Terran_Flag_Beacon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("buildScore").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("destroyScore").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("size").set(UnitType.Special_Terran_Flag_Beacon, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Terran_Flag_Beacon, 3);
        fields.get("tileHeight").set(UnitType.Special_Terran_Flag_Beacon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Terran_Flag_Beacon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Terran_Flag_Beacon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Terran_Flag_Beacon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Terran_Flag_Beacon, 31);
        fields.get("width").set(UnitType.Special_Terran_Flag_Beacon, 96);
        fields.get("height").set(UnitType.Special_Terran_Flag_Beacon, 64);
        fields.get("seekRange").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("sightRange").set(UnitType.Special_Terran_Flag_Beacon, 256);
        fields.get("groundWeapon").set(UnitType.Special_Terran_Flag_Beacon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("airWeapon").set(UnitType.Special_Terran_Flag_Beacon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("topSpeed").set(UnitType.Special_Terran_Flag_Beacon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("haltDistance").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("turnRadius").set(UnitType.Special_Terran_Flag_Beacon, 0);
        fields.get("canProduce").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("canAttack").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("canMove").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isFlyer").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isSpellcaster").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isInvincible").set(UnitType.Special_Terran_Flag_Beacon, true);
        fields.get("isOrganic").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isMechanical").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isRobotic").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isDetector").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isResourceContainer").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isRefinery").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isWorker").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("requiresPsi").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("requiresCreep").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isBurrowable").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isCloakable").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isBuilding").set(UnitType.Special_Terran_Flag_Beacon, true);
        fields.get("isAddon").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isNeutral").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isHero").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isPowerup").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isBeacon").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Terran_Flag_Beacon, true);
        fields.get("isSpecialBuilding").set(UnitType.Special_Terran_Flag_Beacon, true);
        fields.get("isSpell").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("producesCreep").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("producesLarva").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isMineralField").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("isCritter").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Terran_Flag_Beacon, false);
        fields.get("researchesWhat").set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Protoss_Flag_Beacon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Protoss_Flag_Beacon, 199);
        fields.get("race").set(UnitType.Special_Protoss_Flag_Beacon, Race.Protoss);
        fields.get("whatBuilds").set(UnitType.Special_Protoss_Flag_Beacon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Protoss_Flag_Beacon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Protoss_Flag_Beacon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Protoss_Flag_Beacon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Protoss_Flag_Beacon, 100000);
        fields.get("maxShields").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("armor").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("mineralPrice").set(UnitType.Special_Protoss_Flag_Beacon, 100);
        fields.get("gasPrice").set(UnitType.Special_Protoss_Flag_Beacon, 100);
        fields.get("buildTime").set(UnitType.Special_Protoss_Flag_Beacon, 1);
        fields.get("supplyRequired").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Protoss_Flag_Beacon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("buildScore").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("destroyScore").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("size").set(UnitType.Special_Protoss_Flag_Beacon, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Protoss_Flag_Beacon, 3);
        fields.get("tileHeight").set(UnitType.Special_Protoss_Flag_Beacon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Protoss_Flag_Beacon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Protoss_Flag_Beacon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Protoss_Flag_Beacon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Protoss_Flag_Beacon, 31);
        fields.get("width").set(UnitType.Special_Protoss_Flag_Beacon, 96);
        fields.get("height").set(UnitType.Special_Protoss_Flag_Beacon, 64);
        fields.get("seekRange").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("sightRange").set(UnitType.Special_Protoss_Flag_Beacon, 256);
        fields.get("groundWeapon").set(UnitType.Special_Protoss_Flag_Beacon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("airWeapon").set(UnitType.Special_Protoss_Flag_Beacon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("topSpeed").set(UnitType.Special_Protoss_Flag_Beacon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("haltDistance").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("turnRadius").set(UnitType.Special_Protoss_Flag_Beacon, 0);
        fields.get("canProduce").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("canAttack").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("canMove").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isFlyer").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isSpellcaster").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isInvincible").set(UnitType.Special_Protoss_Flag_Beacon, true);
        fields.get("isOrganic").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isMechanical").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isRobotic").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isDetector").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isResourceContainer").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isRefinery").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isWorker").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("requiresPsi").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("requiresCreep").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isBurrowable").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isCloakable").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isBuilding").set(UnitType.Special_Protoss_Flag_Beacon, true);
        fields.get("isAddon").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isNeutral").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isHero").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isPowerup").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isBeacon").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Protoss_Flag_Beacon, true);
        fields.get("isSpecialBuilding").set(UnitType.Special_Protoss_Flag_Beacon, true);
        fields.get("isSpell").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("producesCreep").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("producesLarva").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isMineralField").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("isCritter").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Protoss_Flag_Beacon, false);
        fields.get("researchesWhat").set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Power_Generator() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Power_Generator, 200);
        fields.get("race").set(UnitType.Special_Power_Generator, Race.Terran);
        fields.get("whatBuilds").set(UnitType.Special_Power_Generator, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Power_Generator, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Power_Generator, TechType.None);
        fields.get("abilities").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Power_Generator, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Power_Generator, 800);
        fields.get("maxShields").set(UnitType.Special_Power_Generator, 0);
        fields.get("maxEnergy").set(UnitType.Special_Power_Generator, 0);
        fields.get("armor").set(UnitType.Special_Power_Generator, 1);
        fields.get("mineralPrice").set(UnitType.Special_Power_Generator, 200);
        fields.get("gasPrice").set(UnitType.Special_Power_Generator, 50);
        fields.get("buildTime").set(UnitType.Special_Power_Generator, 2400);
        fields.get("supplyRequired").set(UnitType.Special_Power_Generator, 0);
        fields.get("supplyProvided").set(UnitType.Special_Power_Generator, 0);
        fields.get("spaceRequired").set(UnitType.Special_Power_Generator, 255);
        fields.get("spaceProvided").set(UnitType.Special_Power_Generator, 0);
        fields.get("buildScore").set(UnitType.Special_Power_Generator, 0);
        fields.get("destroyScore").set(UnitType.Special_Power_Generator, 600);
        fields.get("size").set(UnitType.Special_Power_Generator, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Power_Generator, 4);
        fields.get("tileHeight").set(UnitType.Special_Power_Generator, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Power_Generator, 56);
        fields.get("dimensionUp").set(UnitType.Special_Power_Generator, 28);
        fields.get("dimensionRight").set(UnitType.Special_Power_Generator, 63);
        fields.get("dimensionDown").set(UnitType.Special_Power_Generator, 43);
        fields.get("width").set(UnitType.Special_Power_Generator, 120);
        fields.get("height").set(UnitType.Special_Power_Generator, 72);
        fields.get("seekRange").set(UnitType.Special_Power_Generator, 0);
        fields.get("sightRange").set(UnitType.Special_Power_Generator, 256);
        fields.get("groundWeapon").set(UnitType.Special_Power_Generator, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Power_Generator, 0);
        fields.get("airWeapon").set(UnitType.Special_Power_Generator, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Power_Generator, 0);
        fields.get("topSpeed").set(UnitType.Special_Power_Generator, 0.0);
        fields.get("acceleration").set(UnitType.Special_Power_Generator, 0);
        fields.get("haltDistance").set(UnitType.Special_Power_Generator, 0);
        fields.get("turnRadius").set(UnitType.Special_Power_Generator, 0);
        fields.get("canProduce").set(UnitType.Special_Power_Generator, false);
        fields.get("canAttack").set(UnitType.Special_Power_Generator, false);
        fields.get("canMove").set(UnitType.Special_Power_Generator, false);
        fields.get("isFlyer").set(UnitType.Special_Power_Generator, false);
        fields.get("regeneratesHP").set(UnitType.Special_Power_Generator, false);
        fields.get("isSpellcaster").set(UnitType.Special_Power_Generator, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Power_Generator, false);
        fields.get("isInvincible").set(UnitType.Special_Power_Generator, false);
        fields.get("isOrganic").set(UnitType.Special_Power_Generator, false);
        fields.get("isMechanical").set(UnitType.Special_Power_Generator, true);
        fields.get("isRobotic").set(UnitType.Special_Power_Generator, false);
        fields.get("isDetector").set(UnitType.Special_Power_Generator, false);
        fields.get("isResourceContainer").set(UnitType.Special_Power_Generator, false);
        fields.get("isResourceDepot").set(UnitType.Special_Power_Generator, false);
        fields.get("isRefinery").set(UnitType.Special_Power_Generator, false);
        fields.get("isWorker").set(UnitType.Special_Power_Generator, false);
        fields.get("requiresPsi").set(UnitType.Special_Power_Generator, false);
        fields.get("requiresCreep").set(UnitType.Special_Power_Generator, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Power_Generator, false);
        fields.get("isBurrowable").set(UnitType.Special_Power_Generator, false);
        fields.get("isCloakable").set(UnitType.Special_Power_Generator, false);
        fields.get("isBuilding").set(UnitType.Special_Power_Generator, true);
        fields.get("isAddon").set(UnitType.Special_Power_Generator, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Power_Generator, false);
        fields.get("isNeutral").set(UnitType.Special_Power_Generator, false);
        fields.get("isHero").set(UnitType.Special_Power_Generator, false);
        fields.get("isPowerup").set(UnitType.Special_Power_Generator, false);
        fields.get("isBeacon").set(UnitType.Special_Power_Generator, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Power_Generator, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Power_Generator, true);
        fields.get("isSpell").set(UnitType.Special_Power_Generator, false);
        fields.get("producesCreep").set(UnitType.Special_Power_Generator, false);
        fields.get("producesLarva").set(UnitType.Special_Power_Generator, false);
        fields.get("isMineralField").set(UnitType.Special_Power_Generator, false);
        fields.get("isCritter").set(UnitType.Special_Power_Generator, false);
        fields.get("canBuildAddon").set(UnitType.Special_Power_Generator, false);
        fields.get("researchesWhat").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Overmind_Cocoon() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Overmind_Cocoon, 201);
        fields.get("race").set(UnitType.Special_Overmind_Cocoon, Race.Zerg);
        fields.get("whatBuilds").set(UnitType.Special_Overmind_Cocoon, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Overmind_Cocoon, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Overmind_Cocoon, TechType.None);
        fields.get("abilities").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Overmind_Cocoon, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Overmind_Cocoon, 2500);
        fields.get("maxShields").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("maxEnergy").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("armor").set(UnitType.Special_Overmind_Cocoon, 1);
        fields.get("mineralPrice").set(UnitType.Special_Overmind_Cocoon, 1000);
        fields.get("gasPrice").set(UnitType.Special_Overmind_Cocoon, 500);
        fields.get("buildTime").set(UnitType.Special_Overmind_Cocoon, 2400);
        fields.get("supplyRequired").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("supplyProvided").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("spaceRequired").set(UnitType.Special_Overmind_Cocoon, 255);
        fields.get("spaceProvided").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("buildScore").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("destroyScore").set(UnitType.Special_Overmind_Cocoon, 4000);
        fields.get("size").set(UnitType.Special_Overmind_Cocoon, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Overmind_Cocoon, 3);
        fields.get("tileHeight").set(UnitType.Special_Overmind_Cocoon, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Overmind_Cocoon, 48);
        fields.get("dimensionUp").set(UnitType.Special_Overmind_Cocoon, 32);
        fields.get("dimensionRight").set(UnitType.Special_Overmind_Cocoon, 47);
        fields.get("dimensionDown").set(UnitType.Special_Overmind_Cocoon, 31);
        fields.get("width").set(UnitType.Special_Overmind_Cocoon, 96);
        fields.get("height").set(UnitType.Special_Overmind_Cocoon, 64);
        fields.get("seekRange").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("sightRange").set(UnitType.Special_Overmind_Cocoon, 320);
        fields.get("groundWeapon").set(UnitType.Special_Overmind_Cocoon, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("airWeapon").set(UnitType.Special_Overmind_Cocoon, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("topSpeed").set(UnitType.Special_Overmind_Cocoon, 0.0);
        fields.get("acceleration").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("haltDistance").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("turnRadius").set(UnitType.Special_Overmind_Cocoon, 0);
        fields.get("canProduce").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("canAttack").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("canMove").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isFlyer").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("regeneratesHP").set(UnitType.Special_Overmind_Cocoon, true);
        fields.get("isSpellcaster").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isInvincible").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isOrganic").set(UnitType.Special_Overmind_Cocoon, true);
        fields.get("isMechanical").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isRobotic").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isDetector").set(UnitType.Special_Overmind_Cocoon, true);
        fields.get("isResourceContainer").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isResourceDepot").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isRefinery").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isWorker").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("requiresPsi").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("requiresCreep").set(UnitType.Special_Overmind_Cocoon, true);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isBurrowable").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isCloakable").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isBuilding").set(UnitType.Special_Overmind_Cocoon, true);
        fields.get("isAddon").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isNeutral").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isHero").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isPowerup").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isBeacon").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Overmind_Cocoon, true);
        fields.get("isSpell").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("producesCreep").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("producesLarva").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isMineralField").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("isCritter").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("canBuildAddon").set(UnitType.Special_Overmind_Cocoon, false);
        fields.get("researchesWhat").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Spell_Dark_Swarm() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Spell_Dark_Swarm, 202);
        fields.get("race").set(UnitType.Spell_Dark_Swarm, Race.None);
        fields.get("whatBuilds").set(UnitType.Spell_Dark_Swarm, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Spell_Dark_Swarm, TechType.None);
        fields.get("cloakingTech").set(UnitType.Spell_Dark_Swarm, TechType.None);
        fields.get("abilities").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Spell_Dark_Swarm, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Spell_Dark_Swarm, 800);
        fields.get("maxShields").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("maxEnergy").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("armor").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("mineralPrice").set(UnitType.Spell_Dark_Swarm, 250);
        fields.get("gasPrice").set(UnitType.Spell_Dark_Swarm, 200);
        fields.get("buildTime").set(UnitType.Spell_Dark_Swarm, 2400);
        fields.get("supplyRequired").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("supplyProvided").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("spaceRequired").set(UnitType.Spell_Dark_Swarm, 255);
        fields.get("spaceProvided").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("buildScore").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("destroyScore").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("size").set(UnitType.Spell_Dark_Swarm, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Spell_Dark_Swarm, 5);
        fields.get("tileHeight").set(UnitType.Spell_Dark_Swarm, 5);
        fields.get("dimensionLeft").set(UnitType.Spell_Dark_Swarm, 80);
        fields.get("dimensionUp").set(UnitType.Spell_Dark_Swarm, 80);
        fields.get("dimensionRight").set(UnitType.Spell_Dark_Swarm, 79);
        fields.get("dimensionDown").set(UnitType.Spell_Dark_Swarm, 79);
        fields.get("width").set(UnitType.Spell_Dark_Swarm, 160);
        fields.get("height").set(UnitType.Spell_Dark_Swarm, 160);
        fields.get("seekRange").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("sightRange").set(UnitType.Spell_Dark_Swarm, 256);
        fields.get("groundWeapon").set(UnitType.Spell_Dark_Swarm, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("airWeapon").set(UnitType.Spell_Dark_Swarm, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("topSpeed").set(UnitType.Spell_Dark_Swarm, 0.0);
        fields.get("acceleration").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("haltDistance").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("turnRadius").set(UnitType.Spell_Dark_Swarm, 0);
        fields.get("canProduce").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("canAttack").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("canMove").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isFlyer").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("regeneratesHP").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isSpellcaster").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("hasPermanentCloak").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isInvincible").set(UnitType.Spell_Dark_Swarm, true);
        fields.get("isOrganic").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isMechanical").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isRobotic").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isDetector").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isResourceContainer").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isResourceDepot").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isRefinery").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isWorker").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("requiresPsi").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("requiresCreep").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isBurrowable").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isCloakable").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isBuilding").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isAddon").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isFlyingBuilding").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isNeutral").set(UnitType.Spell_Dark_Swarm, true);
        fields.get("isHero").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isPowerup").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isBeacon").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isFlagBeacon").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isSpecialBuilding").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isSpell").set(UnitType.Spell_Dark_Swarm, true);
        fields.get("producesCreep").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("producesLarva").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isMineralField").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("isCritter").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("canBuildAddon").set(UnitType.Spell_Dark_Swarm, false);
        fields.get("researchesWhat").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Floor_Missile_Trap() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Floor_Missile_Trap, 203);
        fields.get("race").set(UnitType.Special_Floor_Missile_Trap, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Floor_Missile_Trap, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Floor_Missile_Trap, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Floor_Missile_Trap, TechType.None);
        fields.get("abilities").set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Special_Floor_Missile_Trap, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Floor_Missile_Trap, 50);
        fields.get("maxShields").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("maxEnergy").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("armor").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("mineralPrice").set(UnitType.Special_Floor_Missile_Trap, 1);
        fields.get("gasPrice").set(UnitType.Special_Floor_Missile_Trap, 1);
        fields.get("buildTime").set(UnitType.Special_Floor_Missile_Trap, 1);
        fields.get("supplyRequired").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("supplyProvided").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("spaceRequired").set(UnitType.Special_Floor_Missile_Trap, 255);
        fields.get("spaceProvided").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("buildScore").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("destroyScore").set(UnitType.Special_Floor_Missile_Trap, 100);
        fields.get("size").set(UnitType.Special_Floor_Missile_Trap, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Floor_Missile_Trap, 2);
        fields.get("tileHeight").set(UnitType.Special_Floor_Missile_Trap, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Floor_Missile_Trap, 32);
        fields.get("dimensionUp").set(UnitType.Special_Floor_Missile_Trap, 32);
        fields.get("dimensionRight").set(UnitType.Special_Floor_Missile_Trap, 31);
        fields.get("dimensionDown").set(UnitType.Special_Floor_Missile_Trap, 31);
        fields.get("width").set(UnitType.Special_Floor_Missile_Trap, 64);
        fields.get("height").set(UnitType.Special_Floor_Missile_Trap, 64);
        fields.get("seekRange").set(UnitType.Special_Floor_Missile_Trap, 160);
        fields.get("sightRange").set(UnitType.Special_Floor_Missile_Trap, 192);
        fields.get("groundWeapon").set(UnitType.Special_Floor_Missile_Trap, WeaponType.Hellfire_Missile_Pack_Floor_Trap);
        fields.get("maxGroundHits").set(UnitType.Special_Floor_Missile_Trap, 1);
        fields.get("airWeapon").set(UnitType.Special_Floor_Missile_Trap, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("topSpeed").set(UnitType.Special_Floor_Missile_Trap, 0.0);
        fields.get("acceleration").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("haltDistance").set(UnitType.Special_Floor_Missile_Trap, 0);
        fields.get("turnRadius").set(UnitType.Special_Floor_Missile_Trap, 20);
        fields.get("canProduce").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("canAttack").set(UnitType.Special_Floor_Missile_Trap, true);
        fields.get("canMove").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isFlyer").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("regeneratesHP").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isSpellcaster").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isInvincible").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isOrganic").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isMechanical").set(UnitType.Special_Floor_Missile_Trap, true);
        fields.get("isRobotic").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isDetector").set(UnitType.Special_Floor_Missile_Trap, true);
        fields.get("isResourceContainer").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isResourceDepot").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isRefinery").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isWorker").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("requiresPsi").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("requiresCreep").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isBurrowable").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isCloakable").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isBuilding").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isAddon").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isNeutral").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isHero").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isPowerup").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isBeacon").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isSpell").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("producesCreep").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("producesLarva").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isMineralField").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("isCritter").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("canBuildAddon").set(UnitType.Special_Floor_Missile_Trap, false);
        fields.get("researchesWhat").set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Floor_Hatch() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Floor_Hatch, 204);
        fields.get("race").set(UnitType.Special_Floor_Hatch, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Floor_Hatch, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Floor_Hatch, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Floor_Hatch, TechType.None);
        fields.get("abilities").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Floor_Hatch, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Floor_Hatch, 100000);
        fields.get("maxShields").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("maxEnergy").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("armor").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("mineralPrice").set(UnitType.Special_Floor_Hatch, 1);
        fields.get("gasPrice").set(UnitType.Special_Floor_Hatch, 1);
        fields.get("buildTime").set(UnitType.Special_Floor_Hatch, 1);
        fields.get("supplyRequired").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("supplyProvided").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("spaceRequired").set(UnitType.Special_Floor_Hatch, 255);
        fields.get("spaceProvided").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("buildScore").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("destroyScore").set(UnitType.Special_Floor_Hatch, 10);
        fields.get("size").set(UnitType.Special_Floor_Hatch, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Floor_Hatch, 8);
        fields.get("tileHeight").set(UnitType.Special_Floor_Hatch, 4);
        fields.get("dimensionLeft").set(UnitType.Special_Floor_Hatch, 128);
        fields.get("dimensionUp").set(UnitType.Special_Floor_Hatch, 64);
        fields.get("dimensionRight").set(UnitType.Special_Floor_Hatch, 127);
        fields.get("dimensionDown").set(UnitType.Special_Floor_Hatch, 63);
        fields.get("width").set(UnitType.Special_Floor_Hatch, 256);
        fields.get("height").set(UnitType.Special_Floor_Hatch, 128);
        fields.get("seekRange").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("sightRange").set(UnitType.Special_Floor_Hatch, 224);
        fields.get("groundWeapon").set(UnitType.Special_Floor_Hatch, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("airWeapon").set(UnitType.Special_Floor_Hatch, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("topSpeed").set(UnitType.Special_Floor_Hatch, 0.0);
        fields.get("acceleration").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("haltDistance").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("turnRadius").set(UnitType.Special_Floor_Hatch, 0);
        fields.get("canProduce").set(UnitType.Special_Floor_Hatch, false);
        fields.get("canAttack").set(UnitType.Special_Floor_Hatch, false);
        fields.get("canMove").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isFlyer").set(UnitType.Special_Floor_Hatch, false);
        fields.get("regeneratesHP").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isSpellcaster").set(UnitType.Special_Floor_Hatch, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isInvincible").set(UnitType.Special_Floor_Hatch, true);
        fields.get("isOrganic").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isMechanical").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isRobotic").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isDetector").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isResourceContainer").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isResourceDepot").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isRefinery").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isWorker").set(UnitType.Special_Floor_Hatch, false);
        fields.get("requiresPsi").set(UnitType.Special_Floor_Hatch, false);
        fields.get("requiresCreep").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isBurrowable").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isCloakable").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isBuilding").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isAddon").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isNeutral").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isHero").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isPowerup").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isBeacon").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isSpell").set(UnitType.Special_Floor_Hatch, false);
        fields.get("producesCreep").set(UnitType.Special_Floor_Hatch, false);
        fields.get("producesLarva").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isMineralField").set(UnitType.Special_Floor_Hatch, false);
        fields.get("isCritter").set(UnitType.Special_Floor_Hatch, false);
        fields.get("canBuildAddon").set(UnitType.Special_Floor_Hatch, false);
        fields.get("researchesWhat").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Upper_Level_Door() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Upper_Level_Door, 205);
        fields.get("race").set(UnitType.Special_Upper_Level_Door, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Upper_Level_Door, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Upper_Level_Door, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Upper_Level_Door, TechType.None);
        fields.get("abilities").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Upper_Level_Door, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Upper_Level_Door, 100000);
        fields.get("maxShields").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("maxEnergy").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("armor").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("mineralPrice").set(UnitType.Special_Upper_Level_Door, 1);
        fields.get("gasPrice").set(UnitType.Special_Upper_Level_Door, 1);
        fields.get("buildTime").set(UnitType.Special_Upper_Level_Door, 1);
        fields.get("supplyRequired").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("supplyProvided").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("spaceRequired").set(UnitType.Special_Upper_Level_Door, 255);
        fields.get("spaceProvided").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("buildScore").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("destroyScore").set(UnitType.Special_Upper_Level_Door, 10);
        fields.get("size").set(UnitType.Special_Upper_Level_Door, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Upper_Level_Door, 3);
        fields.get("tileHeight").set(UnitType.Special_Upper_Level_Door, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Upper_Level_Door, 25);
        fields.get("dimensionUp").set(UnitType.Special_Upper_Level_Door, 17);
        fields.get("dimensionRight").set(UnitType.Special_Upper_Level_Door, 44);
        fields.get("dimensionDown").set(UnitType.Special_Upper_Level_Door, 20);
        fields.get("width").set(UnitType.Special_Upper_Level_Door, 70);
        fields.get("height").set(UnitType.Special_Upper_Level_Door, 38);
        fields.get("seekRange").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("sightRange").set(UnitType.Special_Upper_Level_Door, 32);
        fields.get("groundWeapon").set(UnitType.Special_Upper_Level_Door, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("airWeapon").set(UnitType.Special_Upper_Level_Door, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("topSpeed").set(UnitType.Special_Upper_Level_Door, 0.0);
        fields.get("acceleration").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("haltDistance").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("turnRadius").set(UnitType.Special_Upper_Level_Door, 0);
        fields.get("canProduce").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("canAttack").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("canMove").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isFlyer").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("regeneratesHP").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isSpellcaster").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isInvincible").set(UnitType.Special_Upper_Level_Door, true);
        fields.get("isOrganic").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isMechanical").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isRobotic").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isDetector").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isResourceContainer").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isResourceDepot").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isRefinery").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isWorker").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("requiresPsi").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("requiresCreep").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isBurrowable").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isCloakable").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isBuilding").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isAddon").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isNeutral").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isHero").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isPowerup").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isBeacon").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isSpell").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("producesCreep").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("producesLarva").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isMineralField").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("isCritter").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("canBuildAddon").set(UnitType.Special_Upper_Level_Door, false);
        fields.get("researchesWhat").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Right_Upper_Level_Door() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Right_Upper_Level_Door, 206);
        fields.get("race").set(UnitType.Special_Right_Upper_Level_Door, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Right_Upper_Level_Door, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Right_Upper_Level_Door, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Right_Upper_Level_Door, TechType.None);
        fields.get("abilities").set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Right_Upper_Level_Door, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Right_Upper_Level_Door, 100000);
        fields.get("maxShields").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("maxEnergy").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("armor").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("mineralPrice").set(UnitType.Special_Right_Upper_Level_Door, 1);
        fields.get("gasPrice").set(UnitType.Special_Right_Upper_Level_Door, 1);
        fields.get("buildTime").set(UnitType.Special_Right_Upper_Level_Door, 1);
        fields.get("supplyRequired").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("supplyProvided").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("spaceRequired").set(UnitType.Special_Right_Upper_Level_Door, 255);
        fields.get("spaceProvided").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("buildScore").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("destroyScore").set(UnitType.Special_Right_Upper_Level_Door, 10);
        fields.get("size").set(UnitType.Special_Right_Upper_Level_Door, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Right_Upper_Level_Door, 3);
        fields.get("tileHeight").set(UnitType.Special_Right_Upper_Level_Door, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Right_Upper_Level_Door, 44);
        fields.get("dimensionUp").set(UnitType.Special_Right_Upper_Level_Door, 17);
        fields.get("dimensionRight").set(UnitType.Special_Right_Upper_Level_Door, 25);
        fields.get("dimensionDown").set(UnitType.Special_Right_Upper_Level_Door, 20);
        fields.get("width").set(UnitType.Special_Right_Upper_Level_Door, 70);
        fields.get("height").set(UnitType.Special_Right_Upper_Level_Door, 38);
        fields.get("seekRange").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("sightRange").set(UnitType.Special_Right_Upper_Level_Door, 32);
        fields.get("groundWeapon").set(UnitType.Special_Right_Upper_Level_Door, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("airWeapon").set(UnitType.Special_Right_Upper_Level_Door, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("topSpeed").set(UnitType.Special_Right_Upper_Level_Door, 0.0);
        fields.get("acceleration").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("haltDistance").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("turnRadius").set(UnitType.Special_Right_Upper_Level_Door, 0);
        fields.get("canProduce").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("canAttack").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("canMove").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isFlyer").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("regeneratesHP").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isSpellcaster").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isInvincible").set(UnitType.Special_Right_Upper_Level_Door, true);
        fields.get("isOrganic").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isMechanical").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isRobotic").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isDetector").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isResourceContainer").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isResourceDepot").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isRefinery").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isWorker").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("requiresPsi").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("requiresCreep").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isBurrowable").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isCloakable").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isBuilding").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isAddon").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isNeutral").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isHero").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isPowerup").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isBeacon").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isSpell").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("producesCreep").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("producesLarva").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isMineralField").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("isCritter").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("canBuildAddon").set(UnitType.Special_Right_Upper_Level_Door, false);
        fields.get("researchesWhat").set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Pit_Door() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Pit_Door, 207);
        fields.get("race").set(UnitType.Special_Pit_Door, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Pit_Door, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Pit_Door, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Pit_Door, TechType.None);
        fields.get("abilities").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Pit_Door, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Pit_Door, 100000);
        fields.get("maxShields").set(UnitType.Special_Pit_Door, 0);
        fields.get("maxEnergy").set(UnitType.Special_Pit_Door, 0);
        fields.get("armor").set(UnitType.Special_Pit_Door, 0);
        fields.get("mineralPrice").set(UnitType.Special_Pit_Door, 1);
        fields.get("gasPrice").set(UnitType.Special_Pit_Door, 1);
        fields.get("buildTime").set(UnitType.Special_Pit_Door, 1);
        fields.get("supplyRequired").set(UnitType.Special_Pit_Door, 0);
        fields.get("supplyProvided").set(UnitType.Special_Pit_Door, 0);
        fields.get("spaceRequired").set(UnitType.Special_Pit_Door, 255);
        fields.get("spaceProvided").set(UnitType.Special_Pit_Door, 0);
        fields.get("buildScore").set(UnitType.Special_Pit_Door, 0);
        fields.get("destroyScore").set(UnitType.Special_Pit_Door, 10);
        fields.get("size").set(UnitType.Special_Pit_Door, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Pit_Door, 3);
        fields.get("tileHeight").set(UnitType.Special_Pit_Door, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Pit_Door, 41);
        fields.get("dimensionUp").set(UnitType.Special_Pit_Door, 17);
        fields.get("dimensionRight").set(UnitType.Special_Pit_Door, 28);
        fields.get("dimensionDown").set(UnitType.Special_Pit_Door, 20);
        fields.get("width").set(UnitType.Special_Pit_Door, 70);
        fields.get("height").set(UnitType.Special_Pit_Door, 38);
        fields.get("seekRange").set(UnitType.Special_Pit_Door, 0);
        fields.get("sightRange").set(UnitType.Special_Pit_Door, 32);
        fields.get("groundWeapon").set(UnitType.Special_Pit_Door, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Pit_Door, 0);
        fields.get("airWeapon").set(UnitType.Special_Pit_Door, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Pit_Door, 0);
        fields.get("topSpeed").set(UnitType.Special_Pit_Door, 0.0);
        fields.get("acceleration").set(UnitType.Special_Pit_Door, 0);
        fields.get("haltDistance").set(UnitType.Special_Pit_Door, 0);
        fields.get("turnRadius").set(UnitType.Special_Pit_Door, 0);
        fields.get("canProduce").set(UnitType.Special_Pit_Door, false);
        fields.get("canAttack").set(UnitType.Special_Pit_Door, false);
        fields.get("canMove").set(UnitType.Special_Pit_Door, false);
        fields.get("isFlyer").set(UnitType.Special_Pit_Door, false);
        fields.get("regeneratesHP").set(UnitType.Special_Pit_Door, false);
        fields.get("isSpellcaster").set(UnitType.Special_Pit_Door, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Pit_Door, false);
        fields.get("isInvincible").set(UnitType.Special_Pit_Door, true);
        fields.get("isOrganic").set(UnitType.Special_Pit_Door, false);
        fields.get("isMechanical").set(UnitType.Special_Pit_Door, false);
        fields.get("isRobotic").set(UnitType.Special_Pit_Door, false);
        fields.get("isDetector").set(UnitType.Special_Pit_Door, false);
        fields.get("isResourceContainer").set(UnitType.Special_Pit_Door, false);
        fields.get("isResourceDepot").set(UnitType.Special_Pit_Door, false);
        fields.get("isRefinery").set(UnitType.Special_Pit_Door, false);
        fields.get("isWorker").set(UnitType.Special_Pit_Door, false);
        fields.get("requiresPsi").set(UnitType.Special_Pit_Door, false);
        fields.get("requiresCreep").set(UnitType.Special_Pit_Door, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Pit_Door, false);
        fields.get("isBurrowable").set(UnitType.Special_Pit_Door, false);
        fields.get("isCloakable").set(UnitType.Special_Pit_Door, false);
        fields.get("isBuilding").set(UnitType.Special_Pit_Door, false);
        fields.get("isAddon").set(UnitType.Special_Pit_Door, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Pit_Door, false);
        fields.get("isNeutral").set(UnitType.Special_Pit_Door, false);
        fields.get("isHero").set(UnitType.Special_Pit_Door, false);
        fields.get("isPowerup").set(UnitType.Special_Pit_Door, false);
        fields.get("isBeacon").set(UnitType.Special_Pit_Door, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Pit_Door, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Pit_Door, false);
        fields.get("isSpell").set(UnitType.Special_Pit_Door, false);
        fields.get("producesCreep").set(UnitType.Special_Pit_Door, false);
        fields.get("producesLarva").set(UnitType.Special_Pit_Door, false);
        fields.get("isMineralField").set(UnitType.Special_Pit_Door, false);
        fields.get("isCritter").set(UnitType.Special_Pit_Door, false);
        fields.get("canBuildAddon").set(UnitType.Special_Pit_Door, false);
        fields.get("researchesWhat").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Right_Pit_Door() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Right_Pit_Door, 208);
        fields.get("race").set(UnitType.Special_Right_Pit_Door, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Right_Pit_Door, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Right_Pit_Door, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Right_Pit_Door, TechType.None);
        fields.get("abilities").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Right_Pit_Door, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Right_Pit_Door, 100000);
        fields.get("maxShields").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("maxEnergy").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("armor").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("mineralPrice").set(UnitType.Special_Right_Pit_Door, 1);
        fields.get("gasPrice").set(UnitType.Special_Right_Pit_Door, 1);
        fields.get("buildTime").set(UnitType.Special_Right_Pit_Door, 1);
        fields.get("supplyRequired").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("supplyProvided").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("spaceRequired").set(UnitType.Special_Right_Pit_Door, 255);
        fields.get("spaceProvided").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("buildScore").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("destroyScore").set(UnitType.Special_Right_Pit_Door, 10);
        fields.get("size").set(UnitType.Special_Right_Pit_Door, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Right_Pit_Door, 3);
        fields.get("tileHeight").set(UnitType.Special_Right_Pit_Door, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Right_Pit_Door, 28);
        fields.get("dimensionUp").set(UnitType.Special_Right_Pit_Door, 17);
        fields.get("dimensionRight").set(UnitType.Special_Right_Pit_Door, 41);
        fields.get("dimensionDown").set(UnitType.Special_Right_Pit_Door, 20);
        fields.get("width").set(UnitType.Special_Right_Pit_Door, 70);
        fields.get("height").set(UnitType.Special_Right_Pit_Door, 38);
        fields.get("seekRange").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("sightRange").set(UnitType.Special_Right_Pit_Door, 32);
        fields.get("groundWeapon").set(UnitType.Special_Right_Pit_Door, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("airWeapon").set(UnitType.Special_Right_Pit_Door, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("topSpeed").set(UnitType.Special_Right_Pit_Door, 0.0);
        fields.get("acceleration").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("haltDistance").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("turnRadius").set(UnitType.Special_Right_Pit_Door, 0);
        fields.get("canProduce").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("canAttack").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("canMove").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isFlyer").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("regeneratesHP").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isSpellcaster").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isInvincible").set(UnitType.Special_Right_Pit_Door, true);
        fields.get("isOrganic").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isMechanical").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isRobotic").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isDetector").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isResourceContainer").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isResourceDepot").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isRefinery").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isWorker").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("requiresPsi").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("requiresCreep").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isBurrowable").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isCloakable").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isBuilding").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isAddon").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isNeutral").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isHero").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isPowerup").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isBeacon").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isSpell").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("producesCreep").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("producesLarva").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isMineralField").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("isCritter").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("canBuildAddon").set(UnitType.Special_Right_Pit_Door, false);
        fields.get("researchesWhat").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Floor_Gun_Trap() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Floor_Gun_Trap, 209);
        fields.get("race").set(UnitType.Special_Floor_Gun_Trap, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Floor_Gun_Trap, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Floor_Gun_Trap, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Floor_Gun_Trap, TechType.None);
        fields.get("abilities").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Special_Floor_Gun_Trap, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Floor_Gun_Trap, 50);
        fields.get("maxShields").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("maxEnergy").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("armor").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("mineralPrice").set(UnitType.Special_Floor_Gun_Trap, 1);
        fields.get("gasPrice").set(UnitType.Special_Floor_Gun_Trap, 1);
        fields.get("buildTime").set(UnitType.Special_Floor_Gun_Trap, 1);
        fields.get("supplyRequired").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("supplyProvided").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("spaceRequired").set(UnitType.Special_Floor_Gun_Trap, 255);
        fields.get("spaceProvided").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("buildScore").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("destroyScore").set(UnitType.Special_Floor_Gun_Trap, 100);
        fields.get("size").set(UnitType.Special_Floor_Gun_Trap, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Floor_Gun_Trap, 2);
        fields.get("tileHeight").set(UnitType.Special_Floor_Gun_Trap, 2);
        fields.get("dimensionLeft").set(UnitType.Special_Floor_Gun_Trap, 32);
        fields.get("dimensionUp").set(UnitType.Special_Floor_Gun_Trap, 32);
        fields.get("dimensionRight").set(UnitType.Special_Floor_Gun_Trap, 31);
        fields.get("dimensionDown").set(UnitType.Special_Floor_Gun_Trap, 31);
        fields.get("width").set(UnitType.Special_Floor_Gun_Trap, 64);
        fields.get("height").set(UnitType.Special_Floor_Gun_Trap, 64);
        fields.get("seekRange").set(UnitType.Special_Floor_Gun_Trap, 160);
        fields.get("sightRange").set(UnitType.Special_Floor_Gun_Trap, 192);
        fields.get("groundWeapon").set(UnitType.Special_Floor_Gun_Trap, WeaponType.Twin_Autocannons_Floor_Trap);
        fields.get("maxGroundHits").set(UnitType.Special_Floor_Gun_Trap, 1);
        fields.get("airWeapon").set(UnitType.Special_Floor_Gun_Trap, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("topSpeed").set(UnitType.Special_Floor_Gun_Trap, 0.0);
        fields.get("acceleration").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("haltDistance").set(UnitType.Special_Floor_Gun_Trap, 0);
        fields.get("turnRadius").set(UnitType.Special_Floor_Gun_Trap, 127);
        fields.get("canProduce").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("canAttack").set(UnitType.Special_Floor_Gun_Trap, true);
        fields.get("canMove").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isFlyer").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("regeneratesHP").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isSpellcaster").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isInvincible").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isOrganic").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isMechanical").set(UnitType.Special_Floor_Gun_Trap, true);
        fields.get("isRobotic").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isDetector").set(UnitType.Special_Floor_Gun_Trap, true);
        fields.get("isResourceContainer").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isResourceDepot").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isRefinery").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isWorker").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("requiresPsi").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("requiresCreep").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isBurrowable").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isCloakable").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isBuilding").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isAddon").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isNeutral").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isHero").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isPowerup").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isBeacon").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isSpell").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("producesCreep").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("producesLarva").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isMineralField").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("isCritter").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("canBuildAddon").set(UnitType.Special_Floor_Gun_Trap, false);
        fields.get("researchesWhat").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Wall_Missile_Trap() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Wall_Missile_Trap, 210);
        fields.get("race").set(UnitType.Special_Wall_Missile_Trap, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Wall_Missile_Trap, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Wall_Missile_Trap, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Wall_Missile_Trap, TechType.None);
        fields.get("abilities").set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Special_Wall_Missile_Trap, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Wall_Missile_Trap, 50);
        fields.get("maxShields").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("maxEnergy").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("armor").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("mineralPrice").set(UnitType.Special_Wall_Missile_Trap, 1);
        fields.get("gasPrice").set(UnitType.Special_Wall_Missile_Trap, 1);
        fields.get("buildTime").set(UnitType.Special_Wall_Missile_Trap, 1);
        fields.get("supplyRequired").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("supplyProvided").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("spaceRequired").set(UnitType.Special_Wall_Missile_Trap, 255);
        fields.get("spaceProvided").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("buildScore").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("destroyScore").set(UnitType.Special_Wall_Missile_Trap, 100);
        fields.get("size").set(UnitType.Special_Wall_Missile_Trap, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Wall_Missile_Trap, 1);
        fields.get("tileHeight").set(UnitType.Special_Wall_Missile_Trap, 1);
        fields.get("dimensionLeft").set(UnitType.Special_Wall_Missile_Trap, 16);
        fields.get("dimensionUp").set(UnitType.Special_Wall_Missile_Trap, 16);
        fields.get("dimensionRight").set(UnitType.Special_Wall_Missile_Trap, 15);
        fields.get("dimensionDown").set(UnitType.Special_Wall_Missile_Trap, 15);
        fields.get("width").set(UnitType.Special_Wall_Missile_Trap, 32);
        fields.get("height").set(UnitType.Special_Wall_Missile_Trap, 32);
        fields.get("seekRange").set(UnitType.Special_Wall_Missile_Trap, 160);
        fields.get("sightRange").set(UnitType.Special_Wall_Missile_Trap, 192);
        fields.get("groundWeapon").set(UnitType.Special_Wall_Missile_Trap, WeaponType.Hellfire_Missile_Pack_Wall_Trap);
        fields.get("maxGroundHits").set(UnitType.Special_Wall_Missile_Trap, 1);
        fields.get("airWeapon").set(UnitType.Special_Wall_Missile_Trap, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("topSpeed").set(UnitType.Special_Wall_Missile_Trap, 0.0);
        fields.get("acceleration").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("haltDistance").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("turnRadius").set(UnitType.Special_Wall_Missile_Trap, 0);
        fields.get("canProduce").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("canAttack").set(UnitType.Special_Wall_Missile_Trap, true);
        fields.get("canMove").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isFlyer").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("regeneratesHP").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isSpellcaster").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isInvincible").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isOrganic").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isMechanical").set(UnitType.Special_Wall_Missile_Trap, true);
        fields.get("isRobotic").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isDetector").set(UnitType.Special_Wall_Missile_Trap, true);
        fields.get("isResourceContainer").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isResourceDepot").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isRefinery").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isWorker").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("requiresPsi").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("requiresCreep").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isBurrowable").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isCloakable").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isBuilding").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isAddon").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isNeutral").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isHero").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isPowerup").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isBeacon").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isSpell").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("producesCreep").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("producesLarva").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isMineralField").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("isCritter").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("canBuildAddon").set(UnitType.Special_Wall_Missile_Trap, false);
        fields.get("researchesWhat").set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Wall_Flame_Trap() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Wall_Flame_Trap, 211);
        fields.get("race").set(UnitType.Special_Wall_Flame_Trap, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Wall_Flame_Trap, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Wall_Flame_Trap, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Wall_Flame_Trap, TechType.None);
        fields.get("abilities").set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Special_Wall_Flame_Trap, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Wall_Flame_Trap, 50);
        fields.get("maxShields").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("maxEnergy").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("armor").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("mineralPrice").set(UnitType.Special_Wall_Flame_Trap, 1);
        fields.get("gasPrice").set(UnitType.Special_Wall_Flame_Trap, 1);
        fields.get("buildTime").set(UnitType.Special_Wall_Flame_Trap, 1);
        fields.get("supplyRequired").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("supplyProvided").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("spaceRequired").set(UnitType.Special_Wall_Flame_Trap, 255);
        fields.get("spaceProvided").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("buildScore").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("destroyScore").set(UnitType.Special_Wall_Flame_Trap, 100);
        fields.get("size").set(UnitType.Special_Wall_Flame_Trap, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Wall_Flame_Trap, 1);
        fields.get("tileHeight").set(UnitType.Special_Wall_Flame_Trap, 1);
        fields.get("dimensionLeft").set(UnitType.Special_Wall_Flame_Trap, 16);
        fields.get("dimensionUp").set(UnitType.Special_Wall_Flame_Trap, 16);
        fields.get("dimensionRight").set(UnitType.Special_Wall_Flame_Trap, 15);
        fields.get("dimensionDown").set(UnitType.Special_Wall_Flame_Trap, 15);
        fields.get("width").set(UnitType.Special_Wall_Flame_Trap, 32);
        fields.get("height").set(UnitType.Special_Wall_Flame_Trap, 32);
        fields.get("seekRange").set(UnitType.Special_Wall_Flame_Trap, 64);
        fields.get("sightRange").set(UnitType.Special_Wall_Flame_Trap, 96);
        fields.get("groundWeapon").set(UnitType.Special_Wall_Flame_Trap, WeaponType.Flame_Thrower_Wall_Trap);
        fields.get("maxGroundHits").set(UnitType.Special_Wall_Flame_Trap, 1);
        fields.get("airWeapon").set(UnitType.Special_Wall_Flame_Trap, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("topSpeed").set(UnitType.Special_Wall_Flame_Trap, 0.0);
        fields.get("acceleration").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("haltDistance").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("turnRadius").set(UnitType.Special_Wall_Flame_Trap, 0);
        fields.get("canProduce").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("canAttack").set(UnitType.Special_Wall_Flame_Trap, true);
        fields.get("canMove").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isFlyer").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("regeneratesHP").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isSpellcaster").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isInvincible").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isOrganic").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isMechanical").set(UnitType.Special_Wall_Flame_Trap, true);
        fields.get("isRobotic").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isDetector").set(UnitType.Special_Wall_Flame_Trap, true);
        fields.get("isResourceContainer").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isResourceDepot").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isRefinery").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isWorker").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("requiresPsi").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("requiresCreep").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isBurrowable").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isCloakable").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isBuilding").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isAddon").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isNeutral").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isHero").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isPowerup").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isBeacon").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isSpell").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("producesCreep").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("producesLarva").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isMineralField").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("isCritter").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("canBuildAddon").set(UnitType.Special_Wall_Flame_Trap, false);
        fields.get("researchesWhat").set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Right_Wall_Missile_Trap() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Right_Wall_Missile_Trap, 212);
        fields.get("race").set(UnitType.Special_Right_Wall_Missile_Trap, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Right_Wall_Missile_Trap, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Right_Wall_Missile_Trap, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Right_Wall_Missile_Trap, TechType.None);
        fields.get("abilities").set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Special_Right_Wall_Missile_Trap, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Right_Wall_Missile_Trap, 50);
        fields.get("maxShields").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("maxEnergy").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("armor").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("mineralPrice").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
        fields.get("gasPrice").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
        fields.get("buildTime").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
        fields.get("supplyRequired").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("supplyProvided").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("spaceRequired").set(UnitType.Special_Right_Wall_Missile_Trap, 255);
        fields.get("spaceProvided").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("buildScore").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("destroyScore").set(UnitType.Special_Right_Wall_Missile_Trap, 100);
        fields.get("size").set(UnitType.Special_Right_Wall_Missile_Trap, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
        fields.get("tileHeight").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
        fields.get("dimensionLeft").set(UnitType.Special_Right_Wall_Missile_Trap, 16);
        fields.get("dimensionUp").set(UnitType.Special_Right_Wall_Missile_Trap, 16);
        fields.get("dimensionRight").set(UnitType.Special_Right_Wall_Missile_Trap, 15);
        fields.get("dimensionDown").set(UnitType.Special_Right_Wall_Missile_Trap, 15);
        fields.get("width").set(UnitType.Special_Right_Wall_Missile_Trap, 32);
        fields.get("height").set(UnitType.Special_Right_Wall_Missile_Trap, 32);
        fields.get("seekRange").set(UnitType.Special_Right_Wall_Missile_Trap, 160);
        fields.get("sightRange").set(UnitType.Special_Right_Wall_Missile_Trap, 192);
        fields.get("groundWeapon").set(UnitType.Special_Right_Wall_Missile_Trap, WeaponType.Hellfire_Missile_Pack_Wall_Trap);
        fields.get("maxGroundHits").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
        fields.get("airWeapon").set(UnitType.Special_Right_Wall_Missile_Trap, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("topSpeed").set(UnitType.Special_Right_Wall_Missile_Trap, 0.0);
        fields.get("acceleration").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("haltDistance").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("turnRadius").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
        fields.get("canProduce").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("canAttack").set(UnitType.Special_Right_Wall_Missile_Trap, true);
        fields.get("canMove").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isFlyer").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("regeneratesHP").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isSpellcaster").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isInvincible").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isOrganic").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isMechanical").set(UnitType.Special_Right_Wall_Missile_Trap, true);
        fields.get("isRobotic").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isDetector").set(UnitType.Special_Right_Wall_Missile_Trap, true);
        fields.get("isResourceContainer").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isResourceDepot").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isRefinery").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isWorker").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("requiresPsi").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("requiresCreep").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isBurrowable").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isCloakable").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isBuilding").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isAddon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isNeutral").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isHero").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isPowerup").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isBeacon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isSpell").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("producesCreep").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("producesLarva").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isMineralField").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("isCritter").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("canBuildAddon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
        fields.get("researchesWhat").set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Right_Wall_Flame_Trap() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Right_Wall_Flame_Trap, 213);
        fields.get("race").set(UnitType.Special_Right_Wall_Flame_Trap, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Right_Wall_Flame_Trap, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Right_Wall_Flame_Trap, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Right_Wall_Flame_Trap, TechType.None);
        fields.get("abilities").set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Weapons)));
        fields.get("armorUpgrade").set(UnitType.Special_Right_Wall_Flame_Trap, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Right_Wall_Flame_Trap, 50);
        fields.get("maxShields").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("maxEnergy").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("armor").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("mineralPrice").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
        fields.get("gasPrice").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
        fields.get("buildTime").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
        fields.get("supplyRequired").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("supplyProvided").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("spaceRequired").set(UnitType.Special_Right_Wall_Flame_Trap, 255);
        fields.get("spaceProvided").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("buildScore").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("destroyScore").set(UnitType.Special_Right_Wall_Flame_Trap, 100);
        fields.get("size").set(UnitType.Special_Right_Wall_Flame_Trap, UnitSizeType.Large);
        fields.get("tileWidth").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
        fields.get("tileHeight").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
        fields.get("dimensionLeft").set(UnitType.Special_Right_Wall_Flame_Trap, 16);
        fields.get("dimensionUp").set(UnitType.Special_Right_Wall_Flame_Trap, 16);
        fields.get("dimensionRight").set(UnitType.Special_Right_Wall_Flame_Trap, 15);
        fields.get("dimensionDown").set(UnitType.Special_Right_Wall_Flame_Trap, 15);
        fields.get("width").set(UnitType.Special_Right_Wall_Flame_Trap, 32);
        fields.get("height").set(UnitType.Special_Right_Wall_Flame_Trap, 32);
        fields.get("seekRange").set(UnitType.Special_Right_Wall_Flame_Trap, 64);
        fields.get("sightRange").set(UnitType.Special_Right_Wall_Flame_Trap, 96);
        fields.get("groundWeapon").set(UnitType.Special_Right_Wall_Flame_Trap, WeaponType.Flame_Thrower_Wall_Trap);
        fields.get("maxGroundHits").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
        fields.get("airWeapon").set(UnitType.Special_Right_Wall_Flame_Trap, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("topSpeed").set(UnitType.Special_Right_Wall_Flame_Trap, 0.0);
        fields.get("acceleration").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("haltDistance").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("turnRadius").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
        fields.get("canProduce").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("canAttack").set(UnitType.Special_Right_Wall_Flame_Trap, true);
        fields.get("canMove").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isFlyer").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("regeneratesHP").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isSpellcaster").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isInvincible").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isOrganic").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isMechanical").set(UnitType.Special_Right_Wall_Flame_Trap, true);
        fields.get("isRobotic").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isDetector").set(UnitType.Special_Right_Wall_Flame_Trap, true);
        fields.get("isResourceContainer").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isResourceDepot").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isRefinery").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isWorker").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("requiresPsi").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("requiresCreep").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isBurrowable").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isCloakable").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isBuilding").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isAddon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isNeutral").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isHero").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isPowerup").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isBeacon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isSpell").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("producesCreep").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("producesLarva").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isMineralField").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("isCritter").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("canBuildAddon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
        fields.get("researchesWhat").set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Special_Start_Location() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Special_Start_Location, 214);
        fields.get("race").set(UnitType.Special_Start_Location, Race.None);
        fields.get("whatBuilds").set(UnitType.Special_Start_Location, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Special_Start_Location, TechType.None);
        fields.get("cloakingTech").set(UnitType.Special_Start_Location, TechType.None);
        fields.get("abilities").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Special_Start_Location, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Special_Start_Location, 800);
        fields.get("maxShields").set(UnitType.Special_Start_Location, 0);
        fields.get("maxEnergy").set(UnitType.Special_Start_Location, 0);
        fields.get("armor").set(UnitType.Special_Start_Location, 0);
        fields.get("mineralPrice").set(UnitType.Special_Start_Location, 0);
        fields.get("gasPrice").set(UnitType.Special_Start_Location, 0);
        fields.get("buildTime").set(UnitType.Special_Start_Location, 0);
        fields.get("supplyRequired").set(UnitType.Special_Start_Location, 0);
        fields.get("supplyProvided").set(UnitType.Special_Start_Location, 0);
        fields.get("spaceRequired").set(UnitType.Special_Start_Location, 255);
        fields.get("spaceProvided").set(UnitType.Special_Start_Location, 0);
        fields.get("buildScore").set(UnitType.Special_Start_Location, 0);
        fields.get("destroyScore").set(UnitType.Special_Start_Location, 0);
        fields.get("size").set(UnitType.Special_Start_Location, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Special_Start_Location, 4);
        fields.get("tileHeight").set(UnitType.Special_Start_Location, 3);
        fields.get("dimensionLeft").set(UnitType.Special_Start_Location, 48);
        fields.get("dimensionUp").set(UnitType.Special_Start_Location, 32);
        fields.get("dimensionRight").set(UnitType.Special_Start_Location, 48);
        fields.get("dimensionDown").set(UnitType.Special_Start_Location, 32);
        fields.get("width").set(UnitType.Special_Start_Location, 97);
        fields.get("height").set(UnitType.Special_Start_Location, 65);
        fields.get("seekRange").set(UnitType.Special_Start_Location, 0);
        fields.get("sightRange").set(UnitType.Special_Start_Location, 32);
        fields.get("groundWeapon").set(UnitType.Special_Start_Location, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Special_Start_Location, 0);
        fields.get("airWeapon").set(UnitType.Special_Start_Location, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Special_Start_Location, 0);
        fields.get("topSpeed").set(UnitType.Special_Start_Location, 0.0);
        fields.get("acceleration").set(UnitType.Special_Start_Location, 0);
        fields.get("haltDistance").set(UnitType.Special_Start_Location, 0);
        fields.get("turnRadius").set(UnitType.Special_Start_Location, 0);
        fields.get("canProduce").set(UnitType.Special_Start_Location, false);
        fields.get("canAttack").set(UnitType.Special_Start_Location, false);
        fields.get("canMove").set(UnitType.Special_Start_Location, false);
        fields.get("isFlyer").set(UnitType.Special_Start_Location, false);
        fields.get("regeneratesHP").set(UnitType.Special_Start_Location, false);
        fields.get("isSpellcaster").set(UnitType.Special_Start_Location, false);
        fields.get("hasPermanentCloak").set(UnitType.Special_Start_Location, false);
        fields.get("isInvincible").set(UnitType.Special_Start_Location, false);
        fields.get("isOrganic").set(UnitType.Special_Start_Location, false);
        fields.get("isMechanical").set(UnitType.Special_Start_Location, false);
        fields.get("isRobotic").set(UnitType.Special_Start_Location, false);
        fields.get("isDetector").set(UnitType.Special_Start_Location, false);
        fields.get("isResourceContainer").set(UnitType.Special_Start_Location, false);
        fields.get("isResourceDepot").set(UnitType.Special_Start_Location, true);
        fields.get("isRefinery").set(UnitType.Special_Start_Location, false);
        fields.get("isWorker").set(UnitType.Special_Start_Location, false);
        fields.get("requiresPsi").set(UnitType.Special_Start_Location, false);
        fields.get("requiresCreep").set(UnitType.Special_Start_Location, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Special_Start_Location, false);
        fields.get("isBurrowable").set(UnitType.Special_Start_Location, false);
        fields.get("isCloakable").set(UnitType.Special_Start_Location, false);
        fields.get("isBuilding").set(UnitType.Special_Start_Location, true);
        fields.get("isAddon").set(UnitType.Special_Start_Location, false);
        fields.get("isFlyingBuilding").set(UnitType.Special_Start_Location, false);
        fields.get("isNeutral").set(UnitType.Special_Start_Location, false);
        fields.get("isHero").set(UnitType.Special_Start_Location, false);
        fields.get("isPowerup").set(UnitType.Special_Start_Location, false);
        fields.get("isBeacon").set(UnitType.Special_Start_Location, false);
        fields.get("isFlagBeacon").set(UnitType.Special_Start_Location, false);
        fields.get("isSpecialBuilding").set(UnitType.Special_Start_Location, true);
        fields.get("isSpell").set(UnitType.Special_Start_Location, false);
        fields.get("producesCreep").set(UnitType.Special_Start_Location, false);
        fields.get("producesLarva").set(UnitType.Special_Start_Location, false);
        fields.get("isMineralField").set(UnitType.Special_Start_Location, false);
        fields.get("isCritter").set(UnitType.Special_Start_Location, false);
        fields.get("canBuildAddon").set(UnitType.Special_Start_Location, false);
        fields.get("researchesWhat").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Flag() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Flag, 215);
        fields.get("race").set(UnitType.Powerup_Flag, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Flag, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Flag, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Flag, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Flag, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Flag, 100000);
        fields.get("maxShields").set(UnitType.Powerup_Flag, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Flag, 0);
        fields.get("armor").set(UnitType.Powerup_Flag, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Flag, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Flag, 1);
        fields.get("buildTime").set(UnitType.Powerup_Flag, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Flag, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Flag, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Flag, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Flag, 0);
        fields.get("buildScore").set(UnitType.Powerup_Flag, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Flag, 0);
        fields.get("size").set(UnitType.Powerup_Flag, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Flag, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Flag, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Flag, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Flag, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Flag, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Flag, 15);
        fields.get("width").set(UnitType.Powerup_Flag, 32);
        fields.get("height").set(UnitType.Powerup_Flag, 32);
        fields.get("seekRange").set(UnitType.Powerup_Flag, 0);
        fields.get("sightRange").set(UnitType.Powerup_Flag, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Flag, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Flag, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Flag, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Flag, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Flag, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Flag, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Flag, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Flag, 0);
        fields.get("canProduce").set(UnitType.Powerup_Flag, false);
        fields.get("canAttack").set(UnitType.Powerup_Flag, false);
        fields.get("canMove").set(UnitType.Powerup_Flag, false);
        fields.get("isFlyer").set(UnitType.Powerup_Flag, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Flag, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Flag, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Flag, false);
        fields.get("isInvincible").set(UnitType.Powerup_Flag, true);
        fields.get("isOrganic").set(UnitType.Powerup_Flag, false);
        fields.get("isMechanical").set(UnitType.Powerup_Flag, false);
        fields.get("isRobotic").set(UnitType.Powerup_Flag, false);
        fields.get("isDetector").set(UnitType.Powerup_Flag, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Flag, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Flag, false);
        fields.get("isRefinery").set(UnitType.Powerup_Flag, false);
        fields.get("isWorker").set(UnitType.Powerup_Flag, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Flag, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Flag, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Flag, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Flag, false);
        fields.get("isCloakable").set(UnitType.Powerup_Flag, false);
        fields.get("isBuilding").set(UnitType.Powerup_Flag, false);
        fields.get("isAddon").set(UnitType.Powerup_Flag, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Flag, false);
        fields.get("isNeutral").set(UnitType.Powerup_Flag, false);
        fields.get("isHero").set(UnitType.Powerup_Flag, false);
        fields.get("isPowerup").set(UnitType.Powerup_Flag, true);
        fields.get("isBeacon").set(UnitType.Powerup_Flag, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Flag, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Flag, false);
        fields.get("isSpell").set(UnitType.Powerup_Flag, false);
        fields.get("producesCreep").set(UnitType.Powerup_Flag, false);
        fields.get("producesLarva").set(UnitType.Powerup_Flag, false);
        fields.get("isMineralField").set(UnitType.Powerup_Flag, false);
        fields.get("isCritter").set(UnitType.Powerup_Flag, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Flag, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Young_Chrysalis() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Young_Chrysalis, 216);
        fields.get("race").set(UnitType.Powerup_Young_Chrysalis, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Young_Chrysalis, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Young_Chrysalis, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Young_Chrysalis, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Young_Chrysalis, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Young_Chrysalis, 800);
        fields.get("maxShields").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("armor").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Young_Chrysalis, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Young_Chrysalis, 1);
        fields.get("buildTime").set(UnitType.Powerup_Young_Chrysalis, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Young_Chrysalis, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("buildScore").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("size").set(UnitType.Powerup_Young_Chrysalis, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Young_Chrysalis, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Young_Chrysalis, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Young_Chrysalis, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Young_Chrysalis, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Young_Chrysalis, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Young_Chrysalis, 15);
        fields.get("width").set(UnitType.Powerup_Young_Chrysalis, 32);
        fields.get("height").set(UnitType.Powerup_Young_Chrysalis, 32);
        fields.get("seekRange").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("sightRange").set(UnitType.Powerup_Young_Chrysalis, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Young_Chrysalis, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Young_Chrysalis, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Young_Chrysalis, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Young_Chrysalis, 0);
        fields.get("canProduce").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("canAttack").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("canMove").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isFlyer").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isInvincible").set(UnitType.Powerup_Young_Chrysalis, true);
        fields.get("isOrganic").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isMechanical").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isRobotic").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isDetector").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isRefinery").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isWorker").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isCloakable").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isBuilding").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isAddon").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isNeutral").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isHero").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isPowerup").set(UnitType.Powerup_Young_Chrysalis, true);
        fields.get("isBeacon").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isSpell").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("producesCreep").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("producesLarva").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isMineralField").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("isCritter").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Young_Chrysalis, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Psi_Emitter() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Psi_Emitter, 217);
        fields.get("race").set(UnitType.Powerup_Psi_Emitter, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Psi_Emitter, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Psi_Emitter, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Psi_Emitter, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Psi_Emitter, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Psi_Emitter, 800);
        fields.get("maxShields").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("armor").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Psi_Emitter, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Psi_Emitter, 1);
        fields.get("buildTime").set(UnitType.Powerup_Psi_Emitter, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Psi_Emitter, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("buildScore").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("size").set(UnitType.Powerup_Psi_Emitter, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Psi_Emitter, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Psi_Emitter, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Psi_Emitter, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Psi_Emitter, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Psi_Emitter, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Psi_Emitter, 15);
        fields.get("width").set(UnitType.Powerup_Psi_Emitter, 32);
        fields.get("height").set(UnitType.Powerup_Psi_Emitter, 32);
        fields.get("seekRange").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("sightRange").set(UnitType.Powerup_Psi_Emitter, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Psi_Emitter, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Psi_Emitter, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Psi_Emitter, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Psi_Emitter, 0);
        fields.get("canProduce").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("canAttack").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("canMove").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isFlyer").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isInvincible").set(UnitType.Powerup_Psi_Emitter, true);
        fields.get("isOrganic").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isMechanical").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isRobotic").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isDetector").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isRefinery").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isWorker").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isCloakable").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isBuilding").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isAddon").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isNeutral").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isHero").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isPowerup").set(UnitType.Powerup_Psi_Emitter, true);
        fields.get("isBeacon").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isSpell").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("producesCreep").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("producesLarva").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isMineralField").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("isCritter").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Psi_Emitter, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Data_Disk() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Data_Disk, 218);
        fields.get("race").set(UnitType.Powerup_Data_Disk, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Data_Disk, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Data_Disk, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Data_Disk, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Data_Disk, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Data_Disk, 800);
        fields.get("maxShields").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("armor").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Data_Disk, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Data_Disk, 1);
        fields.get("buildTime").set(UnitType.Powerup_Data_Disk, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Data_Disk, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("buildScore").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("size").set(UnitType.Powerup_Data_Disk, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Data_Disk, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Data_Disk, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Data_Disk, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Data_Disk, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Data_Disk, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Data_Disk, 15);
        fields.get("width").set(UnitType.Powerup_Data_Disk, 32);
        fields.get("height").set(UnitType.Powerup_Data_Disk, 32);
        fields.get("seekRange").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("sightRange").set(UnitType.Powerup_Data_Disk, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Data_Disk, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Data_Disk, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Data_Disk, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Data_Disk, 0);
        fields.get("canProduce").set(UnitType.Powerup_Data_Disk, false);
        fields.get("canAttack").set(UnitType.Powerup_Data_Disk, false);
        fields.get("canMove").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isFlyer").set(UnitType.Powerup_Data_Disk, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Data_Disk, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isInvincible").set(UnitType.Powerup_Data_Disk, true);
        fields.get("isOrganic").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isMechanical").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isRobotic").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isDetector").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isRefinery").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isWorker").set(UnitType.Powerup_Data_Disk, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Data_Disk, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isCloakable").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isBuilding").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isAddon").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isNeutral").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isHero").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isPowerup").set(UnitType.Powerup_Data_Disk, true);
        fields.get("isBeacon").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isSpell").set(UnitType.Powerup_Data_Disk, false);
        fields.get("producesCreep").set(UnitType.Powerup_Data_Disk, false);
        fields.get("producesLarva").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isMineralField").set(UnitType.Powerup_Data_Disk, false);
        fields.get("isCritter").set(UnitType.Powerup_Data_Disk, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Data_Disk, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Khaydarin_Crystal() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Khaydarin_Crystal, 219);
        fields.get("race").set(UnitType.Powerup_Khaydarin_Crystal, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Khaydarin_Crystal, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Khaydarin_Crystal, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Khaydarin_Crystal, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Khaydarin_Crystal, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Khaydarin_Crystal, 800);
        fields.get("maxShields").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("armor").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Khaydarin_Crystal, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Khaydarin_Crystal, 1);
        fields.get("buildTime").set(UnitType.Powerup_Khaydarin_Crystal, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Khaydarin_Crystal, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("buildScore").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("size").set(UnitType.Powerup_Khaydarin_Crystal, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Khaydarin_Crystal, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Khaydarin_Crystal, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Khaydarin_Crystal, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Khaydarin_Crystal, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Khaydarin_Crystal, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Khaydarin_Crystal, 15);
        fields.get("width").set(UnitType.Powerup_Khaydarin_Crystal, 32);
        fields.get("height").set(UnitType.Powerup_Khaydarin_Crystal, 32);
        fields.get("seekRange").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("sightRange").set(UnitType.Powerup_Khaydarin_Crystal, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Khaydarin_Crystal, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Khaydarin_Crystal, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Khaydarin_Crystal, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Khaydarin_Crystal, 0);
        fields.get("canProduce").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("canAttack").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("canMove").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isFlyer").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isInvincible").set(UnitType.Powerup_Khaydarin_Crystal, true);
        fields.get("isOrganic").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isMechanical").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isRobotic").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isDetector").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isRefinery").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isWorker").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isCloakable").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isBuilding").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isAddon").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isNeutral").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isHero").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isPowerup").set(UnitType.Powerup_Khaydarin_Crystal, true);
        fields.get("isBeacon").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isSpell").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("producesCreep").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("producesLarva").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isMineralField").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("isCritter").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Khaydarin_Crystal, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Mineral_Cluster_Type_1() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Mineral_Cluster_Type_1, 220);
        fields.get("race").set(UnitType.Powerup_Mineral_Cluster_Type_1, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Mineral_Cluster_Type_1, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Mineral_Cluster_Type_1, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Mineral_Cluster_Type_1, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Mineral_Cluster_Type_1, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Mineral_Cluster_Type_1, 800);
        fields.get("maxShields").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("armor").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
        fields.get("buildTime").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Mineral_Cluster_Type_1, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("buildScore").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("size").set(UnitType.Powerup_Mineral_Cluster_Type_1, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Mineral_Cluster_Type_1, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Mineral_Cluster_Type_1, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Mineral_Cluster_Type_1, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Mineral_Cluster_Type_1, 15);
        fields.get("width").set(UnitType.Powerup_Mineral_Cluster_Type_1, 32);
        fields.get("height").set(UnitType.Powerup_Mineral_Cluster_Type_1, 32);
        fields.get("seekRange").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("sightRange").set(UnitType.Powerup_Mineral_Cluster_Type_1, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_1, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_1, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
        fields.get("canProduce").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("canAttack").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("canMove").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isFlyer").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isInvincible").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isOrganic").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isMechanical").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isRobotic").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isDetector").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isRefinery").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isWorker").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isCloakable").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isAddon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isNeutral").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isHero").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isPowerup").set(UnitType.Powerup_Mineral_Cluster_Type_1, true);
        fields.get("isBeacon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isSpell").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("producesCreep").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("producesLarva").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isMineralField").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("isCritter").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Mineral_Cluster_Type_2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Mineral_Cluster_Type_2, 221);
        fields.get("race").set(UnitType.Powerup_Mineral_Cluster_Type_2, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Mineral_Cluster_Type_2, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Mineral_Cluster_Type_2, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Mineral_Cluster_Type_2, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Mineral_Cluster_Type_2, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Mineral_Cluster_Type_2, 800);
        fields.get("maxShields").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("armor").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
        fields.get("buildTime").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Mineral_Cluster_Type_2, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("buildScore").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("size").set(UnitType.Powerup_Mineral_Cluster_Type_2, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Mineral_Cluster_Type_2, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Mineral_Cluster_Type_2, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Mineral_Cluster_Type_2, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Mineral_Cluster_Type_2, 15);
        fields.get("width").set(UnitType.Powerup_Mineral_Cluster_Type_2, 32);
        fields.get("height").set(UnitType.Powerup_Mineral_Cluster_Type_2, 32);
        fields.get("seekRange").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("sightRange").set(UnitType.Powerup_Mineral_Cluster_Type_2, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_2, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_2, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
        fields.get("canProduce").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("canAttack").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("canMove").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isFlyer").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isInvincible").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isOrganic").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isMechanical").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isRobotic").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isDetector").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isRefinery").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isWorker").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isCloakable").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isAddon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isNeutral").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isHero").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isPowerup").set(UnitType.Powerup_Mineral_Cluster_Type_2, true);
        fields.get("isBeacon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isSpell").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("producesCreep").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("producesLarva").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isMineralField").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("isCritter").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Protoss_Gas_Orb_Type_1() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 222);
        fields.get("race").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 800);
        fields.get("maxShields").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("armor").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
        fields.get("buildTime").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("buildScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("size").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 15);
        fields.get("width").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 32);
        fields.get("height").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 32);
        fields.get("seekRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("sightRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
        fields.get("canProduce").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("canAttack").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("canMove").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isFlyer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isInvincible").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isOrganic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isMechanical").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isRobotic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isDetector").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isRefinery").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isWorker").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isCloakable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isAddon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isNeutral").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isHero").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isPowerup").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, true);
        fields.get("isBeacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isSpell").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("producesCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("producesLarva").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isMineralField").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("isCritter").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Protoss_Gas_Orb_Type_2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 223);
        fields.get("race").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 800);
        fields.get("maxShields").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("armor").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
        fields.get("buildTime").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("buildScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("size").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 15);
        fields.get("width").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 32);
        fields.get("height").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 32);
        fields.get("seekRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("sightRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
        fields.get("canProduce").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("canAttack").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("canMove").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isFlyer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isInvincible").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isOrganic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isMechanical").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isRobotic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isDetector").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isRefinery").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isWorker").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isCloakable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isAddon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isNeutral").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isHero").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isPowerup").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, true);
        fields.get("isBeacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isSpell").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("producesCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("producesLarva").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isMineralField").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("isCritter").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Zerg_Gas_Sac_Type_1() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 224);
        fields.get("race").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 800);
        fields.get("maxShields").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("armor").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
        fields.get("buildTime").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("buildScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("size").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 15);
        fields.get("width").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 32);
        fields.get("height").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 32);
        fields.get("seekRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("sightRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
        fields.get("canProduce").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("canAttack").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("canMove").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isFlyer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isInvincible").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isOrganic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isMechanical").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isRobotic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isDetector").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isRefinery").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isWorker").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isCloakable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isAddon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isNeutral").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isHero").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isPowerup").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, true);
        fields.get("isBeacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isSpell").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("producesCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("producesLarva").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isMineralField").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("isCritter").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Zerg_Gas_Sac_Type_2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 225);
        fields.get("race").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 800);
        fields.get("maxShields").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("armor").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
        fields.get("buildTime").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("buildScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("size").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 15);
        fields.get("width").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 32);
        fields.get("height").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 32);
        fields.get("seekRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("sightRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
        fields.get("canProduce").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("canAttack").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("canMove").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isFlyer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isInvincible").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isOrganic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isMechanical").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isRobotic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isDetector").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isRefinery").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isWorker").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isCloakable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isAddon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isNeutral").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isHero").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isPowerup").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, true);
        fields.get("isBeacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isSpell").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("producesCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("producesLarva").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isMineralField").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("isCritter").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Terran_Gas_Tank_Type_1() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 226);
        fields.get("race").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 800);
        fields.get("maxShields").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("armor").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
        fields.get("buildTime").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("buildScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("size").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 15);
        fields.get("width").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 32);
        fields.get("height").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 32);
        fields.get("seekRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("sightRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
        fields.get("canProduce").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("canAttack").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("canMove").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isFlyer").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isInvincible").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isOrganic").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isMechanical").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isRobotic").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isDetector").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isRefinery").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isWorker").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isCloakable").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isAddon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isNeutral").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isHero").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isPowerup").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, true);
        fields.get("isBeacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isSpell").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("producesCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("producesLarva").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isMineralField").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("isCritter").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Powerup_Terran_Gas_Tank_Type_2() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 227);
        fields.get("race").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, Race.None);
        fields.get("whatBuilds").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, TechType.None);
        fields.get("cloakingTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, TechType.None);
        fields.get("abilities").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, UpgradeType.Upgrade_60);
        fields.get("maxHitPoints").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 800);
        fields.get("maxShields").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("maxEnergy").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("armor").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("mineralPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
        fields.get("gasPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
        fields.get("buildTime").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
        fields.get("supplyRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("supplyProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("spaceRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 255);
        fields.get("spaceProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("buildScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("destroyScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("size").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, UnitSizeType.Independent);
        fields.get("tileWidth").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
        fields.get("tileHeight").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
        fields.get("dimensionLeft").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 16);
        fields.get("dimensionUp").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 16);
        fields.get("dimensionRight").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 15);
        fields.get("dimensionDown").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 15);
        fields.get("width").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 32);
        fields.get("height").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 32);
        fields.get("seekRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("sightRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 160);
        fields.get("groundWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("airWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("topSpeed").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0.0);
        fields.get("acceleration").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("haltDistance").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("turnRadius").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
        fields.get("canProduce").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("canAttack").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("canMove").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isFlyer").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("regeneratesHP").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isSpellcaster").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("hasPermanentCloak").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isInvincible").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isOrganic").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isMechanical").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isRobotic").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isDetector").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isResourceContainer").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isResourceDepot").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isRefinery").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isWorker").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("requiresPsi").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("requiresCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isBurrowable").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isCloakable").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isAddon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isFlyingBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isNeutral").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isHero").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isPowerup").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, true);
        fields.get("isBeacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isFlagBeacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isSpecialBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isSpell").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("producesCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("producesLarva").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isMineralField").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("isCritter").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("canBuildAddon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
        fields.get("researchesWhat").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_None() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.None, 228);
        fields.get("race").set(UnitType.None, Race.None);
        fields.get("whatBuilds").set(UnitType.None, new Pair(UnitType.None, 0));
        fields.get("requiredUnits").set(UnitType.None, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.None, TechType.None);
        fields.get("cloakingTech").set(UnitType.None, TechType.None);
        fields.get("abilities").set(UnitType.None, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.None, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.None, UpgradeType.None);
        fields.get("maxHitPoints").set(UnitType.None, 0);
        fields.get("maxShields").set(UnitType.None, 0);
        fields.get("maxEnergy").set(UnitType.None, 0);
        fields.get("armor").set(UnitType.None, 0);
        fields.get("mineralPrice").set(UnitType.None, 0);
        fields.get("gasPrice").set(UnitType.None, 0);
        fields.get("buildTime").set(UnitType.None, 0);
        fields.get("supplyRequired").set(UnitType.None, 0);
        fields.get("supplyProvided").set(UnitType.None, 0);
        fields.get("spaceRequired").set(UnitType.None, 0);
        fields.get("spaceProvided").set(UnitType.None, 0);
        fields.get("buildScore").set(UnitType.None, 0);
        fields.get("destroyScore").set(UnitType.None, 0);
        fields.get("size").set(UnitType.None, UnitSizeType.None);
        fields.get("tileWidth").set(UnitType.None, 0);
        fields.get("tileHeight").set(UnitType.None, 0);
        fields.get("dimensionLeft").set(UnitType.None, 0);
        fields.get("dimensionUp").set(UnitType.None, 0);
        fields.get("dimensionRight").set(UnitType.None, 0);
        fields.get("dimensionDown").set(UnitType.None, 0);
        fields.get("width").set(UnitType.None, 1);
        fields.get("height").set(UnitType.None, 1);
        fields.get("seekRange").set(UnitType.None, 0);
        fields.get("sightRange").set(UnitType.None, 0);
        fields.get("groundWeapon").set(UnitType.None, WeaponType.None);
        fields.get("maxGroundHits").set(UnitType.None, 0);
        fields.get("airWeapon").set(UnitType.None, WeaponType.None);
        fields.get("maxAirHits").set(UnitType.None, 0);
        fields.get("topSpeed").set(UnitType.None, 0.0);
        fields.get("acceleration").set(UnitType.None, 0);
        fields.get("haltDistance").set(UnitType.None, 0);
        fields.get("turnRadius").set(UnitType.None, 0);
        fields.get("canProduce").set(UnitType.None, false);
        fields.get("canAttack").set(UnitType.None, false);
        fields.get("canMove").set(UnitType.None, false);
        fields.get("isFlyer").set(UnitType.None, false);
        fields.get("regeneratesHP").set(UnitType.None, false);
        fields.get("isSpellcaster").set(UnitType.None, false);
        fields.get("hasPermanentCloak").set(UnitType.None, false);
        fields.get("isInvincible").set(UnitType.None, false);
        fields.get("isOrganic").set(UnitType.None, false);
        fields.get("isMechanical").set(UnitType.None, false);
        fields.get("isRobotic").set(UnitType.None, false);
        fields.get("isDetector").set(UnitType.None, false);
        fields.get("isResourceContainer").set(UnitType.None, false);
        fields.get("isResourceDepot").set(UnitType.None, false);
        fields.get("isRefinery").set(UnitType.None, false);
        fields.get("isWorker").set(UnitType.None, false);
        fields.get("requiresPsi").set(UnitType.None, false);
        fields.get("requiresCreep").set(UnitType.None, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.None, false);
        fields.get("isBurrowable").set(UnitType.None, false);
        fields.get("isCloakable").set(UnitType.None, false);
        fields.get("isBuilding").set(UnitType.None, false);
        fields.get("isAddon").set(UnitType.None, false);
        fields.get("isFlyingBuilding").set(UnitType.None, false);
        fields.get("isNeutral").set(UnitType.None, false);
        fields.get("isHero").set(UnitType.None, false);
        fields.get("isPowerup").set(UnitType.None, false);
        fields.get("isBeacon").set(UnitType.None, false);
        fields.get("isFlagBeacon").set(UnitType.None, false);
        fields.get("isSpecialBuilding").set(UnitType.None, false);
        fields.get("isSpell").set(UnitType.None, false);
        fields.get("producesCreep").set(UnitType.None, false);
        fields.get("producesLarva").set(UnitType.None, false);
        fields.get("isMineralField").set(UnitType.None, false);
        fields.get("isCritter").set(UnitType.None, false);
        fields.get("canBuildAddon").set(UnitType.None, false);
        fields.get("researchesWhat").set(UnitType.None, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.None, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_AllUnits() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.AllUnits, 0);
        fields.get("race").set(UnitType.AllUnits, null);
        fields.get("whatBuilds").set(UnitType.AllUnits, null);
        fields.get("requiredUnits").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.AllUnits, null);
        fields.get("cloakingTech").set(UnitType.AllUnits, null);
        fields.get("abilities").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.AllUnits, null);
        fields.get("maxHitPoints").set(UnitType.AllUnits, 0);
        fields.get("maxShields").set(UnitType.AllUnits, 0);
        fields.get("maxEnergy").set(UnitType.AllUnits, 0);
        fields.get("armor").set(UnitType.AllUnits, 0);
        fields.get("mineralPrice").set(UnitType.AllUnits, 0);
        fields.get("gasPrice").set(UnitType.AllUnits, 0);
        fields.get("buildTime").set(UnitType.AllUnits, 0);
        fields.get("supplyRequired").set(UnitType.AllUnits, 0);
        fields.get("supplyProvided").set(UnitType.AllUnits, 0);
        fields.get("spaceRequired").set(UnitType.AllUnits, 0);
        fields.get("spaceProvided").set(UnitType.AllUnits, 0);
        fields.get("buildScore").set(UnitType.AllUnits, 0);
        fields.get("destroyScore").set(UnitType.AllUnits, 0);
        fields.get("size").set(UnitType.AllUnits, null);
        fields.get("tileWidth").set(UnitType.AllUnits, 0);
        fields.get("tileHeight").set(UnitType.AllUnits, 0);
        fields.get("dimensionLeft").set(UnitType.AllUnits, 0);
        fields.get("dimensionUp").set(UnitType.AllUnits, 0);
        fields.get("dimensionRight").set(UnitType.AllUnits, 0);
        fields.get("dimensionDown").set(UnitType.AllUnits, 0);
        fields.get("width").set(UnitType.AllUnits, 0);
        fields.get("height").set(UnitType.AllUnits, 0);
        fields.get("seekRange").set(UnitType.AllUnits, 0);
        fields.get("sightRange").set(UnitType.AllUnits, 0);
        fields.get("groundWeapon").set(UnitType.AllUnits, null);
        fields.get("maxGroundHits").set(UnitType.AllUnits, 0);
        fields.get("airWeapon").set(UnitType.AllUnits, null);
        fields.get("maxAirHits").set(UnitType.AllUnits, 0);
        fields.get("topSpeed").set(UnitType.AllUnits, 0.0);
        fields.get("acceleration").set(UnitType.AllUnits, 0);
        fields.get("haltDistance").set(UnitType.AllUnits, 0);
        fields.get("turnRadius").set(UnitType.AllUnits, 0);
        fields.get("canProduce").set(UnitType.AllUnits, false);
        fields.get("canAttack").set(UnitType.AllUnits, false);
        fields.get("canMove").set(UnitType.AllUnits, false);
        fields.get("isFlyer").set(UnitType.AllUnits, false);
        fields.get("regeneratesHP").set(UnitType.AllUnits, false);
        fields.get("isSpellcaster").set(UnitType.AllUnits, false);
        fields.get("hasPermanentCloak").set(UnitType.AllUnits, false);
        fields.get("isInvincible").set(UnitType.AllUnits, false);
        fields.get("isOrganic").set(UnitType.AllUnits, false);
        fields.get("isMechanical").set(UnitType.AllUnits, false);
        fields.get("isRobotic").set(UnitType.AllUnits, false);
        fields.get("isDetector").set(UnitType.AllUnits, false);
        fields.get("isResourceContainer").set(UnitType.AllUnits, false);
        fields.get("isResourceDepot").set(UnitType.AllUnits, false);
        fields.get("isRefinery").set(UnitType.AllUnits, false);
        fields.get("isWorker").set(UnitType.AllUnits, false);
        fields.get("requiresPsi").set(UnitType.AllUnits, false);
        fields.get("requiresCreep").set(UnitType.AllUnits, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.AllUnits, false);
        fields.get("isBurrowable").set(UnitType.AllUnits, false);
        fields.get("isCloakable").set(UnitType.AllUnits, false);
        fields.get("isBuilding").set(UnitType.AllUnits, false);
        fields.get("isAddon").set(UnitType.AllUnits, false);
        fields.get("isFlyingBuilding").set(UnitType.AllUnits, false);
        fields.get("isNeutral").set(UnitType.AllUnits, false);
        fields.get("isHero").set(UnitType.AllUnits, false);
        fields.get("isPowerup").set(UnitType.AllUnits, false);
        fields.get("isBeacon").set(UnitType.AllUnits, false);
        fields.get("isFlagBeacon").set(UnitType.AllUnits, false);
        fields.get("isSpecialBuilding").set(UnitType.AllUnits, false);
        fields.get("isSpell").set(UnitType.AllUnits, false);
        fields.get("producesCreep").set(UnitType.AllUnits, false);
        fields.get("producesLarva").set(UnitType.AllUnits, false);
        fields.get("isMineralField").set(UnitType.AllUnits, false);
        fields.get("isCritter").set(UnitType.AllUnits, false);
        fields.get("canBuildAddon").set(UnitType.AllUnits, false);
        fields.get("researchesWhat").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Men() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Men, 0);
        fields.get("race").set(UnitType.Men, null);
        fields.get("whatBuilds").set(UnitType.Men, null);
        fields.get("requiredUnits").set(UnitType.Men, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Men, null);
        fields.get("cloakingTech").set(UnitType.Men, null);
        fields.get("abilities").set(UnitType.Men, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Men, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Men, null);
        fields.get("maxHitPoints").set(UnitType.Men, 0);
        fields.get("maxShields").set(UnitType.Men, 0);
        fields.get("maxEnergy").set(UnitType.Men, 0);
        fields.get("armor").set(UnitType.Men, 0);
        fields.get("mineralPrice").set(UnitType.Men, 0);
        fields.get("gasPrice").set(UnitType.Men, 0);
        fields.get("buildTime").set(UnitType.Men, 0);
        fields.get("supplyRequired").set(UnitType.Men, 0);
        fields.get("supplyProvided").set(UnitType.Men, 0);
        fields.get("spaceRequired").set(UnitType.Men, 0);
        fields.get("spaceProvided").set(UnitType.Men, 0);
        fields.get("buildScore").set(UnitType.Men, 0);
        fields.get("destroyScore").set(UnitType.Men, 0);
        fields.get("size").set(UnitType.Men, null);
        fields.get("tileWidth").set(UnitType.Men, 0);
        fields.get("tileHeight").set(UnitType.Men, 0);
        fields.get("dimensionLeft").set(UnitType.Men, 0);
        fields.get("dimensionUp").set(UnitType.Men, 0);
        fields.get("dimensionRight").set(UnitType.Men, 0);
        fields.get("dimensionDown").set(UnitType.Men, 0);
        fields.get("width").set(UnitType.Men, 0);
        fields.get("height").set(UnitType.Men, 0);
        fields.get("seekRange").set(UnitType.Men, 0);
        fields.get("sightRange").set(UnitType.Men, 0);
        fields.get("groundWeapon").set(UnitType.Men, null);
        fields.get("maxGroundHits").set(UnitType.Men, 0);
        fields.get("airWeapon").set(UnitType.Men, null);
        fields.get("maxAirHits").set(UnitType.Men, 0);
        fields.get("topSpeed").set(UnitType.Men, 0.0);
        fields.get("acceleration").set(UnitType.Men, 0);
        fields.get("haltDistance").set(UnitType.Men, 0);
        fields.get("turnRadius").set(UnitType.Men, 0);
        fields.get("canProduce").set(UnitType.Men, false);
        fields.get("canAttack").set(UnitType.Men, false);
        fields.get("canMove").set(UnitType.Men, false);
        fields.get("isFlyer").set(UnitType.Men, false);
        fields.get("regeneratesHP").set(UnitType.Men, false);
        fields.get("isSpellcaster").set(UnitType.Men, false);
        fields.get("hasPermanentCloak").set(UnitType.Men, false);
        fields.get("isInvincible").set(UnitType.Men, false);
        fields.get("isOrganic").set(UnitType.Men, false);
        fields.get("isMechanical").set(UnitType.Men, false);
        fields.get("isRobotic").set(UnitType.Men, false);
        fields.get("isDetector").set(UnitType.Men, false);
        fields.get("isResourceContainer").set(UnitType.Men, false);
        fields.get("isResourceDepot").set(UnitType.Men, false);
        fields.get("isRefinery").set(UnitType.Men, false);
        fields.get("isWorker").set(UnitType.Men, false);
        fields.get("requiresPsi").set(UnitType.Men, false);
        fields.get("requiresCreep").set(UnitType.Men, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Men, false);
        fields.get("isBurrowable").set(UnitType.Men, false);
        fields.get("isCloakable").set(UnitType.Men, false);
        fields.get("isBuilding").set(UnitType.Men, false);
        fields.get("isAddon").set(UnitType.Men, false);
        fields.get("isFlyingBuilding").set(UnitType.Men, false);
        fields.get("isNeutral").set(UnitType.Men, false);
        fields.get("isHero").set(UnitType.Men, false);
        fields.get("isPowerup").set(UnitType.Men, false);
        fields.get("isBeacon").set(UnitType.Men, false);
        fields.get("isFlagBeacon").set(UnitType.Men, false);
        fields.get("isSpecialBuilding").set(UnitType.Men, false);
        fields.get("isSpell").set(UnitType.Men, false);
        fields.get("producesCreep").set(UnitType.Men, false);
        fields.get("producesLarva").set(UnitType.Men, false);
        fields.get("isMineralField").set(UnitType.Men, false);
        fields.get("isCritter").set(UnitType.Men, false);
        fields.get("canBuildAddon").set(UnitType.Men, false);
        fields.get("researchesWhat").set(UnitType.Men, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Men, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Buildings() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Buildings, 0);
        fields.get("race").set(UnitType.Buildings, null);
        fields.get("whatBuilds").set(UnitType.Buildings, null);
        fields.get("requiredUnits").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Buildings, null);
        fields.get("cloakingTech").set(UnitType.Buildings, null);
        fields.get("abilities").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Buildings, null);
        fields.get("maxHitPoints").set(UnitType.Buildings, 0);
        fields.get("maxShields").set(UnitType.Buildings, 0);
        fields.get("maxEnergy").set(UnitType.Buildings, 0);
        fields.get("armor").set(UnitType.Buildings, 0);
        fields.get("mineralPrice").set(UnitType.Buildings, 0);
        fields.get("gasPrice").set(UnitType.Buildings, 0);
        fields.get("buildTime").set(UnitType.Buildings, 0);
        fields.get("supplyRequired").set(UnitType.Buildings, 0);
        fields.get("supplyProvided").set(UnitType.Buildings, 0);
        fields.get("spaceRequired").set(UnitType.Buildings, 0);
        fields.get("spaceProvided").set(UnitType.Buildings, 0);
        fields.get("buildScore").set(UnitType.Buildings, 0);
        fields.get("destroyScore").set(UnitType.Buildings, 0);
        fields.get("size").set(UnitType.Buildings, null);
        fields.get("tileWidth").set(UnitType.Buildings, 0);
        fields.get("tileHeight").set(UnitType.Buildings, 0);
        fields.get("dimensionLeft").set(UnitType.Buildings, 0);
        fields.get("dimensionUp").set(UnitType.Buildings, 0);
        fields.get("dimensionRight").set(UnitType.Buildings, 0);
        fields.get("dimensionDown").set(UnitType.Buildings, 0);
        fields.get("width").set(UnitType.Buildings, 0);
        fields.get("height").set(UnitType.Buildings, 0);
        fields.get("seekRange").set(UnitType.Buildings, 0);
        fields.get("sightRange").set(UnitType.Buildings, 0);
        fields.get("groundWeapon").set(UnitType.Buildings, null);
        fields.get("maxGroundHits").set(UnitType.Buildings, 0);
        fields.get("airWeapon").set(UnitType.Buildings, null);
        fields.get("maxAirHits").set(UnitType.Buildings, 0);
        fields.get("topSpeed").set(UnitType.Buildings, 0.0);
        fields.get("acceleration").set(UnitType.Buildings, 0);
        fields.get("haltDistance").set(UnitType.Buildings, 0);
        fields.get("turnRadius").set(UnitType.Buildings, 0);
        fields.get("canProduce").set(UnitType.Buildings, false);
        fields.get("canAttack").set(UnitType.Buildings, false);
        fields.get("canMove").set(UnitType.Buildings, false);
        fields.get("isFlyer").set(UnitType.Buildings, false);
        fields.get("regeneratesHP").set(UnitType.Buildings, false);
        fields.get("isSpellcaster").set(UnitType.Buildings, false);
        fields.get("hasPermanentCloak").set(UnitType.Buildings, false);
        fields.get("isInvincible").set(UnitType.Buildings, false);
        fields.get("isOrganic").set(UnitType.Buildings, false);
        fields.get("isMechanical").set(UnitType.Buildings, false);
        fields.get("isRobotic").set(UnitType.Buildings, false);
        fields.get("isDetector").set(UnitType.Buildings, false);
        fields.get("isResourceContainer").set(UnitType.Buildings, false);
        fields.get("isResourceDepot").set(UnitType.Buildings, false);
        fields.get("isRefinery").set(UnitType.Buildings, false);
        fields.get("isWorker").set(UnitType.Buildings, false);
        fields.get("requiresPsi").set(UnitType.Buildings, false);
        fields.get("requiresCreep").set(UnitType.Buildings, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Buildings, false);
        fields.get("isBurrowable").set(UnitType.Buildings, false);
        fields.get("isCloakable").set(UnitType.Buildings, false);
        fields.get("isBuilding").set(UnitType.Buildings, false);
        fields.get("isAddon").set(UnitType.Buildings, false);
        fields.get("isFlyingBuilding").set(UnitType.Buildings, false);
        fields.get("isNeutral").set(UnitType.Buildings, false);
        fields.get("isHero").set(UnitType.Buildings, false);
        fields.get("isPowerup").set(UnitType.Buildings, false);
        fields.get("isBeacon").set(UnitType.Buildings, false);
        fields.get("isFlagBeacon").set(UnitType.Buildings, false);
        fields.get("isSpecialBuilding").set(UnitType.Buildings, false);
        fields.get("isSpell").set(UnitType.Buildings, false);
        fields.get("producesCreep").set(UnitType.Buildings, false);
        fields.get("producesLarva").set(UnitType.Buildings, false);
        fields.get("isMineralField").set(UnitType.Buildings, false);
        fields.get("isCritter").set(UnitType.Buildings, false);
        fields.get("canBuildAddon").set(UnitType.Buildings, false);
        fields.get("researchesWhat").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Factories() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Factories, 0);
        fields.get("race").set(UnitType.Factories, null);
        fields.get("whatBuilds").set(UnitType.Factories, null);
        fields.get("requiredUnits").set(UnitType.Factories, new ArrayList(Arrays.asList()));
        fields.get("requiredTech").set(UnitType.Factories, null);
        fields.get("cloakingTech").set(UnitType.Factories, null);
        fields.get("abilities").set(UnitType.Factories, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Factories, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Factories, null);
        fields.get("maxHitPoints").set(UnitType.Factories, 0);
        fields.get("maxShields").set(UnitType.Factories, 0);
        fields.get("maxEnergy").set(UnitType.Factories, 0);
        fields.get("armor").set(UnitType.Factories, 0);
        fields.get("mineralPrice").set(UnitType.Factories, 0);
        fields.get("gasPrice").set(UnitType.Factories, 0);
        fields.get("buildTime").set(UnitType.Factories, 0);
        fields.get("supplyRequired").set(UnitType.Factories, 0);
        fields.get("supplyProvided").set(UnitType.Factories, 0);
        fields.get("spaceRequired").set(UnitType.Factories, 0);
        fields.get("spaceProvided").set(UnitType.Factories, 0);
        fields.get("buildScore").set(UnitType.Factories, 0);
        fields.get("destroyScore").set(UnitType.Factories, 0);
        fields.get("size").set(UnitType.Factories, null);
        fields.get("tileWidth").set(UnitType.Factories, 0);
        fields.get("tileHeight").set(UnitType.Factories, 0);
        fields.get("dimensionLeft").set(UnitType.Factories, 0);
        fields.get("dimensionUp").set(UnitType.Factories, 0);
        fields.get("dimensionRight").set(UnitType.Factories, 0);
        fields.get("dimensionDown").set(UnitType.Factories, 0);
        fields.get("width").set(UnitType.Factories, 0);
        fields.get("height").set(UnitType.Factories, 0);
        fields.get("seekRange").set(UnitType.Factories, 0);
        fields.get("sightRange").set(UnitType.Factories, 0);
        fields.get("groundWeapon").set(UnitType.Factories, null);
        fields.get("maxGroundHits").set(UnitType.Factories, 0);
        fields.get("airWeapon").set(UnitType.Factories, null);
        fields.get("maxAirHits").set(UnitType.Factories, 0);
        fields.get("topSpeed").set(UnitType.Factories, 0.0);
        fields.get("acceleration").set(UnitType.Factories, 0);
        fields.get("haltDistance").set(UnitType.Factories, 0);
        fields.get("turnRadius").set(UnitType.Factories, 0);
        fields.get("canProduce").set(UnitType.Factories, false);
        fields.get("canAttack").set(UnitType.Factories, false);
        fields.get("canMove").set(UnitType.Factories, false);
        fields.get("isFlyer").set(UnitType.Factories, false);
        fields.get("regeneratesHP").set(UnitType.Factories, false);
        fields.get("isSpellcaster").set(UnitType.Factories, false);
        fields.get("hasPermanentCloak").set(UnitType.Factories, false);
        fields.get("isInvincible").set(UnitType.Factories, false);
        fields.get("isOrganic").set(UnitType.Factories, false);
        fields.get("isMechanical").set(UnitType.Factories, false);
        fields.get("isRobotic").set(UnitType.Factories, false);
        fields.get("isDetector").set(UnitType.Factories, false);
        fields.get("isResourceContainer").set(UnitType.Factories, false);
        fields.get("isResourceDepot").set(UnitType.Factories, false);
        fields.get("isRefinery").set(UnitType.Factories, false);
        fields.get("isWorker").set(UnitType.Factories, false);
        fields.get("requiresPsi").set(UnitType.Factories, false);
        fields.get("requiresCreep").set(UnitType.Factories, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Factories, false);
        fields.get("isBurrowable").set(UnitType.Factories, false);
        fields.get("isCloakable").set(UnitType.Factories, false);
        fields.get("isBuilding").set(UnitType.Factories, false);
        fields.get("isAddon").set(UnitType.Factories, false);
        fields.get("isFlyingBuilding").set(UnitType.Factories, false);
        fields.get("isNeutral").set(UnitType.Factories, false);
        fields.get("isHero").set(UnitType.Factories, false);
        fields.get("isPowerup").set(UnitType.Factories, false);
        fields.get("isBeacon").set(UnitType.Factories, false);
        fields.get("isFlagBeacon").set(UnitType.Factories, false);
        fields.get("isSpecialBuilding").set(UnitType.Factories, false);
        fields.get("isSpell").set(UnitType.Factories, false);
        fields.get("producesCreep").set(UnitType.Factories, false);
        fields.get("producesLarva").set(UnitType.Factories, false);
        fields.get("isMineralField").set(UnitType.Factories, false);
        fields.get("isCritter").set(UnitType.Factories, false);
        fields.get("canBuildAddon").set(UnitType.Factories, false);
        fields.get("researchesWhat").set(UnitType.Factories, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Factories, new ArrayList(Arrays.asList()));
    }
    private void initializeUnitType_Unknown() throws Exception {
        Class<?> c = UnitType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UnitType.Unknown, 233);
        fields.get("race").set(UnitType.Unknown, Race.Unknown);
        fields.get("whatBuilds").set(UnitType.Unknown, new Pair(UnitType.Unknown, 1));
        fields.get("requiredUnits").set(UnitType.Unknown, new ArrayList(Arrays.asList(UnitType.Unknown)));
        fields.get("requiredTech").set(UnitType.Unknown, TechType.None);
        fields.get("cloakingTech").set(UnitType.Unknown, TechType.None);
        fields.get("abilities").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
        fields.get("upgrades").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
        fields.get("armorUpgrade").set(UnitType.Unknown, UpgradeType.Unknown);
        fields.get("maxHitPoints").set(UnitType.Unknown, 0);
        fields.get("maxShields").set(UnitType.Unknown, 0);
        fields.get("maxEnergy").set(UnitType.Unknown, 0);
        fields.get("armor").set(UnitType.Unknown, 0);
        fields.get("mineralPrice").set(UnitType.Unknown, 0);
        fields.get("gasPrice").set(UnitType.Unknown, 0);
        fields.get("buildTime").set(UnitType.Unknown, 0);
        fields.get("supplyRequired").set(UnitType.Unknown, 0);
        fields.get("supplyProvided").set(UnitType.Unknown, 0);
        fields.get("spaceRequired").set(UnitType.Unknown, 0);
        fields.get("spaceProvided").set(UnitType.Unknown, 0);
        fields.get("buildScore").set(UnitType.Unknown, 0);
        fields.get("destroyScore").set(UnitType.Unknown, 0);
        fields.get("size").set(UnitType.Unknown, UnitSizeType.Unknown);
        fields.get("tileWidth").set(UnitType.Unknown, 0);
        fields.get("tileHeight").set(UnitType.Unknown, 0);
        fields.get("dimensionLeft").set(UnitType.Unknown, 0);
        fields.get("dimensionUp").set(UnitType.Unknown, 0);
        fields.get("dimensionRight").set(UnitType.Unknown, 0);
        fields.get("dimensionDown").set(UnitType.Unknown, 0);
        fields.get("width").set(UnitType.Unknown, 1);
        fields.get("height").set(UnitType.Unknown, 1);
        fields.get("seekRange").set(UnitType.Unknown, 0);
        fields.get("sightRange").set(UnitType.Unknown, 0);
        fields.get("groundWeapon").set(UnitType.Unknown, WeaponType.Unknown);
        fields.get("maxGroundHits").set(UnitType.Unknown, 0);
        fields.get("airWeapon").set(UnitType.Unknown, WeaponType.Unknown);
        fields.get("maxAirHits").set(UnitType.Unknown, 0);
        fields.get("topSpeed").set(UnitType.Unknown, 0.0);
        fields.get("acceleration").set(UnitType.Unknown, 0);
        fields.get("haltDistance").set(UnitType.Unknown, 0);
        fields.get("turnRadius").set(UnitType.Unknown, 0);
        fields.get("canProduce").set(UnitType.Unknown, false);
        fields.get("canAttack").set(UnitType.Unknown, true);
        fields.get("canMove").set(UnitType.Unknown, false);
        fields.get("isFlyer").set(UnitType.Unknown, false);
        fields.get("regeneratesHP").set(UnitType.Unknown, false);
        fields.get("isSpellcaster").set(UnitType.Unknown, false);
        fields.get("hasPermanentCloak").set(UnitType.Unknown, false);
        fields.get("isInvincible").set(UnitType.Unknown, false);
        fields.get("isOrganic").set(UnitType.Unknown, false);
        fields.get("isMechanical").set(UnitType.Unknown, false);
        fields.get("isRobotic").set(UnitType.Unknown, false);
        fields.get("isDetector").set(UnitType.Unknown, false);
        fields.get("isResourceContainer").set(UnitType.Unknown, false);
        fields.get("isResourceDepot").set(UnitType.Unknown, false);
        fields.get("isRefinery").set(UnitType.Unknown, false);
        fields.get("isWorker").set(UnitType.Unknown, false);
        fields.get("requiresPsi").set(UnitType.Unknown, false);
        fields.get("requiresCreep").set(UnitType.Unknown, false);
        fields.get("isTwoUnitsInOneEgg").set(UnitType.Unknown, false);
        fields.get("isBurrowable").set(UnitType.Unknown, false);
        fields.get("isCloakable").set(UnitType.Unknown, false);
        fields.get("isBuilding").set(UnitType.Unknown, false);
        fields.get("isAddon").set(UnitType.Unknown, false);
        fields.get("isFlyingBuilding").set(UnitType.Unknown, false);
        fields.get("isNeutral").set(UnitType.Unknown, false);
        fields.get("isHero").set(UnitType.Unknown, false);
        fields.get("isPowerup").set(UnitType.Unknown, false);
        fields.get("isBeacon").set(UnitType.Unknown, false);
        fields.get("isFlagBeacon").set(UnitType.Unknown, false);
        fields.get("isSpecialBuilding").set(UnitType.Unknown, false);
        fields.get("isSpell").set(UnitType.Unknown, false);
        fields.get("producesCreep").set(UnitType.Unknown, false);
        fields.get("producesLarva").set(UnitType.Unknown, false);
        fields.get("isMineralField").set(UnitType.Unknown, false);
        fields.get("isCritter").set(UnitType.Unknown, false);
        fields.get("canBuildAddon").set(UnitType.Unknown, false);
        fields.get("researchesWhat").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
        fields.get("upgradesWhat").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
    }
    private void initializeWeaponType() throws Exception {
        initializeWeaponType_Gauss_Rifle();
        initializeWeaponType_Gauss_Rifle_Jim_Raynor();
        initializeWeaponType_C_10_Canister_Rifle();
        initializeWeaponType_C_10_Canister_Rifle_Sarah_Kerrigan();
        initializeWeaponType_Fragmentation_Grenade();
        initializeWeaponType_Fragmentation_Grenade_Jim_Raynor();
        initializeWeaponType_Spider_Mines();
        initializeWeaponType_Twin_Autocannons();
        initializeWeaponType_Hellfire_Missile_Pack();
        initializeWeaponType_Twin_Autocannons_Alan_Schezar();
        initializeWeaponType_Hellfire_Missile_Pack_Alan_Schezar();
        initializeWeaponType_Arclite_Cannon();
        initializeWeaponType_Arclite_Cannon_Edmund_Duke();
        initializeWeaponType_Fusion_Cutter();
        initializeWeaponType_Gemini_Missiles();
        initializeWeaponType_Burst_Lasers();
        initializeWeaponType_Gemini_Missiles_Tom_Kazansky();
        initializeWeaponType_Burst_Lasers_Tom_Kazansky();
        initializeWeaponType_ATS_Laser_Battery();
        initializeWeaponType_ATA_Laser_Battery();
        initializeWeaponType_ATS_Laser_Battery_Hero();
        initializeWeaponType_ATA_Laser_Battery_Hero();
        initializeWeaponType_ATS_Laser_Battery_Hyperion();
        initializeWeaponType_ATA_Laser_Battery_Hyperion();
        initializeWeaponType_Flame_Thrower();
        initializeWeaponType_Flame_Thrower_Gui_Montag();
        initializeWeaponType_Arclite_Shock_Cannon();
        initializeWeaponType_Arclite_Shock_Cannon_Edmund_Duke();
        initializeWeaponType_Longbolt_Missile();
        initializeWeaponType_Yamato_Gun();
        initializeWeaponType_Nuclear_Strike();
        initializeWeaponType_Lockdown();
        initializeWeaponType_EMP_Shockwave();
        initializeWeaponType_Irradiate();
        initializeWeaponType_Claws();
        initializeWeaponType_Claws_Devouring_One();
        initializeWeaponType_Claws_Infested_Kerrigan();
        initializeWeaponType_Needle_Spines();
        initializeWeaponType_Needle_Spines_Hunter_Killer();
        initializeWeaponType_Kaiser_Blades();
        initializeWeaponType_Kaiser_Blades_Torrasque();
        initializeWeaponType_Toxic_Spores();
        initializeWeaponType_Spines();
        initializeWeaponType_Acid_Spore();
        initializeWeaponType_Acid_Spore_Kukulza();
        initializeWeaponType_Glave_Wurm();
        initializeWeaponType_Glave_Wurm_Kukulza();
        initializeWeaponType_Seeker_Spores();
        initializeWeaponType_Subterranean_Tentacle();
        initializeWeaponType_Suicide_Infested_Terran();
        initializeWeaponType_Suicide_Scourge();
        initializeWeaponType_Parasite();
        initializeWeaponType_Spawn_Broodlings();
        initializeWeaponType_Ensnare();
        initializeWeaponType_Dark_Swarm();
        initializeWeaponType_Plague();
        initializeWeaponType_Consume();
        initializeWeaponType_Particle_Beam();
        initializeWeaponType_Psi_Blades();
        initializeWeaponType_Psi_Blades_Fenix();
        initializeWeaponType_Phase_Disruptor();
        initializeWeaponType_Phase_Disruptor_Fenix();
        initializeWeaponType_Psi_Assault();
        initializeWeaponType_Psionic_Shockwave();
        initializeWeaponType_Psionic_Shockwave_TZ_Archon();
        initializeWeaponType_Dual_Photon_Blasters();
        initializeWeaponType_Anti_Matter_Missiles();
        initializeWeaponType_Dual_Photon_Blasters_Mojo();
        initializeWeaponType_Anti_Matter_Missiles_Mojo();
        initializeWeaponType_Phase_Disruptor_Cannon();
        initializeWeaponType_Phase_Disruptor_Cannon_Danimoth();
        initializeWeaponType_Pulse_Cannon();
        initializeWeaponType_STS_Photon_Cannon();
        initializeWeaponType_STA_Photon_Cannon();
        initializeWeaponType_Scarab();
        initializeWeaponType_Stasis_Field();
        initializeWeaponType_Psionic_Storm();
        initializeWeaponType_Warp_Blades_Zeratul();
        initializeWeaponType_Warp_Blades_Hero();
        initializeWeaponType_Platform_Laser_Battery();
        initializeWeaponType_Independant_Laser_Battery();
        initializeWeaponType_Twin_Autocannons_Floor_Trap();
        initializeWeaponType_Hellfire_Missile_Pack_Wall_Trap();
        initializeWeaponType_Flame_Thrower_Wall_Trap();
        initializeWeaponType_Hellfire_Missile_Pack_Floor_Trap();
        initializeWeaponType_Neutron_Flare();
        initializeWeaponType_Disruption_Web();
        initializeWeaponType_Restoration();
        initializeWeaponType_Halo_Rockets();
        initializeWeaponType_Corrosive_Acid();
        initializeWeaponType_Mind_Control();
        initializeWeaponType_Feedback();
        initializeWeaponType_Optical_Flare();
        initializeWeaponType_Maelstrom();
        initializeWeaponType_Subterranean_Spines();
        initializeWeaponType_Warp_Blades();
        initializeWeaponType_C_10_Canister_Rifle_Samir_Duran();
        initializeWeaponType_C_10_Canister_Rifle_Infested_Duran();
        initializeWeaponType_Dual_Photon_Blasters_Artanis();
        initializeWeaponType_Anti_Matter_Missiles_Artanis();
        initializeWeaponType_C_10_Canister_Rifle_Alexei_Stukov();
        initializeWeaponType_None();
        initializeWeaponType_Unknown();
    }

    private void initializeWeaponType_Gauss_Rifle() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Gauss_Rifle, 0);
        fields.get("tech").set(WeaponType.Gauss_Rifle, TechType.None);
        fields.get("whatUses").set(WeaponType.Gauss_Rifle, UnitType.Terran_Marine);
        fields.get("damageAmount").set(WeaponType.Gauss_Rifle, 6);
        fields.get("damageBonus").set(WeaponType.Gauss_Rifle, 1);
        fields.get("damageCooldown").set(WeaponType.Gauss_Rifle, 15);
        fields.get("damageFactor").set(WeaponType.Gauss_Rifle, 1);
        fields.get("upgradeType").set(WeaponType.Gauss_Rifle, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.Gauss_Rifle, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Gauss_Rifle, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Gauss_Rifle, 0);
        fields.get("maxRange").set(WeaponType.Gauss_Rifle, 128);
        fields.get("innerSplashRadius").set(WeaponType.Gauss_Rifle, 0);
        fields.get("medianSplashRadius").set(WeaponType.Gauss_Rifle, 0);
        fields.get("outerSplashRadius").set(WeaponType.Gauss_Rifle, 0);
        fields.get("targetsAir").set(WeaponType.Gauss_Rifle, true);
        fields.get("targetsGround").set(WeaponType.Gauss_Rifle, true);
        fields.get("targetsMechanical").set(WeaponType.Gauss_Rifle, false);
        fields.get("targetsOrganic").set(WeaponType.Gauss_Rifle, false);
        fields.get("targetsNonBuilding").set(WeaponType.Gauss_Rifle, false);
        fields.get("targetsNonRobotic").set(WeaponType.Gauss_Rifle, false);
        fields.get("targetsTerrain").set(WeaponType.Gauss_Rifle, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Gauss_Rifle, false);
        fields.get("targetsOwn").set(WeaponType.Gauss_Rifle, false);
    }
    private void initializeWeaponType_Gauss_Rifle_Jim_Raynor() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Gauss_Rifle_Jim_Raynor, 1);
        fields.get("tech").set(WeaponType.Gauss_Rifle_Jim_Raynor, TechType.None);
        fields.get("whatUses").set(WeaponType.Gauss_Rifle_Jim_Raynor, UnitType.Hero_Jim_Raynor_Marine);
        fields.get("damageAmount").set(WeaponType.Gauss_Rifle_Jim_Raynor, 18);
        fields.get("damageBonus").set(WeaponType.Gauss_Rifle_Jim_Raynor, 1);
        fields.get("damageCooldown").set(WeaponType.Gauss_Rifle_Jim_Raynor, 15);
        fields.get("damageFactor").set(WeaponType.Gauss_Rifle_Jim_Raynor, 1);
        fields.get("upgradeType").set(WeaponType.Gauss_Rifle_Jim_Raynor, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.Gauss_Rifle_Jim_Raynor, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Gauss_Rifle_Jim_Raynor, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Gauss_Rifle_Jim_Raynor, 0);
        fields.get("maxRange").set(WeaponType.Gauss_Rifle_Jim_Raynor, 160);
        fields.get("innerSplashRadius").set(WeaponType.Gauss_Rifle_Jim_Raynor, 0);
        fields.get("medianSplashRadius").set(WeaponType.Gauss_Rifle_Jim_Raynor, 0);
        fields.get("outerSplashRadius").set(WeaponType.Gauss_Rifle_Jim_Raynor, 0);
        fields.get("targetsAir").set(WeaponType.Gauss_Rifle_Jim_Raynor, true);
        fields.get("targetsGround").set(WeaponType.Gauss_Rifle_Jim_Raynor, true);
        fields.get("targetsMechanical").set(WeaponType.Gauss_Rifle_Jim_Raynor, false);
        fields.get("targetsOrganic").set(WeaponType.Gauss_Rifle_Jim_Raynor, false);
        fields.get("targetsNonBuilding").set(WeaponType.Gauss_Rifle_Jim_Raynor, false);
        fields.get("targetsNonRobotic").set(WeaponType.Gauss_Rifle_Jim_Raynor, false);
        fields.get("targetsTerrain").set(WeaponType.Gauss_Rifle_Jim_Raynor, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Gauss_Rifle_Jim_Raynor, false);
        fields.get("targetsOwn").set(WeaponType.Gauss_Rifle_Jim_Raynor, false);
    }
    private void initializeWeaponType_C_10_Canister_Rifle() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.C_10_Canister_Rifle, 2);
        fields.get("tech").set(WeaponType.C_10_Canister_Rifle, TechType.None);
        fields.get("whatUses").set(WeaponType.C_10_Canister_Rifle, UnitType.Terran_Ghost);
        fields.get("damageAmount").set(WeaponType.C_10_Canister_Rifle, 10);
        fields.get("damageBonus").set(WeaponType.C_10_Canister_Rifle, 1);
        fields.get("damageCooldown").set(WeaponType.C_10_Canister_Rifle, 22);
        fields.get("damageFactor").set(WeaponType.C_10_Canister_Rifle, 1);
        fields.get("upgradeType").set(WeaponType.C_10_Canister_Rifle, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.C_10_Canister_Rifle, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.C_10_Canister_Rifle, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.C_10_Canister_Rifle, 0);
        fields.get("maxRange").set(WeaponType.C_10_Canister_Rifle, 224);
        fields.get("innerSplashRadius").set(WeaponType.C_10_Canister_Rifle, 0);
        fields.get("medianSplashRadius").set(WeaponType.C_10_Canister_Rifle, 0);
        fields.get("outerSplashRadius").set(WeaponType.C_10_Canister_Rifle, 0);
        fields.get("targetsAir").set(WeaponType.C_10_Canister_Rifle, true);
        fields.get("targetsGround").set(WeaponType.C_10_Canister_Rifle, true);
        fields.get("targetsMechanical").set(WeaponType.C_10_Canister_Rifle, false);
        fields.get("targetsOrganic").set(WeaponType.C_10_Canister_Rifle, false);
        fields.get("targetsNonBuilding").set(WeaponType.C_10_Canister_Rifle, false);
        fields.get("targetsNonRobotic").set(WeaponType.C_10_Canister_Rifle, false);
        fields.get("targetsTerrain").set(WeaponType.C_10_Canister_Rifle, false);
        fields.get("targetsOrgOrMech").set(WeaponType.C_10_Canister_Rifle, false);
        fields.get("targetsOwn").set(WeaponType.C_10_Canister_Rifle, false);
    }
    private void initializeWeaponType_C_10_Canister_Rifle_Sarah_Kerrigan() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 3);
        fields.get("tech").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, TechType.None);
        fields.get("whatUses").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, UnitType.Hero_Sarah_Kerrigan);
        fields.get("damageAmount").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 30);
        fields.get("damageBonus").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 1);
        fields.get("damageCooldown").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 22);
        fields.get("damageFactor").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 1);
        fields.get("upgradeType").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 0);
        fields.get("maxRange").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 192);
        fields.get("innerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 0);
        fields.get("medianSplashRadius").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 0);
        fields.get("outerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, 0);
        fields.get("targetsAir").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, true);
        fields.get("targetsGround").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, true);
        fields.get("targetsMechanical").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, false);
        fields.get("targetsOrganic").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, false);
        fields.get("targetsNonBuilding").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, false);
        fields.get("targetsNonRobotic").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, false);
        fields.get("targetsTerrain").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, false);
        fields.get("targetsOrgOrMech").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, false);
        fields.get("targetsOwn").set(WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan, false);
    }
    private void initializeWeaponType_Fragmentation_Grenade() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Fragmentation_Grenade, 4);
        fields.get("tech").set(WeaponType.Fragmentation_Grenade, TechType.None);
        fields.get("whatUses").set(WeaponType.Fragmentation_Grenade, UnitType.Terran_Vulture);
        fields.get("damageAmount").set(WeaponType.Fragmentation_Grenade, 20);
        fields.get("damageBonus").set(WeaponType.Fragmentation_Grenade, 2);
        fields.get("damageCooldown").set(WeaponType.Fragmentation_Grenade, 30);
        fields.get("damageFactor").set(WeaponType.Fragmentation_Grenade, 1);
        fields.get("upgradeType").set(WeaponType.Fragmentation_Grenade, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Fragmentation_Grenade, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.Fragmentation_Grenade, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Fragmentation_Grenade, 0);
        fields.get("maxRange").set(WeaponType.Fragmentation_Grenade, 160);
        fields.get("innerSplashRadius").set(WeaponType.Fragmentation_Grenade, 0);
        fields.get("medianSplashRadius").set(WeaponType.Fragmentation_Grenade, 0);
        fields.get("outerSplashRadius").set(WeaponType.Fragmentation_Grenade, 0);
        fields.get("targetsAir").set(WeaponType.Fragmentation_Grenade, false);
        fields.get("targetsGround").set(WeaponType.Fragmentation_Grenade, true);
        fields.get("targetsMechanical").set(WeaponType.Fragmentation_Grenade, false);
        fields.get("targetsOrganic").set(WeaponType.Fragmentation_Grenade, false);
        fields.get("targetsNonBuilding").set(WeaponType.Fragmentation_Grenade, false);
        fields.get("targetsNonRobotic").set(WeaponType.Fragmentation_Grenade, false);
        fields.get("targetsTerrain").set(WeaponType.Fragmentation_Grenade, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Fragmentation_Grenade, false);
        fields.get("targetsOwn").set(WeaponType.Fragmentation_Grenade, false);
    }
    private void initializeWeaponType_Fragmentation_Grenade_Jim_Raynor() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 5);
        fields.get("tech").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, TechType.None);
        fields.get("whatUses").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, UnitType.Hero_Jim_Raynor_Vulture);
        fields.get("damageAmount").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 30);
        fields.get("damageBonus").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 2);
        fields.get("damageCooldown").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 22);
        fields.get("damageFactor").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 1);
        fields.get("upgradeType").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 0);
        fields.get("maxRange").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 160);
        fields.get("innerSplashRadius").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 0);
        fields.get("medianSplashRadius").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 0);
        fields.get("outerSplashRadius").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, 0);
        fields.get("targetsAir").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
        fields.get("targetsGround").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, true);
        fields.get("targetsMechanical").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
        fields.get("targetsOrganic").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
        fields.get("targetsNonBuilding").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
        fields.get("targetsNonRobotic").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
        fields.get("targetsTerrain").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
        fields.get("targetsOwn").set(WeaponType.Fragmentation_Grenade_Jim_Raynor, false);
    }
    private void initializeWeaponType_Spider_Mines() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Spider_Mines, 6);
        fields.get("tech").set(WeaponType.Spider_Mines, TechType.Spider_Mines);
        fields.get("whatUses").set(WeaponType.Spider_Mines, UnitType.Terran_Vulture_Spider_Mine);
        fields.get("damageAmount").set(WeaponType.Spider_Mines, 125);
        fields.get("damageBonus").set(WeaponType.Spider_Mines, 0);
        fields.get("damageCooldown").set(WeaponType.Spider_Mines, 22);
        fields.get("damageFactor").set(WeaponType.Spider_Mines, 1);
        fields.get("upgradeType").set(WeaponType.Spider_Mines, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Spider_Mines, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Spider_Mines, ExplosionType.Radial_Splash);
        fields.get("minRange").set(WeaponType.Spider_Mines, 0);
        fields.get("maxRange").set(WeaponType.Spider_Mines, 10);
        fields.get("innerSplashRadius").set(WeaponType.Spider_Mines, 50);
        fields.get("medianSplashRadius").set(WeaponType.Spider_Mines, 75);
        fields.get("outerSplashRadius").set(WeaponType.Spider_Mines, 100);
        fields.get("targetsAir").set(WeaponType.Spider_Mines, false);
        fields.get("targetsGround").set(WeaponType.Spider_Mines, true);
        fields.get("targetsMechanical").set(WeaponType.Spider_Mines, false);
        fields.get("targetsOrganic").set(WeaponType.Spider_Mines, false);
        fields.get("targetsNonBuilding").set(WeaponType.Spider_Mines, true);
        fields.get("targetsNonRobotic").set(WeaponType.Spider_Mines, false);
        fields.get("targetsTerrain").set(WeaponType.Spider_Mines, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Spider_Mines, false);
        fields.get("targetsOwn").set(WeaponType.Spider_Mines, false);
    }
    private void initializeWeaponType_Twin_Autocannons() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Twin_Autocannons, 7);
        fields.get("tech").set(WeaponType.Twin_Autocannons, TechType.None);
        fields.get("whatUses").set(WeaponType.Twin_Autocannons, UnitType.Terran_Goliath);
        fields.get("damageAmount").set(WeaponType.Twin_Autocannons, 12);
        fields.get("damageBonus").set(WeaponType.Twin_Autocannons, 1);
        fields.get("damageCooldown").set(WeaponType.Twin_Autocannons, 22);
        fields.get("damageFactor").set(WeaponType.Twin_Autocannons, 1);
        fields.get("upgradeType").set(WeaponType.Twin_Autocannons, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Twin_Autocannons, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Twin_Autocannons, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Twin_Autocannons, 0);
        fields.get("maxRange").set(WeaponType.Twin_Autocannons, 192);
        fields.get("innerSplashRadius").set(WeaponType.Twin_Autocannons, 0);
        fields.get("medianSplashRadius").set(WeaponType.Twin_Autocannons, 0);
        fields.get("outerSplashRadius").set(WeaponType.Twin_Autocannons, 0);
        fields.get("targetsAir").set(WeaponType.Twin_Autocannons, false);
        fields.get("targetsGround").set(WeaponType.Twin_Autocannons, true);
        fields.get("targetsMechanical").set(WeaponType.Twin_Autocannons, false);
        fields.get("targetsOrganic").set(WeaponType.Twin_Autocannons, false);
        fields.get("targetsNonBuilding").set(WeaponType.Twin_Autocannons, false);
        fields.get("targetsNonRobotic").set(WeaponType.Twin_Autocannons, false);
        fields.get("targetsTerrain").set(WeaponType.Twin_Autocannons, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Twin_Autocannons, false);
        fields.get("targetsOwn").set(WeaponType.Twin_Autocannons, false);
    }
    private void initializeWeaponType_Hellfire_Missile_Pack() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Hellfire_Missile_Pack, 8);
        fields.get("tech").set(WeaponType.Hellfire_Missile_Pack, TechType.None);
        fields.get("whatUses").set(WeaponType.Hellfire_Missile_Pack, UnitType.Terran_Goliath);
        fields.get("damageAmount").set(WeaponType.Hellfire_Missile_Pack, 10);
        fields.get("damageBonus").set(WeaponType.Hellfire_Missile_Pack, 2);
        fields.get("damageCooldown").set(WeaponType.Hellfire_Missile_Pack, 22);
        fields.get("damageFactor").set(WeaponType.Hellfire_Missile_Pack, 2);
        fields.get("upgradeType").set(WeaponType.Hellfire_Missile_Pack, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Hellfire_Missile_Pack, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Hellfire_Missile_Pack, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Hellfire_Missile_Pack, 0);
        fields.get("maxRange").set(WeaponType.Hellfire_Missile_Pack, 160);
        fields.get("innerSplashRadius").set(WeaponType.Hellfire_Missile_Pack, 0);
        fields.get("medianSplashRadius").set(WeaponType.Hellfire_Missile_Pack, 0);
        fields.get("outerSplashRadius").set(WeaponType.Hellfire_Missile_Pack, 0);
        fields.get("targetsAir").set(WeaponType.Hellfire_Missile_Pack, true);
        fields.get("targetsGround").set(WeaponType.Hellfire_Missile_Pack, false);
        fields.get("targetsMechanical").set(WeaponType.Hellfire_Missile_Pack, false);
        fields.get("targetsOrganic").set(WeaponType.Hellfire_Missile_Pack, false);
        fields.get("targetsNonBuilding").set(WeaponType.Hellfire_Missile_Pack, false);
        fields.get("targetsNonRobotic").set(WeaponType.Hellfire_Missile_Pack, false);
        fields.get("targetsTerrain").set(WeaponType.Hellfire_Missile_Pack, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Hellfire_Missile_Pack, false);
        fields.get("targetsOwn").set(WeaponType.Hellfire_Missile_Pack, false);
    }
    private void initializeWeaponType_Twin_Autocannons_Alan_Schezar() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Twin_Autocannons_Alan_Schezar, 9);
        fields.get("tech").set(WeaponType.Twin_Autocannons_Alan_Schezar, TechType.None);
        fields.get("whatUses").set(WeaponType.Twin_Autocannons_Alan_Schezar, UnitType.Hero_Alan_Schezar);
        fields.get("damageAmount").set(WeaponType.Twin_Autocannons_Alan_Schezar, 24);
        fields.get("damageBonus").set(WeaponType.Twin_Autocannons_Alan_Schezar, 1);
        fields.get("damageCooldown").set(WeaponType.Twin_Autocannons_Alan_Schezar, 22);
        fields.get("damageFactor").set(WeaponType.Twin_Autocannons_Alan_Schezar, 1);
        fields.get("upgradeType").set(WeaponType.Twin_Autocannons_Alan_Schezar, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Twin_Autocannons_Alan_Schezar, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Twin_Autocannons_Alan_Schezar, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Twin_Autocannons_Alan_Schezar, 0);
        fields.get("maxRange").set(WeaponType.Twin_Autocannons_Alan_Schezar, 160);
        fields.get("innerSplashRadius").set(WeaponType.Twin_Autocannons_Alan_Schezar, 0);
        fields.get("medianSplashRadius").set(WeaponType.Twin_Autocannons_Alan_Schezar, 0);
        fields.get("outerSplashRadius").set(WeaponType.Twin_Autocannons_Alan_Schezar, 0);
        fields.get("targetsAir").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
        fields.get("targetsGround").set(WeaponType.Twin_Autocannons_Alan_Schezar, true);
        fields.get("targetsMechanical").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
        fields.get("targetsOrganic").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
        fields.get("targetsNonBuilding").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
        fields.get("targetsNonRobotic").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
        fields.get("targetsTerrain").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
        fields.get("targetsOwn").set(WeaponType.Twin_Autocannons_Alan_Schezar, false);
    }
    private void initializeWeaponType_Hellfire_Missile_Pack_Alan_Schezar() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 10);
        fields.get("tech").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, TechType.None);
        fields.get("whatUses").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, UnitType.Hero_Alan_Schezar);
        fields.get("damageAmount").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 20);
        fields.get("damageBonus").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 1);
        fields.get("damageCooldown").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 22);
        fields.get("damageFactor").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 2);
        fields.get("upgradeType").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 0);
        fields.get("maxRange").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 160);
        fields.get("innerSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 0);
        fields.get("medianSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 0);
        fields.get("outerSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, 0);
        fields.get("targetsAir").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, true);
        fields.get("targetsGround").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
        fields.get("targetsMechanical").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
        fields.get("targetsOrganic").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
        fields.get("targetsNonBuilding").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
        fields.get("targetsNonRobotic").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
        fields.get("targetsTerrain").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
        fields.get("targetsOwn").set(WeaponType.Hellfire_Missile_Pack_Alan_Schezar, false);
    }
    private void initializeWeaponType_Arclite_Cannon() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Arclite_Cannon, 11);
        fields.get("tech").set(WeaponType.Arclite_Cannon, TechType.None);
        fields.get("whatUses").set(WeaponType.Arclite_Cannon, UnitType.Terran_Siege_Tank_Tank_Mode);
        fields.get("damageAmount").set(WeaponType.Arclite_Cannon, 30);
        fields.get("damageBonus").set(WeaponType.Arclite_Cannon, 3);
        fields.get("damageCooldown").set(WeaponType.Arclite_Cannon, 37);
        fields.get("damageFactor").set(WeaponType.Arclite_Cannon, 1);
        fields.get("upgradeType").set(WeaponType.Arclite_Cannon, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Arclite_Cannon, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Arclite_Cannon, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Arclite_Cannon, 0);
        fields.get("maxRange").set(WeaponType.Arclite_Cannon, 224);
        fields.get("innerSplashRadius").set(WeaponType.Arclite_Cannon, 0);
        fields.get("medianSplashRadius").set(WeaponType.Arclite_Cannon, 0);
        fields.get("outerSplashRadius").set(WeaponType.Arclite_Cannon, 0);
        fields.get("targetsAir").set(WeaponType.Arclite_Cannon, false);
        fields.get("targetsGround").set(WeaponType.Arclite_Cannon, true);
        fields.get("targetsMechanical").set(WeaponType.Arclite_Cannon, false);
        fields.get("targetsOrganic").set(WeaponType.Arclite_Cannon, false);
        fields.get("targetsNonBuilding").set(WeaponType.Arclite_Cannon, false);
        fields.get("targetsNonRobotic").set(WeaponType.Arclite_Cannon, false);
        fields.get("targetsTerrain").set(WeaponType.Arclite_Cannon, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Arclite_Cannon, false);
        fields.get("targetsOwn").set(WeaponType.Arclite_Cannon, false);
    }
    private void initializeWeaponType_Arclite_Cannon_Edmund_Duke() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Arclite_Cannon_Edmund_Duke, 12);
        fields.get("tech").set(WeaponType.Arclite_Cannon_Edmund_Duke, TechType.None);
        fields.get("whatUses").set(WeaponType.Arclite_Cannon_Edmund_Duke, UnitType.Hero_Edmund_Duke_Tank_Mode);
        fields.get("damageAmount").set(WeaponType.Arclite_Cannon_Edmund_Duke, 70);
        fields.get("damageBonus").set(WeaponType.Arclite_Cannon_Edmund_Duke, 3);
        fields.get("damageCooldown").set(WeaponType.Arclite_Cannon_Edmund_Duke, 37);
        fields.get("damageFactor").set(WeaponType.Arclite_Cannon_Edmund_Duke, 1);
        fields.get("upgradeType").set(WeaponType.Arclite_Cannon_Edmund_Duke, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Arclite_Cannon_Edmund_Duke, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Arclite_Cannon_Edmund_Duke, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Arclite_Cannon_Edmund_Duke, 0);
        fields.get("maxRange").set(WeaponType.Arclite_Cannon_Edmund_Duke, 224);
        fields.get("innerSplashRadius").set(WeaponType.Arclite_Cannon_Edmund_Duke, 0);
        fields.get("medianSplashRadius").set(WeaponType.Arclite_Cannon_Edmund_Duke, 0);
        fields.get("outerSplashRadius").set(WeaponType.Arclite_Cannon_Edmund_Duke, 0);
        fields.get("targetsAir").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
        fields.get("targetsGround").set(WeaponType.Arclite_Cannon_Edmund_Duke, true);
        fields.get("targetsMechanical").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
        fields.get("targetsOrganic").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
        fields.get("targetsNonBuilding").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
        fields.get("targetsNonRobotic").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
        fields.get("targetsTerrain").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
        fields.get("targetsOwn").set(WeaponType.Arclite_Cannon_Edmund_Duke, false);
    }
    private void initializeWeaponType_Fusion_Cutter() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Fusion_Cutter, 13);
        fields.get("tech").set(WeaponType.Fusion_Cutter, TechType.None);
        fields.get("whatUses").set(WeaponType.Fusion_Cutter, UnitType.Terran_SCV);
        fields.get("damageAmount").set(WeaponType.Fusion_Cutter, 5);
        fields.get("damageBonus").set(WeaponType.Fusion_Cutter, 1);
        fields.get("damageCooldown").set(WeaponType.Fusion_Cutter, 15);
        fields.get("damageFactor").set(WeaponType.Fusion_Cutter, 1);
        fields.get("upgradeType").set(WeaponType.Fusion_Cutter, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Fusion_Cutter, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Fusion_Cutter, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Fusion_Cutter, 0);
        fields.get("maxRange").set(WeaponType.Fusion_Cutter, 10);
        fields.get("innerSplashRadius").set(WeaponType.Fusion_Cutter, 0);
        fields.get("medianSplashRadius").set(WeaponType.Fusion_Cutter, 0);
        fields.get("outerSplashRadius").set(WeaponType.Fusion_Cutter, 0);
        fields.get("targetsAir").set(WeaponType.Fusion_Cutter, false);
        fields.get("targetsGround").set(WeaponType.Fusion_Cutter, true);
        fields.get("targetsMechanical").set(WeaponType.Fusion_Cutter, false);
        fields.get("targetsOrganic").set(WeaponType.Fusion_Cutter, false);
        fields.get("targetsNonBuilding").set(WeaponType.Fusion_Cutter, false);
        fields.get("targetsNonRobotic").set(WeaponType.Fusion_Cutter, false);
        fields.get("targetsTerrain").set(WeaponType.Fusion_Cutter, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Fusion_Cutter, false);
        fields.get("targetsOwn").set(WeaponType.Fusion_Cutter, false);
    }
    private void initializeWeaponType_Gemini_Missiles() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Gemini_Missiles, 15);
        fields.get("tech").set(WeaponType.Gemini_Missiles, TechType.None);
        fields.get("whatUses").set(WeaponType.Gemini_Missiles, UnitType.Terran_Wraith);
        fields.get("damageAmount").set(WeaponType.Gemini_Missiles, 20);
        fields.get("damageBonus").set(WeaponType.Gemini_Missiles, 2);
        fields.get("damageCooldown").set(WeaponType.Gemini_Missiles, 22);
        fields.get("damageFactor").set(WeaponType.Gemini_Missiles, 1);
        fields.get("upgradeType").set(WeaponType.Gemini_Missiles, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.Gemini_Missiles, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Gemini_Missiles, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Gemini_Missiles, 0);
        fields.get("maxRange").set(WeaponType.Gemini_Missiles, 160);
        fields.get("innerSplashRadius").set(WeaponType.Gemini_Missiles, 0);
        fields.get("medianSplashRadius").set(WeaponType.Gemini_Missiles, 0);
        fields.get("outerSplashRadius").set(WeaponType.Gemini_Missiles, 0);
        fields.get("targetsAir").set(WeaponType.Gemini_Missiles, true);
        fields.get("targetsGround").set(WeaponType.Gemini_Missiles, false);
        fields.get("targetsMechanical").set(WeaponType.Gemini_Missiles, false);
        fields.get("targetsOrganic").set(WeaponType.Gemini_Missiles, false);
        fields.get("targetsNonBuilding").set(WeaponType.Gemini_Missiles, false);
        fields.get("targetsNonRobotic").set(WeaponType.Gemini_Missiles, false);
        fields.get("targetsTerrain").set(WeaponType.Gemini_Missiles, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Gemini_Missiles, false);
        fields.get("targetsOwn").set(WeaponType.Gemini_Missiles, false);
    }
    private void initializeWeaponType_Burst_Lasers() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Burst_Lasers, 16);
        fields.get("tech").set(WeaponType.Burst_Lasers, TechType.None);
        fields.get("whatUses").set(WeaponType.Burst_Lasers, UnitType.Terran_Wraith);
        fields.get("damageAmount").set(WeaponType.Burst_Lasers, 8);
        fields.get("damageBonus").set(WeaponType.Burst_Lasers, 1);
        fields.get("damageCooldown").set(WeaponType.Burst_Lasers, 30);
        fields.get("damageFactor").set(WeaponType.Burst_Lasers, 1);
        fields.get("upgradeType").set(WeaponType.Burst_Lasers, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.Burst_Lasers, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Burst_Lasers, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Burst_Lasers, 0);
        fields.get("maxRange").set(WeaponType.Burst_Lasers, 160);
        fields.get("innerSplashRadius").set(WeaponType.Burst_Lasers, 0);
        fields.get("medianSplashRadius").set(WeaponType.Burst_Lasers, 0);
        fields.get("outerSplashRadius").set(WeaponType.Burst_Lasers, 0);
        fields.get("targetsAir").set(WeaponType.Burst_Lasers, false);
        fields.get("targetsGround").set(WeaponType.Burst_Lasers, true);
        fields.get("targetsMechanical").set(WeaponType.Burst_Lasers, false);
        fields.get("targetsOrganic").set(WeaponType.Burst_Lasers, false);
        fields.get("targetsNonBuilding").set(WeaponType.Burst_Lasers, false);
        fields.get("targetsNonRobotic").set(WeaponType.Burst_Lasers, false);
        fields.get("targetsTerrain").set(WeaponType.Burst_Lasers, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Burst_Lasers, false);
        fields.get("targetsOwn").set(WeaponType.Burst_Lasers, false);
    }
    private void initializeWeaponType_Gemini_Missiles_Tom_Kazansky() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 17);
        fields.get("tech").set(WeaponType.Gemini_Missiles_Tom_Kazansky, TechType.None);
        fields.get("whatUses").set(WeaponType.Gemini_Missiles_Tom_Kazansky, UnitType.Hero_Tom_Kazansky);
        fields.get("damageAmount").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 40);
        fields.get("damageBonus").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 2);
        fields.get("damageCooldown").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 22);
        fields.get("damageFactor").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 1);
        fields.get("upgradeType").set(WeaponType.Gemini_Missiles_Tom_Kazansky, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.Gemini_Missiles_Tom_Kazansky, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Gemini_Missiles_Tom_Kazansky, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 0);
        fields.get("maxRange").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 160);
        fields.get("innerSplashRadius").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 0);
        fields.get("medianSplashRadius").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 0);
        fields.get("outerSplashRadius").set(WeaponType.Gemini_Missiles_Tom_Kazansky, 0);
        fields.get("targetsAir").set(WeaponType.Gemini_Missiles_Tom_Kazansky, true);
        fields.get("targetsGround").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
        fields.get("targetsMechanical").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
        fields.get("targetsOrganic").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
        fields.get("targetsNonBuilding").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
        fields.get("targetsNonRobotic").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
        fields.get("targetsTerrain").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
        fields.get("targetsOwn").set(WeaponType.Gemini_Missiles_Tom_Kazansky, false);
    }
    private void initializeWeaponType_Burst_Lasers_Tom_Kazansky() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Burst_Lasers_Tom_Kazansky, 18);
        fields.get("tech").set(WeaponType.Burst_Lasers_Tom_Kazansky, TechType.None);
        fields.get("whatUses").set(WeaponType.Burst_Lasers_Tom_Kazansky, UnitType.Hero_Tom_Kazansky);
        fields.get("damageAmount").set(WeaponType.Burst_Lasers_Tom_Kazansky, 16);
        fields.get("damageBonus").set(WeaponType.Burst_Lasers_Tom_Kazansky, 1);
        fields.get("damageCooldown").set(WeaponType.Burst_Lasers_Tom_Kazansky, 30);
        fields.get("damageFactor").set(WeaponType.Burst_Lasers_Tom_Kazansky, 1);
        fields.get("upgradeType").set(WeaponType.Burst_Lasers_Tom_Kazansky, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.Burst_Lasers_Tom_Kazansky, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Burst_Lasers_Tom_Kazansky, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Burst_Lasers_Tom_Kazansky, 0);
        fields.get("maxRange").set(WeaponType.Burst_Lasers_Tom_Kazansky, 160);
        fields.get("innerSplashRadius").set(WeaponType.Burst_Lasers_Tom_Kazansky, 0);
        fields.get("medianSplashRadius").set(WeaponType.Burst_Lasers_Tom_Kazansky, 0);
        fields.get("outerSplashRadius").set(WeaponType.Burst_Lasers_Tom_Kazansky, 0);
        fields.get("targetsAir").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
        fields.get("targetsGround").set(WeaponType.Burst_Lasers_Tom_Kazansky, true);
        fields.get("targetsMechanical").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
        fields.get("targetsOrganic").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
        fields.get("targetsNonBuilding").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
        fields.get("targetsNonRobotic").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
        fields.get("targetsTerrain").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
        fields.get("targetsOwn").set(WeaponType.Burst_Lasers_Tom_Kazansky, false);
    }
    private void initializeWeaponType_ATS_Laser_Battery() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.ATS_Laser_Battery, 19);
        fields.get("tech").set(WeaponType.ATS_Laser_Battery, TechType.None);
        fields.get("whatUses").set(WeaponType.ATS_Laser_Battery, UnitType.Terran_Battlecruiser);
        fields.get("damageAmount").set(WeaponType.ATS_Laser_Battery, 25);
        fields.get("damageBonus").set(WeaponType.ATS_Laser_Battery, 3);
        fields.get("damageCooldown").set(WeaponType.ATS_Laser_Battery, 30);
        fields.get("damageFactor").set(WeaponType.ATS_Laser_Battery, 1);
        fields.get("upgradeType").set(WeaponType.ATS_Laser_Battery, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.ATS_Laser_Battery, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.ATS_Laser_Battery, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.ATS_Laser_Battery, 0);
        fields.get("maxRange").set(WeaponType.ATS_Laser_Battery, 192);
        fields.get("innerSplashRadius").set(WeaponType.ATS_Laser_Battery, 0);
        fields.get("medianSplashRadius").set(WeaponType.ATS_Laser_Battery, 0);
        fields.get("outerSplashRadius").set(WeaponType.ATS_Laser_Battery, 0);
        fields.get("targetsAir").set(WeaponType.ATS_Laser_Battery, false);
        fields.get("targetsGround").set(WeaponType.ATS_Laser_Battery, true);
        fields.get("targetsMechanical").set(WeaponType.ATS_Laser_Battery, false);
        fields.get("targetsOrganic").set(WeaponType.ATS_Laser_Battery, false);
        fields.get("targetsNonBuilding").set(WeaponType.ATS_Laser_Battery, false);
        fields.get("targetsNonRobotic").set(WeaponType.ATS_Laser_Battery, false);
        fields.get("targetsTerrain").set(WeaponType.ATS_Laser_Battery, false);
        fields.get("targetsOrgOrMech").set(WeaponType.ATS_Laser_Battery, false);
        fields.get("targetsOwn").set(WeaponType.ATS_Laser_Battery, false);
    }
    private void initializeWeaponType_ATA_Laser_Battery() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.ATA_Laser_Battery, 20);
        fields.get("tech").set(WeaponType.ATA_Laser_Battery, TechType.None);
        fields.get("whatUses").set(WeaponType.ATA_Laser_Battery, UnitType.Terran_Battlecruiser);
        fields.get("damageAmount").set(WeaponType.ATA_Laser_Battery, 25);
        fields.get("damageBonus").set(WeaponType.ATA_Laser_Battery, 3);
        fields.get("damageCooldown").set(WeaponType.ATA_Laser_Battery, 30);
        fields.get("damageFactor").set(WeaponType.ATA_Laser_Battery, 1);
        fields.get("upgradeType").set(WeaponType.ATA_Laser_Battery, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.ATA_Laser_Battery, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.ATA_Laser_Battery, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.ATA_Laser_Battery, 0);
        fields.get("maxRange").set(WeaponType.ATA_Laser_Battery, 192);
        fields.get("innerSplashRadius").set(WeaponType.ATA_Laser_Battery, 0);
        fields.get("medianSplashRadius").set(WeaponType.ATA_Laser_Battery, 0);
        fields.get("outerSplashRadius").set(WeaponType.ATA_Laser_Battery, 0);
        fields.get("targetsAir").set(WeaponType.ATA_Laser_Battery, true);
        fields.get("targetsGround").set(WeaponType.ATA_Laser_Battery, false);
        fields.get("targetsMechanical").set(WeaponType.ATA_Laser_Battery, false);
        fields.get("targetsOrganic").set(WeaponType.ATA_Laser_Battery, false);
        fields.get("targetsNonBuilding").set(WeaponType.ATA_Laser_Battery, false);
        fields.get("targetsNonRobotic").set(WeaponType.ATA_Laser_Battery, false);
        fields.get("targetsTerrain").set(WeaponType.ATA_Laser_Battery, false);
        fields.get("targetsOrgOrMech").set(WeaponType.ATA_Laser_Battery, false);
        fields.get("targetsOwn").set(WeaponType.ATA_Laser_Battery, false);
    }
    private void initializeWeaponType_ATS_Laser_Battery_Hero() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.ATS_Laser_Battery_Hero, 21);
        fields.get("tech").set(WeaponType.ATS_Laser_Battery_Hero, TechType.None);
        fields.get("whatUses").set(WeaponType.ATS_Laser_Battery_Hero, UnitType.Hero_Norad_II);
        fields.get("damageAmount").set(WeaponType.ATS_Laser_Battery_Hero, 50);
        fields.get("damageBonus").set(WeaponType.ATS_Laser_Battery_Hero, 3);
        fields.get("damageCooldown").set(WeaponType.ATS_Laser_Battery_Hero, 30);
        fields.get("damageFactor").set(WeaponType.ATS_Laser_Battery_Hero, 1);
        fields.get("upgradeType").set(WeaponType.ATS_Laser_Battery_Hero, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.ATS_Laser_Battery_Hero, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.ATS_Laser_Battery_Hero, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.ATS_Laser_Battery_Hero, 0);
        fields.get("maxRange").set(WeaponType.ATS_Laser_Battery_Hero, 192);
        fields.get("innerSplashRadius").set(WeaponType.ATS_Laser_Battery_Hero, 0);
        fields.get("medianSplashRadius").set(WeaponType.ATS_Laser_Battery_Hero, 0);
        fields.get("outerSplashRadius").set(WeaponType.ATS_Laser_Battery_Hero, 0);
        fields.get("targetsAir").set(WeaponType.ATS_Laser_Battery_Hero, false);
        fields.get("targetsGround").set(WeaponType.ATS_Laser_Battery_Hero, true);
        fields.get("targetsMechanical").set(WeaponType.ATS_Laser_Battery_Hero, false);
        fields.get("targetsOrganic").set(WeaponType.ATS_Laser_Battery_Hero, false);
        fields.get("targetsNonBuilding").set(WeaponType.ATS_Laser_Battery_Hero, false);
        fields.get("targetsNonRobotic").set(WeaponType.ATS_Laser_Battery_Hero, false);
        fields.get("targetsTerrain").set(WeaponType.ATS_Laser_Battery_Hero, false);
        fields.get("targetsOrgOrMech").set(WeaponType.ATS_Laser_Battery_Hero, false);
        fields.get("targetsOwn").set(WeaponType.ATS_Laser_Battery_Hero, false);
    }
    private void initializeWeaponType_ATA_Laser_Battery_Hero() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.ATA_Laser_Battery_Hero, 22);
        fields.get("tech").set(WeaponType.ATA_Laser_Battery_Hero, TechType.None);
        fields.get("whatUses").set(WeaponType.ATA_Laser_Battery_Hero, UnitType.Hero_Norad_II);
        fields.get("damageAmount").set(WeaponType.ATA_Laser_Battery_Hero, 50);
        fields.get("damageBonus").set(WeaponType.ATA_Laser_Battery_Hero, 3);
        fields.get("damageCooldown").set(WeaponType.ATA_Laser_Battery_Hero, 30);
        fields.get("damageFactor").set(WeaponType.ATA_Laser_Battery_Hero, 1);
        fields.get("upgradeType").set(WeaponType.ATA_Laser_Battery_Hero, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.ATA_Laser_Battery_Hero, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.ATA_Laser_Battery_Hero, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.ATA_Laser_Battery_Hero, 0);
        fields.get("maxRange").set(WeaponType.ATA_Laser_Battery_Hero, 192);
        fields.get("innerSplashRadius").set(WeaponType.ATA_Laser_Battery_Hero, 0);
        fields.get("medianSplashRadius").set(WeaponType.ATA_Laser_Battery_Hero, 0);
        fields.get("outerSplashRadius").set(WeaponType.ATA_Laser_Battery_Hero, 0);
        fields.get("targetsAir").set(WeaponType.ATA_Laser_Battery_Hero, true);
        fields.get("targetsGround").set(WeaponType.ATA_Laser_Battery_Hero, false);
        fields.get("targetsMechanical").set(WeaponType.ATA_Laser_Battery_Hero, false);
        fields.get("targetsOrganic").set(WeaponType.ATA_Laser_Battery_Hero, false);
        fields.get("targetsNonBuilding").set(WeaponType.ATA_Laser_Battery_Hero, false);
        fields.get("targetsNonRobotic").set(WeaponType.ATA_Laser_Battery_Hero, false);
        fields.get("targetsTerrain").set(WeaponType.ATA_Laser_Battery_Hero, false);
        fields.get("targetsOrgOrMech").set(WeaponType.ATA_Laser_Battery_Hero, false);
        fields.get("targetsOwn").set(WeaponType.ATA_Laser_Battery_Hero, false);
    }
    private void initializeWeaponType_ATS_Laser_Battery_Hyperion() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.ATS_Laser_Battery_Hyperion, 23);
        fields.get("tech").set(WeaponType.ATS_Laser_Battery_Hyperion, TechType.None);
        fields.get("whatUses").set(WeaponType.ATS_Laser_Battery_Hyperion, UnitType.Hero_Hyperion);
        fields.get("damageAmount").set(WeaponType.ATS_Laser_Battery_Hyperion, 30);
        fields.get("damageBonus").set(WeaponType.ATS_Laser_Battery_Hyperion, 3);
        fields.get("damageCooldown").set(WeaponType.ATS_Laser_Battery_Hyperion, 22);
        fields.get("damageFactor").set(WeaponType.ATS_Laser_Battery_Hyperion, 1);
        fields.get("upgradeType").set(WeaponType.ATS_Laser_Battery_Hyperion, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.ATS_Laser_Battery_Hyperion, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.ATS_Laser_Battery_Hyperion, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.ATS_Laser_Battery_Hyperion, 0);
        fields.get("maxRange").set(WeaponType.ATS_Laser_Battery_Hyperion, 192);
        fields.get("innerSplashRadius").set(WeaponType.ATS_Laser_Battery_Hyperion, 0);
        fields.get("medianSplashRadius").set(WeaponType.ATS_Laser_Battery_Hyperion, 0);
        fields.get("outerSplashRadius").set(WeaponType.ATS_Laser_Battery_Hyperion, 0);
        fields.get("targetsAir").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
        fields.get("targetsGround").set(WeaponType.ATS_Laser_Battery_Hyperion, true);
        fields.get("targetsMechanical").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
        fields.get("targetsOrganic").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
        fields.get("targetsNonBuilding").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
        fields.get("targetsNonRobotic").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
        fields.get("targetsTerrain").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
        fields.get("targetsOrgOrMech").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
        fields.get("targetsOwn").set(WeaponType.ATS_Laser_Battery_Hyperion, false);
    }
    private void initializeWeaponType_ATA_Laser_Battery_Hyperion() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.ATA_Laser_Battery_Hyperion, 24);
        fields.get("tech").set(WeaponType.ATA_Laser_Battery_Hyperion, TechType.None);
        fields.get("whatUses").set(WeaponType.ATA_Laser_Battery_Hyperion, UnitType.Hero_Hyperion);
        fields.get("damageAmount").set(WeaponType.ATA_Laser_Battery_Hyperion, 30);
        fields.get("damageBonus").set(WeaponType.ATA_Laser_Battery_Hyperion, 3);
        fields.get("damageCooldown").set(WeaponType.ATA_Laser_Battery_Hyperion, 22);
        fields.get("damageFactor").set(WeaponType.ATA_Laser_Battery_Hyperion, 1);
        fields.get("upgradeType").set(WeaponType.ATA_Laser_Battery_Hyperion, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.ATA_Laser_Battery_Hyperion, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.ATA_Laser_Battery_Hyperion, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.ATA_Laser_Battery_Hyperion, 0);
        fields.get("maxRange").set(WeaponType.ATA_Laser_Battery_Hyperion, 192);
        fields.get("innerSplashRadius").set(WeaponType.ATA_Laser_Battery_Hyperion, 0);
        fields.get("medianSplashRadius").set(WeaponType.ATA_Laser_Battery_Hyperion, 0);
        fields.get("outerSplashRadius").set(WeaponType.ATA_Laser_Battery_Hyperion, 0);
        fields.get("targetsAir").set(WeaponType.ATA_Laser_Battery_Hyperion, true);
        fields.get("targetsGround").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
        fields.get("targetsMechanical").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
        fields.get("targetsOrganic").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
        fields.get("targetsNonBuilding").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
        fields.get("targetsNonRobotic").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
        fields.get("targetsTerrain").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
        fields.get("targetsOrgOrMech").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
        fields.get("targetsOwn").set(WeaponType.ATA_Laser_Battery_Hyperion, false);
    }
    private void initializeWeaponType_Flame_Thrower() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Flame_Thrower, 25);
        fields.get("tech").set(WeaponType.Flame_Thrower, TechType.None);
        fields.get("whatUses").set(WeaponType.Flame_Thrower, UnitType.Terran_Firebat);
        fields.get("damageAmount").set(WeaponType.Flame_Thrower, 8);
        fields.get("damageBonus").set(WeaponType.Flame_Thrower, 1);
        fields.get("damageCooldown").set(WeaponType.Flame_Thrower, 22);
        fields.get("damageFactor").set(WeaponType.Flame_Thrower, 1);
        fields.get("upgradeType").set(WeaponType.Flame_Thrower, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.Flame_Thrower, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.Flame_Thrower, ExplosionType.Enemy_Splash);
        fields.get("minRange").set(WeaponType.Flame_Thrower, 0);
        fields.get("maxRange").set(WeaponType.Flame_Thrower, 32);
        fields.get("innerSplashRadius").set(WeaponType.Flame_Thrower, 15);
        fields.get("medianSplashRadius").set(WeaponType.Flame_Thrower, 20);
        fields.get("outerSplashRadius").set(WeaponType.Flame_Thrower, 25);
        fields.get("targetsAir").set(WeaponType.Flame_Thrower, false);
        fields.get("targetsGround").set(WeaponType.Flame_Thrower, true);
        fields.get("targetsMechanical").set(WeaponType.Flame_Thrower, false);
        fields.get("targetsOrganic").set(WeaponType.Flame_Thrower, false);
        fields.get("targetsNonBuilding").set(WeaponType.Flame_Thrower, false);
        fields.get("targetsNonRobotic").set(WeaponType.Flame_Thrower, false);
        fields.get("targetsTerrain").set(WeaponType.Flame_Thrower, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Flame_Thrower, false);
        fields.get("targetsOwn").set(WeaponType.Flame_Thrower, false);
    }
    private void initializeWeaponType_Flame_Thrower_Gui_Montag() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Flame_Thrower_Gui_Montag, 26);
        fields.get("tech").set(WeaponType.Flame_Thrower_Gui_Montag, TechType.None);
        fields.get("whatUses").set(WeaponType.Flame_Thrower_Gui_Montag, UnitType.Hero_Gui_Montag);
        fields.get("damageAmount").set(WeaponType.Flame_Thrower_Gui_Montag, 16);
        fields.get("damageBonus").set(WeaponType.Flame_Thrower_Gui_Montag, 1);
        fields.get("damageCooldown").set(WeaponType.Flame_Thrower_Gui_Montag, 22);
        fields.get("damageFactor").set(WeaponType.Flame_Thrower_Gui_Montag, 1);
        fields.get("upgradeType").set(WeaponType.Flame_Thrower_Gui_Montag, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.Flame_Thrower_Gui_Montag, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.Flame_Thrower_Gui_Montag, ExplosionType.Enemy_Splash);
        fields.get("minRange").set(WeaponType.Flame_Thrower_Gui_Montag, 0);
        fields.get("maxRange").set(WeaponType.Flame_Thrower_Gui_Montag, 32);
        fields.get("innerSplashRadius").set(WeaponType.Flame_Thrower_Gui_Montag, 15);
        fields.get("medianSplashRadius").set(WeaponType.Flame_Thrower_Gui_Montag, 20);
        fields.get("outerSplashRadius").set(WeaponType.Flame_Thrower_Gui_Montag, 25);
        fields.get("targetsAir").set(WeaponType.Flame_Thrower_Gui_Montag, false);
        fields.get("targetsGround").set(WeaponType.Flame_Thrower_Gui_Montag, true);
        fields.get("targetsMechanical").set(WeaponType.Flame_Thrower_Gui_Montag, false);
        fields.get("targetsOrganic").set(WeaponType.Flame_Thrower_Gui_Montag, false);
        fields.get("targetsNonBuilding").set(WeaponType.Flame_Thrower_Gui_Montag, false);
        fields.get("targetsNonRobotic").set(WeaponType.Flame_Thrower_Gui_Montag, false);
        fields.get("targetsTerrain").set(WeaponType.Flame_Thrower_Gui_Montag, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Flame_Thrower_Gui_Montag, false);
        fields.get("targetsOwn").set(WeaponType.Flame_Thrower_Gui_Montag, false);
    }
    private void initializeWeaponType_Arclite_Shock_Cannon() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Arclite_Shock_Cannon, 27);
        fields.get("tech").set(WeaponType.Arclite_Shock_Cannon, TechType.None);
        fields.get("whatUses").set(WeaponType.Arclite_Shock_Cannon, UnitType.Terran_Siege_Tank_Siege_Mode);
        fields.get("damageAmount").set(WeaponType.Arclite_Shock_Cannon, 70);
        fields.get("damageBonus").set(WeaponType.Arclite_Shock_Cannon, 5);
        fields.get("damageCooldown").set(WeaponType.Arclite_Shock_Cannon, 75);
        fields.get("damageFactor").set(WeaponType.Arclite_Shock_Cannon, 1);
        fields.get("upgradeType").set(WeaponType.Arclite_Shock_Cannon, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Arclite_Shock_Cannon, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Arclite_Shock_Cannon, ExplosionType.Radial_Splash);
        fields.get("minRange").set(WeaponType.Arclite_Shock_Cannon, 64);
        fields.get("maxRange").set(WeaponType.Arclite_Shock_Cannon, 384);
        fields.get("innerSplashRadius").set(WeaponType.Arclite_Shock_Cannon, 10);
        fields.get("medianSplashRadius").set(WeaponType.Arclite_Shock_Cannon, 25);
        fields.get("outerSplashRadius").set(WeaponType.Arclite_Shock_Cannon, 40);
        fields.get("targetsAir").set(WeaponType.Arclite_Shock_Cannon, false);
        fields.get("targetsGround").set(WeaponType.Arclite_Shock_Cannon, true);
        fields.get("targetsMechanical").set(WeaponType.Arclite_Shock_Cannon, false);
        fields.get("targetsOrganic").set(WeaponType.Arclite_Shock_Cannon, false);
        fields.get("targetsNonBuilding").set(WeaponType.Arclite_Shock_Cannon, false);
        fields.get("targetsNonRobotic").set(WeaponType.Arclite_Shock_Cannon, false);
        fields.get("targetsTerrain").set(WeaponType.Arclite_Shock_Cannon, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Arclite_Shock_Cannon, false);
        fields.get("targetsOwn").set(WeaponType.Arclite_Shock_Cannon, false);
    }
    private void initializeWeaponType_Arclite_Shock_Cannon_Edmund_Duke() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 28);
        fields.get("tech").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, TechType.None);
        fields.get("whatUses").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, UnitType.Hero_Edmund_Duke_Siege_Mode);
        fields.get("damageAmount").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 150);
        fields.get("damageBonus").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 5);
        fields.get("damageCooldown").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 75);
        fields.get("damageFactor").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 1);
        fields.get("upgradeType").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, ExplosionType.Radial_Splash);
        fields.get("minRange").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 64);
        fields.get("maxRange").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 384);
        fields.get("innerSplashRadius").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 10);
        fields.get("medianSplashRadius").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 25);
        fields.get("outerSplashRadius").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, 40);
        fields.get("targetsAir").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
        fields.get("targetsGround").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, true);
        fields.get("targetsMechanical").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
        fields.get("targetsOrganic").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
        fields.get("targetsNonBuilding").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
        fields.get("targetsNonRobotic").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
        fields.get("targetsTerrain").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
        fields.get("targetsOwn").set(WeaponType.Arclite_Shock_Cannon_Edmund_Duke, false);
    }
    private void initializeWeaponType_Longbolt_Missile() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Longbolt_Missile, 29);
        fields.get("tech").set(WeaponType.Longbolt_Missile, TechType.None);
        fields.get("whatUses").set(WeaponType.Longbolt_Missile, UnitType.Terran_Missile_Turret);
        fields.get("damageAmount").set(WeaponType.Longbolt_Missile, 20);
        fields.get("damageBonus").set(WeaponType.Longbolt_Missile, 0);
        fields.get("damageCooldown").set(WeaponType.Longbolt_Missile, 15);
        fields.get("damageFactor").set(WeaponType.Longbolt_Missile, 1);
        fields.get("upgradeType").set(WeaponType.Longbolt_Missile, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Longbolt_Missile, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Longbolt_Missile, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Longbolt_Missile, 0);
        fields.get("maxRange").set(WeaponType.Longbolt_Missile, 224);
        fields.get("innerSplashRadius").set(WeaponType.Longbolt_Missile, 0);
        fields.get("medianSplashRadius").set(WeaponType.Longbolt_Missile, 0);
        fields.get("outerSplashRadius").set(WeaponType.Longbolt_Missile, 0);
        fields.get("targetsAir").set(WeaponType.Longbolt_Missile, true);
        fields.get("targetsGround").set(WeaponType.Longbolt_Missile, false);
        fields.get("targetsMechanical").set(WeaponType.Longbolt_Missile, false);
        fields.get("targetsOrganic").set(WeaponType.Longbolt_Missile, false);
        fields.get("targetsNonBuilding").set(WeaponType.Longbolt_Missile, false);
        fields.get("targetsNonRobotic").set(WeaponType.Longbolt_Missile, false);
        fields.get("targetsTerrain").set(WeaponType.Longbolt_Missile, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Longbolt_Missile, false);
        fields.get("targetsOwn").set(WeaponType.Longbolt_Missile, false);
    }
    private void initializeWeaponType_Yamato_Gun() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Yamato_Gun, 30);
        fields.get("tech").set(WeaponType.Yamato_Gun, TechType.Yamato_Gun);
        fields.get("whatUses").set(WeaponType.Yamato_Gun, UnitType.Terran_Battlecruiser);
        fields.get("damageAmount").set(WeaponType.Yamato_Gun, 260);
        fields.get("damageBonus").set(WeaponType.Yamato_Gun, 0);
        fields.get("damageCooldown").set(WeaponType.Yamato_Gun, 15);
        fields.get("damageFactor").set(WeaponType.Yamato_Gun, 1);
        fields.get("upgradeType").set(WeaponType.Yamato_Gun, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Yamato_Gun, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Yamato_Gun, ExplosionType.Yamato_Gun);
        fields.get("minRange").set(WeaponType.Yamato_Gun, 0);
        fields.get("maxRange").set(WeaponType.Yamato_Gun, 320);
        fields.get("innerSplashRadius").set(WeaponType.Yamato_Gun, 0);
        fields.get("medianSplashRadius").set(WeaponType.Yamato_Gun, 0);
        fields.get("outerSplashRadius").set(WeaponType.Yamato_Gun, 0);
        fields.get("targetsAir").set(WeaponType.Yamato_Gun, true);
        fields.get("targetsGround").set(WeaponType.Yamato_Gun, true);
        fields.get("targetsMechanical").set(WeaponType.Yamato_Gun, false);
        fields.get("targetsOrganic").set(WeaponType.Yamato_Gun, false);
        fields.get("targetsNonBuilding").set(WeaponType.Yamato_Gun, false);
        fields.get("targetsNonRobotic").set(WeaponType.Yamato_Gun, false);
        fields.get("targetsTerrain").set(WeaponType.Yamato_Gun, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Yamato_Gun, false);
        fields.get("targetsOwn").set(WeaponType.Yamato_Gun, false);
    }
    private void initializeWeaponType_Nuclear_Strike() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Nuclear_Strike, 31);
        fields.get("tech").set(WeaponType.Nuclear_Strike, TechType.Nuclear_Strike);
        fields.get("whatUses").set(WeaponType.Nuclear_Strike, UnitType.Terran_Ghost);
        fields.get("damageAmount").set(WeaponType.Nuclear_Strike, 600);
        fields.get("damageBonus").set(WeaponType.Nuclear_Strike, 0);
        fields.get("damageCooldown").set(WeaponType.Nuclear_Strike, 1);
        fields.get("damageFactor").set(WeaponType.Nuclear_Strike, 1);
        fields.get("upgradeType").set(WeaponType.Nuclear_Strike, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Nuclear_Strike, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Nuclear_Strike, ExplosionType.Nuclear_Missile);
        fields.get("minRange").set(WeaponType.Nuclear_Strike, 0);
        fields.get("maxRange").set(WeaponType.Nuclear_Strike, 3);
        fields.get("innerSplashRadius").set(WeaponType.Nuclear_Strike, 128);
        fields.get("medianSplashRadius").set(WeaponType.Nuclear_Strike, 192);
        fields.get("outerSplashRadius").set(WeaponType.Nuclear_Strike, 256);
        fields.get("targetsAir").set(WeaponType.Nuclear_Strike, true);
        fields.get("targetsGround").set(WeaponType.Nuclear_Strike, true);
        fields.get("targetsMechanical").set(WeaponType.Nuclear_Strike, false);
        fields.get("targetsOrganic").set(WeaponType.Nuclear_Strike, false);
        fields.get("targetsNonBuilding").set(WeaponType.Nuclear_Strike, false);
        fields.get("targetsNonRobotic").set(WeaponType.Nuclear_Strike, false);
        fields.get("targetsTerrain").set(WeaponType.Nuclear_Strike, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Nuclear_Strike, false);
        fields.get("targetsOwn").set(WeaponType.Nuclear_Strike, false);
    }
    private void initializeWeaponType_Lockdown() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Lockdown, 32);
        fields.get("tech").set(WeaponType.Lockdown, TechType.Lockdown);
        fields.get("whatUses").set(WeaponType.Lockdown, UnitType.Terran_Ghost);
        fields.get("damageAmount").set(WeaponType.Lockdown, 0);
        fields.get("damageBonus").set(WeaponType.Lockdown, 0);
        fields.get("damageCooldown").set(WeaponType.Lockdown, 1);
        fields.get("damageFactor").set(WeaponType.Lockdown, 1);
        fields.get("upgradeType").set(WeaponType.Lockdown, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Lockdown, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.Lockdown, ExplosionType.Lockdown);
        fields.get("minRange").set(WeaponType.Lockdown, 0);
        fields.get("maxRange").set(WeaponType.Lockdown, 256);
        fields.get("innerSplashRadius").set(WeaponType.Lockdown, 0);
        fields.get("medianSplashRadius").set(WeaponType.Lockdown, 0);
        fields.get("outerSplashRadius").set(WeaponType.Lockdown, 0);
        fields.get("targetsAir").set(WeaponType.Lockdown, true);
        fields.get("targetsGround").set(WeaponType.Lockdown, true);
        fields.get("targetsMechanical").set(WeaponType.Lockdown, true);
        fields.get("targetsOrganic").set(WeaponType.Lockdown, false);
        fields.get("targetsNonBuilding").set(WeaponType.Lockdown, true);
        fields.get("targetsNonRobotic").set(WeaponType.Lockdown, false);
        fields.get("targetsTerrain").set(WeaponType.Lockdown, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Lockdown, false);
        fields.get("targetsOwn").set(WeaponType.Lockdown, false);
    }
    private void initializeWeaponType_EMP_Shockwave() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.EMP_Shockwave, 33);
        fields.get("tech").set(WeaponType.EMP_Shockwave, TechType.EMP_Shockwave);
        fields.get("whatUses").set(WeaponType.EMP_Shockwave, UnitType.Terran_Science_Vessel);
        fields.get("damageAmount").set(WeaponType.EMP_Shockwave, 0);
        fields.get("damageBonus").set(WeaponType.EMP_Shockwave, 0);
        fields.get("damageCooldown").set(WeaponType.EMP_Shockwave, 1);
        fields.get("damageFactor").set(WeaponType.EMP_Shockwave, 1);
        fields.get("upgradeType").set(WeaponType.EMP_Shockwave, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.EMP_Shockwave, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.EMP_Shockwave, ExplosionType.EMP_Shockwave);
        fields.get("minRange").set(WeaponType.EMP_Shockwave, 0);
        fields.get("maxRange").set(WeaponType.EMP_Shockwave, 256);
        fields.get("innerSplashRadius").set(WeaponType.EMP_Shockwave, 64);
        fields.get("medianSplashRadius").set(WeaponType.EMP_Shockwave, 64);
        fields.get("outerSplashRadius").set(WeaponType.EMP_Shockwave, 64);
        fields.get("targetsAir").set(WeaponType.EMP_Shockwave, true);
        fields.get("targetsGround").set(WeaponType.EMP_Shockwave, true);
        fields.get("targetsMechanical").set(WeaponType.EMP_Shockwave, false);
        fields.get("targetsOrganic").set(WeaponType.EMP_Shockwave, false);
        fields.get("targetsNonBuilding").set(WeaponType.EMP_Shockwave, false);
        fields.get("targetsNonRobotic").set(WeaponType.EMP_Shockwave, false);
        fields.get("targetsTerrain").set(WeaponType.EMP_Shockwave, true);
        fields.get("targetsOrgOrMech").set(WeaponType.EMP_Shockwave, false);
        fields.get("targetsOwn").set(WeaponType.EMP_Shockwave, false);
    }
    private void initializeWeaponType_Irradiate() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Irradiate, 34);
        fields.get("tech").set(WeaponType.Irradiate, TechType.Irradiate);
        fields.get("whatUses").set(WeaponType.Irradiate, UnitType.Terran_Science_Vessel);
        fields.get("damageAmount").set(WeaponType.Irradiate, 250);
        fields.get("damageBonus").set(WeaponType.Irradiate, 0);
        fields.get("damageCooldown").set(WeaponType.Irradiate, 75);
        fields.get("damageFactor").set(WeaponType.Irradiate, 1);
        fields.get("upgradeType").set(WeaponType.Irradiate, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Irradiate, DamageType.Ignore_Armor);
        fields.get("explosionType").set(WeaponType.Irradiate, ExplosionType.Irradiate);
        fields.get("minRange").set(WeaponType.Irradiate, 0);
        fields.get("maxRange").set(WeaponType.Irradiate, 288);
        fields.get("innerSplashRadius").set(WeaponType.Irradiate, 0);
        fields.get("medianSplashRadius").set(WeaponType.Irradiate, 0);
        fields.get("outerSplashRadius").set(WeaponType.Irradiate, 0);
        fields.get("targetsAir").set(WeaponType.Irradiate, true);
        fields.get("targetsGround").set(WeaponType.Irradiate, true);
        fields.get("targetsMechanical").set(WeaponType.Irradiate, false);
        fields.get("targetsOrganic").set(WeaponType.Irradiate, false);
        fields.get("targetsNonBuilding").set(WeaponType.Irradiate, false);
        fields.get("targetsNonRobotic").set(WeaponType.Irradiate, false);
        fields.get("targetsTerrain").set(WeaponType.Irradiate, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Irradiate, false);
        fields.get("targetsOwn").set(WeaponType.Irradiate, false);
    }
    private void initializeWeaponType_Claws() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Claws, 35);
        fields.get("tech").set(WeaponType.Claws, TechType.None);
        fields.get("whatUses").set(WeaponType.Claws, UnitType.Zerg_Zergling);
        fields.get("damageAmount").set(WeaponType.Claws, 5);
        fields.get("damageBonus").set(WeaponType.Claws, 1);
        fields.get("damageCooldown").set(WeaponType.Claws, 8);
        fields.get("damageFactor").set(WeaponType.Claws, 1);
        fields.get("upgradeType").set(WeaponType.Claws, UpgradeType.Zerg_Melee_Attacks);
        fields.get("damageType").set(WeaponType.Claws, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Claws, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Claws, 0);
        fields.get("maxRange").set(WeaponType.Claws, 15);
        fields.get("innerSplashRadius").set(WeaponType.Claws, 0);
        fields.get("medianSplashRadius").set(WeaponType.Claws, 0);
        fields.get("outerSplashRadius").set(WeaponType.Claws, 0);
        fields.get("targetsAir").set(WeaponType.Claws, false);
        fields.get("targetsGround").set(WeaponType.Claws, true);
        fields.get("targetsMechanical").set(WeaponType.Claws, false);
        fields.get("targetsOrganic").set(WeaponType.Claws, false);
        fields.get("targetsNonBuilding").set(WeaponType.Claws, false);
        fields.get("targetsNonRobotic").set(WeaponType.Claws, false);
        fields.get("targetsTerrain").set(WeaponType.Claws, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Claws, false);
        fields.get("targetsOwn").set(WeaponType.Claws, false);
    }
    private void initializeWeaponType_Claws_Devouring_One() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Claws_Devouring_One, 36);
        fields.get("tech").set(WeaponType.Claws_Devouring_One, TechType.None);
        fields.get("whatUses").set(WeaponType.Claws_Devouring_One, UnitType.Hero_Devouring_One);
        fields.get("damageAmount").set(WeaponType.Claws_Devouring_One, 10);
        fields.get("damageBonus").set(WeaponType.Claws_Devouring_One, 1);
        fields.get("damageCooldown").set(WeaponType.Claws_Devouring_One, 8);
        fields.get("damageFactor").set(WeaponType.Claws_Devouring_One, 1);
        fields.get("upgradeType").set(WeaponType.Claws_Devouring_One, UpgradeType.Zerg_Melee_Attacks);
        fields.get("damageType").set(WeaponType.Claws_Devouring_One, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Claws_Devouring_One, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Claws_Devouring_One, 0);
        fields.get("maxRange").set(WeaponType.Claws_Devouring_One, 15);
        fields.get("innerSplashRadius").set(WeaponType.Claws_Devouring_One, 0);
        fields.get("medianSplashRadius").set(WeaponType.Claws_Devouring_One, 0);
        fields.get("outerSplashRadius").set(WeaponType.Claws_Devouring_One, 0);
        fields.get("targetsAir").set(WeaponType.Claws_Devouring_One, false);
        fields.get("targetsGround").set(WeaponType.Claws_Devouring_One, true);
        fields.get("targetsMechanical").set(WeaponType.Claws_Devouring_One, false);
        fields.get("targetsOrganic").set(WeaponType.Claws_Devouring_One, false);
        fields.get("targetsNonBuilding").set(WeaponType.Claws_Devouring_One, false);
        fields.get("targetsNonRobotic").set(WeaponType.Claws_Devouring_One, false);
        fields.get("targetsTerrain").set(WeaponType.Claws_Devouring_One, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Claws_Devouring_One, false);
        fields.get("targetsOwn").set(WeaponType.Claws_Devouring_One, false);
    }
    private void initializeWeaponType_Claws_Infested_Kerrigan() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Claws_Infested_Kerrigan, 37);
        fields.get("tech").set(WeaponType.Claws_Infested_Kerrigan, TechType.None);
        fields.get("whatUses").set(WeaponType.Claws_Infested_Kerrigan, UnitType.Hero_Infested_Kerrigan);
        fields.get("damageAmount").set(WeaponType.Claws_Infested_Kerrigan, 50);
        fields.get("damageBonus").set(WeaponType.Claws_Infested_Kerrigan, 1);
        fields.get("damageCooldown").set(WeaponType.Claws_Infested_Kerrigan, 15);
        fields.get("damageFactor").set(WeaponType.Claws_Infested_Kerrigan, 1);
        fields.get("upgradeType").set(WeaponType.Claws_Infested_Kerrigan, UpgradeType.Zerg_Melee_Attacks);
        fields.get("damageType").set(WeaponType.Claws_Infested_Kerrigan, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Claws_Infested_Kerrigan, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Claws_Infested_Kerrigan, 0);
        fields.get("maxRange").set(WeaponType.Claws_Infested_Kerrigan, 15);
        fields.get("innerSplashRadius").set(WeaponType.Claws_Infested_Kerrigan, 0);
        fields.get("medianSplashRadius").set(WeaponType.Claws_Infested_Kerrigan, 0);
        fields.get("outerSplashRadius").set(WeaponType.Claws_Infested_Kerrigan, 0);
        fields.get("targetsAir").set(WeaponType.Claws_Infested_Kerrigan, false);
        fields.get("targetsGround").set(WeaponType.Claws_Infested_Kerrigan, true);
        fields.get("targetsMechanical").set(WeaponType.Claws_Infested_Kerrigan, false);
        fields.get("targetsOrganic").set(WeaponType.Claws_Infested_Kerrigan, false);
        fields.get("targetsNonBuilding").set(WeaponType.Claws_Infested_Kerrigan, false);
        fields.get("targetsNonRobotic").set(WeaponType.Claws_Infested_Kerrigan, false);
        fields.get("targetsTerrain").set(WeaponType.Claws_Infested_Kerrigan, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Claws_Infested_Kerrigan, false);
        fields.get("targetsOwn").set(WeaponType.Claws_Infested_Kerrigan, false);
    }
    private void initializeWeaponType_Needle_Spines() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Needle_Spines, 38);
        fields.get("tech").set(WeaponType.Needle_Spines, TechType.None);
        fields.get("whatUses").set(WeaponType.Needle_Spines, UnitType.Zerg_Hydralisk);
        fields.get("damageAmount").set(WeaponType.Needle_Spines, 10);
        fields.get("damageBonus").set(WeaponType.Needle_Spines, 1);
        fields.get("damageCooldown").set(WeaponType.Needle_Spines, 15);
        fields.get("damageFactor").set(WeaponType.Needle_Spines, 1);
        fields.get("upgradeType").set(WeaponType.Needle_Spines, UpgradeType.Zerg_Missile_Attacks);
        fields.get("damageType").set(WeaponType.Needle_Spines, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Needle_Spines, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Needle_Spines, 0);
        fields.get("maxRange").set(WeaponType.Needle_Spines, 128);
        fields.get("innerSplashRadius").set(WeaponType.Needle_Spines, 0);
        fields.get("medianSplashRadius").set(WeaponType.Needle_Spines, 0);
        fields.get("outerSplashRadius").set(WeaponType.Needle_Spines, 0);
        fields.get("targetsAir").set(WeaponType.Needle_Spines, true);
        fields.get("targetsGround").set(WeaponType.Needle_Spines, true);
        fields.get("targetsMechanical").set(WeaponType.Needle_Spines, false);
        fields.get("targetsOrganic").set(WeaponType.Needle_Spines, false);
        fields.get("targetsNonBuilding").set(WeaponType.Needle_Spines, false);
        fields.get("targetsNonRobotic").set(WeaponType.Needle_Spines, false);
        fields.get("targetsTerrain").set(WeaponType.Needle_Spines, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Needle_Spines, false);
        fields.get("targetsOwn").set(WeaponType.Needle_Spines, false);
    }
    private void initializeWeaponType_Needle_Spines_Hunter_Killer() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Needle_Spines_Hunter_Killer, 39);
        fields.get("tech").set(WeaponType.Needle_Spines_Hunter_Killer, TechType.None);
        fields.get("whatUses").set(WeaponType.Needle_Spines_Hunter_Killer, UnitType.Hero_Hunter_Killer);
        fields.get("damageAmount").set(WeaponType.Needle_Spines_Hunter_Killer, 20);
        fields.get("damageBonus").set(WeaponType.Needle_Spines_Hunter_Killer, 1);
        fields.get("damageCooldown").set(WeaponType.Needle_Spines_Hunter_Killer, 15);
        fields.get("damageFactor").set(WeaponType.Needle_Spines_Hunter_Killer, 1);
        fields.get("upgradeType").set(WeaponType.Needle_Spines_Hunter_Killer, UpgradeType.Zerg_Missile_Attacks);
        fields.get("damageType").set(WeaponType.Needle_Spines_Hunter_Killer, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Needle_Spines_Hunter_Killer, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Needle_Spines_Hunter_Killer, 0);
        fields.get("maxRange").set(WeaponType.Needle_Spines_Hunter_Killer, 160);
        fields.get("innerSplashRadius").set(WeaponType.Needle_Spines_Hunter_Killer, 0);
        fields.get("medianSplashRadius").set(WeaponType.Needle_Spines_Hunter_Killer, 0);
        fields.get("outerSplashRadius").set(WeaponType.Needle_Spines_Hunter_Killer, 0);
        fields.get("targetsAir").set(WeaponType.Needle_Spines_Hunter_Killer, true);
        fields.get("targetsGround").set(WeaponType.Needle_Spines_Hunter_Killer, true);
        fields.get("targetsMechanical").set(WeaponType.Needle_Spines_Hunter_Killer, false);
        fields.get("targetsOrganic").set(WeaponType.Needle_Spines_Hunter_Killer, false);
        fields.get("targetsNonBuilding").set(WeaponType.Needle_Spines_Hunter_Killer, false);
        fields.get("targetsNonRobotic").set(WeaponType.Needle_Spines_Hunter_Killer, false);
        fields.get("targetsTerrain").set(WeaponType.Needle_Spines_Hunter_Killer, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Needle_Spines_Hunter_Killer, false);
        fields.get("targetsOwn").set(WeaponType.Needle_Spines_Hunter_Killer, false);
    }
    private void initializeWeaponType_Kaiser_Blades() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Kaiser_Blades, 40);
        fields.get("tech").set(WeaponType.Kaiser_Blades, TechType.None);
        fields.get("whatUses").set(WeaponType.Kaiser_Blades, UnitType.Zerg_Ultralisk);
        fields.get("damageAmount").set(WeaponType.Kaiser_Blades, 20);
        fields.get("damageBonus").set(WeaponType.Kaiser_Blades, 3);
        fields.get("damageCooldown").set(WeaponType.Kaiser_Blades, 15);
        fields.get("damageFactor").set(WeaponType.Kaiser_Blades, 1);
        fields.get("upgradeType").set(WeaponType.Kaiser_Blades, UpgradeType.Zerg_Melee_Attacks);
        fields.get("damageType").set(WeaponType.Kaiser_Blades, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Kaiser_Blades, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Kaiser_Blades, 0);
        fields.get("maxRange").set(WeaponType.Kaiser_Blades, 25);
        fields.get("innerSplashRadius").set(WeaponType.Kaiser_Blades, 0);
        fields.get("medianSplashRadius").set(WeaponType.Kaiser_Blades, 0);
        fields.get("outerSplashRadius").set(WeaponType.Kaiser_Blades, 0);
        fields.get("targetsAir").set(WeaponType.Kaiser_Blades, false);
        fields.get("targetsGround").set(WeaponType.Kaiser_Blades, true);
        fields.get("targetsMechanical").set(WeaponType.Kaiser_Blades, false);
        fields.get("targetsOrganic").set(WeaponType.Kaiser_Blades, false);
        fields.get("targetsNonBuilding").set(WeaponType.Kaiser_Blades, false);
        fields.get("targetsNonRobotic").set(WeaponType.Kaiser_Blades, false);
        fields.get("targetsTerrain").set(WeaponType.Kaiser_Blades, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Kaiser_Blades, false);
        fields.get("targetsOwn").set(WeaponType.Kaiser_Blades, false);
    }
    private void initializeWeaponType_Kaiser_Blades_Torrasque() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Kaiser_Blades_Torrasque, 41);
        fields.get("tech").set(WeaponType.Kaiser_Blades_Torrasque, TechType.None);
        fields.get("whatUses").set(WeaponType.Kaiser_Blades_Torrasque, UnitType.Hero_Torrasque);
        fields.get("damageAmount").set(WeaponType.Kaiser_Blades_Torrasque, 50);
        fields.get("damageBonus").set(WeaponType.Kaiser_Blades_Torrasque, 3);
        fields.get("damageCooldown").set(WeaponType.Kaiser_Blades_Torrasque, 15);
        fields.get("damageFactor").set(WeaponType.Kaiser_Blades_Torrasque, 1);
        fields.get("upgradeType").set(WeaponType.Kaiser_Blades_Torrasque, UpgradeType.Zerg_Melee_Attacks);
        fields.get("damageType").set(WeaponType.Kaiser_Blades_Torrasque, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Kaiser_Blades_Torrasque, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Kaiser_Blades_Torrasque, 0);
        fields.get("maxRange").set(WeaponType.Kaiser_Blades_Torrasque, 25);
        fields.get("innerSplashRadius").set(WeaponType.Kaiser_Blades_Torrasque, 0);
        fields.get("medianSplashRadius").set(WeaponType.Kaiser_Blades_Torrasque, 0);
        fields.get("outerSplashRadius").set(WeaponType.Kaiser_Blades_Torrasque, 0);
        fields.get("targetsAir").set(WeaponType.Kaiser_Blades_Torrasque, false);
        fields.get("targetsGround").set(WeaponType.Kaiser_Blades_Torrasque, true);
        fields.get("targetsMechanical").set(WeaponType.Kaiser_Blades_Torrasque, false);
        fields.get("targetsOrganic").set(WeaponType.Kaiser_Blades_Torrasque, false);
        fields.get("targetsNonBuilding").set(WeaponType.Kaiser_Blades_Torrasque, false);
        fields.get("targetsNonRobotic").set(WeaponType.Kaiser_Blades_Torrasque, false);
        fields.get("targetsTerrain").set(WeaponType.Kaiser_Blades_Torrasque, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Kaiser_Blades_Torrasque, false);
        fields.get("targetsOwn").set(WeaponType.Kaiser_Blades_Torrasque, false);
    }
    private void initializeWeaponType_Toxic_Spores() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Toxic_Spores, 42);
        fields.get("tech").set(WeaponType.Toxic_Spores, TechType.None);
        fields.get("whatUses").set(WeaponType.Toxic_Spores, UnitType.Zerg_Broodling);
        fields.get("damageAmount").set(WeaponType.Toxic_Spores, 4);
        fields.get("damageBonus").set(WeaponType.Toxic_Spores, 1);
        fields.get("damageCooldown").set(WeaponType.Toxic_Spores, 15);
        fields.get("damageFactor").set(WeaponType.Toxic_Spores, 1);
        fields.get("upgradeType").set(WeaponType.Toxic_Spores, UpgradeType.Zerg_Melee_Attacks);
        fields.get("damageType").set(WeaponType.Toxic_Spores, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Toxic_Spores, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Toxic_Spores, 0);
        fields.get("maxRange").set(WeaponType.Toxic_Spores, 2);
        fields.get("innerSplashRadius").set(WeaponType.Toxic_Spores, 0);
        fields.get("medianSplashRadius").set(WeaponType.Toxic_Spores, 0);
        fields.get("outerSplashRadius").set(WeaponType.Toxic_Spores, 0);
        fields.get("targetsAir").set(WeaponType.Toxic_Spores, false);
        fields.get("targetsGround").set(WeaponType.Toxic_Spores, true);
        fields.get("targetsMechanical").set(WeaponType.Toxic_Spores, false);
        fields.get("targetsOrganic").set(WeaponType.Toxic_Spores, false);
        fields.get("targetsNonBuilding").set(WeaponType.Toxic_Spores, false);
        fields.get("targetsNonRobotic").set(WeaponType.Toxic_Spores, false);
        fields.get("targetsTerrain").set(WeaponType.Toxic_Spores, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Toxic_Spores, false);
        fields.get("targetsOwn").set(WeaponType.Toxic_Spores, false);
    }
    private void initializeWeaponType_Spines() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Spines, 43);
        fields.get("tech").set(WeaponType.Spines, TechType.None);
        fields.get("whatUses").set(WeaponType.Spines, UnitType.Zerg_Drone);
        fields.get("damageAmount").set(WeaponType.Spines, 5);
        fields.get("damageBonus").set(WeaponType.Spines, 0);
        fields.get("damageCooldown").set(WeaponType.Spines, 22);
        fields.get("damageFactor").set(WeaponType.Spines, 1);
        fields.get("upgradeType").set(WeaponType.Spines, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Spines, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Spines, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Spines, 0);
        fields.get("maxRange").set(WeaponType.Spines, 32);
        fields.get("innerSplashRadius").set(WeaponType.Spines, 0);
        fields.get("medianSplashRadius").set(WeaponType.Spines, 0);
        fields.get("outerSplashRadius").set(WeaponType.Spines, 0);
        fields.get("targetsAir").set(WeaponType.Spines, false);
        fields.get("targetsGround").set(WeaponType.Spines, true);
        fields.get("targetsMechanical").set(WeaponType.Spines, false);
        fields.get("targetsOrganic").set(WeaponType.Spines, false);
        fields.get("targetsNonBuilding").set(WeaponType.Spines, false);
        fields.get("targetsNonRobotic").set(WeaponType.Spines, false);
        fields.get("targetsTerrain").set(WeaponType.Spines, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Spines, false);
        fields.get("targetsOwn").set(WeaponType.Spines, false);
    }
    private void initializeWeaponType_Acid_Spore() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Acid_Spore, 46);
        fields.get("tech").set(WeaponType.Acid_Spore, TechType.None);
        fields.get("whatUses").set(WeaponType.Acid_Spore, UnitType.Zerg_Guardian);
        fields.get("damageAmount").set(WeaponType.Acid_Spore, 20);
        fields.get("damageBonus").set(WeaponType.Acid_Spore, 2);
        fields.get("damageCooldown").set(WeaponType.Acid_Spore, 30);
        fields.get("damageFactor").set(WeaponType.Acid_Spore, 1);
        fields.get("upgradeType").set(WeaponType.Acid_Spore, UpgradeType.Zerg_Flyer_Attacks);
        fields.get("damageType").set(WeaponType.Acid_Spore, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Acid_Spore, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Acid_Spore, 0);
        fields.get("maxRange").set(WeaponType.Acid_Spore, 256);
        fields.get("innerSplashRadius").set(WeaponType.Acid_Spore, 0);
        fields.get("medianSplashRadius").set(WeaponType.Acid_Spore, 0);
        fields.get("outerSplashRadius").set(WeaponType.Acid_Spore, 0);
        fields.get("targetsAir").set(WeaponType.Acid_Spore, false);
        fields.get("targetsGround").set(WeaponType.Acid_Spore, true);
        fields.get("targetsMechanical").set(WeaponType.Acid_Spore, false);
        fields.get("targetsOrganic").set(WeaponType.Acid_Spore, false);
        fields.get("targetsNonBuilding").set(WeaponType.Acid_Spore, false);
        fields.get("targetsNonRobotic").set(WeaponType.Acid_Spore, false);
        fields.get("targetsTerrain").set(WeaponType.Acid_Spore, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Acid_Spore, false);
        fields.get("targetsOwn").set(WeaponType.Acid_Spore, false);
    }
    private void initializeWeaponType_Acid_Spore_Kukulza() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Acid_Spore_Kukulza, 47);
        fields.get("tech").set(WeaponType.Acid_Spore_Kukulza, TechType.None);
        fields.get("whatUses").set(WeaponType.Acid_Spore_Kukulza, UnitType.Hero_Kukulza_Guardian);
        fields.get("damageAmount").set(WeaponType.Acid_Spore_Kukulza, 40);
        fields.get("damageBonus").set(WeaponType.Acid_Spore_Kukulza, 2);
        fields.get("damageCooldown").set(WeaponType.Acid_Spore_Kukulza, 30);
        fields.get("damageFactor").set(WeaponType.Acid_Spore_Kukulza, 1);
        fields.get("upgradeType").set(WeaponType.Acid_Spore_Kukulza, UpgradeType.Zerg_Flyer_Attacks);
        fields.get("damageType").set(WeaponType.Acid_Spore_Kukulza, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Acid_Spore_Kukulza, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Acid_Spore_Kukulza, 0);
        fields.get("maxRange").set(WeaponType.Acid_Spore_Kukulza, 256);
        fields.get("innerSplashRadius").set(WeaponType.Acid_Spore_Kukulza, 0);
        fields.get("medianSplashRadius").set(WeaponType.Acid_Spore_Kukulza, 0);
        fields.get("outerSplashRadius").set(WeaponType.Acid_Spore_Kukulza, 0);
        fields.get("targetsAir").set(WeaponType.Acid_Spore_Kukulza, false);
        fields.get("targetsGround").set(WeaponType.Acid_Spore_Kukulza, true);
        fields.get("targetsMechanical").set(WeaponType.Acid_Spore_Kukulza, false);
        fields.get("targetsOrganic").set(WeaponType.Acid_Spore_Kukulza, false);
        fields.get("targetsNonBuilding").set(WeaponType.Acid_Spore_Kukulza, false);
        fields.get("targetsNonRobotic").set(WeaponType.Acid_Spore_Kukulza, false);
        fields.get("targetsTerrain").set(WeaponType.Acid_Spore_Kukulza, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Acid_Spore_Kukulza, false);
        fields.get("targetsOwn").set(WeaponType.Acid_Spore_Kukulza, false);
    }
    private void initializeWeaponType_Glave_Wurm() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Glave_Wurm, 48);
        fields.get("tech").set(WeaponType.Glave_Wurm, TechType.None);
        fields.get("whatUses").set(WeaponType.Glave_Wurm, UnitType.Zerg_Mutalisk);
        fields.get("damageAmount").set(WeaponType.Glave_Wurm, 9);
        fields.get("damageBonus").set(WeaponType.Glave_Wurm, 1);
        fields.get("damageCooldown").set(WeaponType.Glave_Wurm, 30);
        fields.get("damageFactor").set(WeaponType.Glave_Wurm, 1);
        fields.get("upgradeType").set(WeaponType.Glave_Wurm, UpgradeType.Zerg_Flyer_Attacks);
        fields.get("damageType").set(WeaponType.Glave_Wurm, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Glave_Wurm, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Glave_Wurm, 0);
        fields.get("maxRange").set(WeaponType.Glave_Wurm, 96);
        fields.get("innerSplashRadius").set(WeaponType.Glave_Wurm, 0);
        fields.get("medianSplashRadius").set(WeaponType.Glave_Wurm, 0);
        fields.get("outerSplashRadius").set(WeaponType.Glave_Wurm, 0);
        fields.get("targetsAir").set(WeaponType.Glave_Wurm, true);
        fields.get("targetsGround").set(WeaponType.Glave_Wurm, true);
        fields.get("targetsMechanical").set(WeaponType.Glave_Wurm, false);
        fields.get("targetsOrganic").set(WeaponType.Glave_Wurm, false);
        fields.get("targetsNonBuilding").set(WeaponType.Glave_Wurm, false);
        fields.get("targetsNonRobotic").set(WeaponType.Glave_Wurm, false);
        fields.get("targetsTerrain").set(WeaponType.Glave_Wurm, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Glave_Wurm, false);
        fields.get("targetsOwn").set(WeaponType.Glave_Wurm, false);
    }
    private void initializeWeaponType_Glave_Wurm_Kukulza() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Glave_Wurm_Kukulza, 49);
        fields.get("tech").set(WeaponType.Glave_Wurm_Kukulza, TechType.None);
        fields.get("whatUses").set(WeaponType.Glave_Wurm_Kukulza, UnitType.Hero_Kukulza_Mutalisk);
        fields.get("damageAmount").set(WeaponType.Glave_Wurm_Kukulza, 18);
        fields.get("damageBonus").set(WeaponType.Glave_Wurm_Kukulza, 1);
        fields.get("damageCooldown").set(WeaponType.Glave_Wurm_Kukulza, 30);
        fields.get("damageFactor").set(WeaponType.Glave_Wurm_Kukulza, 1);
        fields.get("upgradeType").set(WeaponType.Glave_Wurm_Kukulza, UpgradeType.Zerg_Flyer_Attacks);
        fields.get("damageType").set(WeaponType.Glave_Wurm_Kukulza, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Glave_Wurm_Kukulza, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Glave_Wurm_Kukulza, 0);
        fields.get("maxRange").set(WeaponType.Glave_Wurm_Kukulza, 96);
        fields.get("innerSplashRadius").set(WeaponType.Glave_Wurm_Kukulza, 0);
        fields.get("medianSplashRadius").set(WeaponType.Glave_Wurm_Kukulza, 0);
        fields.get("outerSplashRadius").set(WeaponType.Glave_Wurm_Kukulza, 0);
        fields.get("targetsAir").set(WeaponType.Glave_Wurm_Kukulza, true);
        fields.get("targetsGround").set(WeaponType.Glave_Wurm_Kukulza, true);
        fields.get("targetsMechanical").set(WeaponType.Glave_Wurm_Kukulza, false);
        fields.get("targetsOrganic").set(WeaponType.Glave_Wurm_Kukulza, false);
        fields.get("targetsNonBuilding").set(WeaponType.Glave_Wurm_Kukulza, false);
        fields.get("targetsNonRobotic").set(WeaponType.Glave_Wurm_Kukulza, false);
        fields.get("targetsTerrain").set(WeaponType.Glave_Wurm_Kukulza, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Glave_Wurm_Kukulza, false);
        fields.get("targetsOwn").set(WeaponType.Glave_Wurm_Kukulza, false);
    }
    private void initializeWeaponType_Seeker_Spores() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Seeker_Spores, 52);
        fields.get("tech").set(WeaponType.Seeker_Spores, TechType.None);
        fields.get("whatUses").set(WeaponType.Seeker_Spores, UnitType.Zerg_Spore_Colony);
        fields.get("damageAmount").set(WeaponType.Seeker_Spores, 15);
        fields.get("damageBonus").set(WeaponType.Seeker_Spores, 0);
        fields.get("damageCooldown").set(WeaponType.Seeker_Spores, 15);
        fields.get("damageFactor").set(WeaponType.Seeker_Spores, 1);
        fields.get("upgradeType").set(WeaponType.Seeker_Spores, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Seeker_Spores, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Seeker_Spores, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Seeker_Spores, 0);
        fields.get("maxRange").set(WeaponType.Seeker_Spores, 224);
        fields.get("innerSplashRadius").set(WeaponType.Seeker_Spores, 0);
        fields.get("medianSplashRadius").set(WeaponType.Seeker_Spores, 0);
        fields.get("outerSplashRadius").set(WeaponType.Seeker_Spores, 0);
        fields.get("targetsAir").set(WeaponType.Seeker_Spores, true);
        fields.get("targetsGround").set(WeaponType.Seeker_Spores, false);
        fields.get("targetsMechanical").set(WeaponType.Seeker_Spores, false);
        fields.get("targetsOrganic").set(WeaponType.Seeker_Spores, false);
        fields.get("targetsNonBuilding").set(WeaponType.Seeker_Spores, false);
        fields.get("targetsNonRobotic").set(WeaponType.Seeker_Spores, false);
        fields.get("targetsTerrain").set(WeaponType.Seeker_Spores, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Seeker_Spores, false);
        fields.get("targetsOwn").set(WeaponType.Seeker_Spores, false);
    }
    private void initializeWeaponType_Subterranean_Tentacle() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Subterranean_Tentacle, 53);
        fields.get("tech").set(WeaponType.Subterranean_Tentacle, TechType.None);
        fields.get("whatUses").set(WeaponType.Subterranean_Tentacle, UnitType.Zerg_Sunken_Colony);
        fields.get("damageAmount").set(WeaponType.Subterranean_Tentacle, 40);
        fields.get("damageBonus").set(WeaponType.Subterranean_Tentacle, 0);
        fields.get("damageCooldown").set(WeaponType.Subterranean_Tentacle, 32);
        fields.get("damageFactor").set(WeaponType.Subterranean_Tentacle, 1);
        fields.get("upgradeType").set(WeaponType.Subterranean_Tentacle, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Subterranean_Tentacle, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Subterranean_Tentacle, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Subterranean_Tentacle, 0);
        fields.get("maxRange").set(WeaponType.Subterranean_Tentacle, 224);
        fields.get("innerSplashRadius").set(WeaponType.Subterranean_Tentacle, 0);
        fields.get("medianSplashRadius").set(WeaponType.Subterranean_Tentacle, 0);
        fields.get("outerSplashRadius").set(WeaponType.Subterranean_Tentacle, 0);
        fields.get("targetsAir").set(WeaponType.Subterranean_Tentacle, false);
        fields.get("targetsGround").set(WeaponType.Subterranean_Tentacle, true);
        fields.get("targetsMechanical").set(WeaponType.Subterranean_Tentacle, false);
        fields.get("targetsOrganic").set(WeaponType.Subterranean_Tentacle, false);
        fields.get("targetsNonBuilding").set(WeaponType.Subterranean_Tentacle, false);
        fields.get("targetsNonRobotic").set(WeaponType.Subterranean_Tentacle, false);
        fields.get("targetsTerrain").set(WeaponType.Subterranean_Tentacle, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Subterranean_Tentacle, false);
        fields.get("targetsOwn").set(WeaponType.Subterranean_Tentacle, false);
    }
    private void initializeWeaponType_Suicide_Infested_Terran() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Suicide_Infested_Terran, 54);
        fields.get("tech").set(WeaponType.Suicide_Infested_Terran, TechType.None);
        fields.get("whatUses").set(WeaponType.Suicide_Infested_Terran, UnitType.Zerg_Infested_Terran);
        fields.get("damageAmount").set(WeaponType.Suicide_Infested_Terran, 500);
        fields.get("damageBonus").set(WeaponType.Suicide_Infested_Terran, 0);
        fields.get("damageCooldown").set(WeaponType.Suicide_Infested_Terran, 1);
        fields.get("damageFactor").set(WeaponType.Suicide_Infested_Terran, 1);
        fields.get("upgradeType").set(WeaponType.Suicide_Infested_Terran, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Suicide_Infested_Terran, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Suicide_Infested_Terran, ExplosionType.Radial_Splash);
        fields.get("minRange").set(WeaponType.Suicide_Infested_Terran, 0);
        fields.get("maxRange").set(WeaponType.Suicide_Infested_Terran, 3);
        fields.get("innerSplashRadius").set(WeaponType.Suicide_Infested_Terran, 20);
        fields.get("medianSplashRadius").set(WeaponType.Suicide_Infested_Terran, 40);
        fields.get("outerSplashRadius").set(WeaponType.Suicide_Infested_Terran, 60);
        fields.get("targetsAir").set(WeaponType.Suicide_Infested_Terran, false);
        fields.get("targetsGround").set(WeaponType.Suicide_Infested_Terran, true);
        fields.get("targetsMechanical").set(WeaponType.Suicide_Infested_Terran, false);
        fields.get("targetsOrganic").set(WeaponType.Suicide_Infested_Terran, false);
        fields.get("targetsNonBuilding").set(WeaponType.Suicide_Infested_Terran, false);
        fields.get("targetsNonRobotic").set(WeaponType.Suicide_Infested_Terran, false);
        fields.get("targetsTerrain").set(WeaponType.Suicide_Infested_Terran, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Suicide_Infested_Terran, false);
        fields.get("targetsOwn").set(WeaponType.Suicide_Infested_Terran, false);
    }
    private void initializeWeaponType_Suicide_Scourge() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Suicide_Scourge, 55);
        fields.get("tech").set(WeaponType.Suicide_Scourge, TechType.None);
        fields.get("whatUses").set(WeaponType.Suicide_Scourge, UnitType.Zerg_Scourge);
        fields.get("damageAmount").set(WeaponType.Suicide_Scourge, 110);
        fields.get("damageBonus").set(WeaponType.Suicide_Scourge, 0);
        fields.get("damageCooldown").set(WeaponType.Suicide_Scourge, 1);
        fields.get("damageFactor").set(WeaponType.Suicide_Scourge, 1);
        fields.get("upgradeType").set(WeaponType.Suicide_Scourge, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Suicide_Scourge, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Suicide_Scourge, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Suicide_Scourge, 0);
        fields.get("maxRange").set(WeaponType.Suicide_Scourge, 3);
        fields.get("innerSplashRadius").set(WeaponType.Suicide_Scourge, 0);
        fields.get("medianSplashRadius").set(WeaponType.Suicide_Scourge, 0);
        fields.get("outerSplashRadius").set(WeaponType.Suicide_Scourge, 0);
        fields.get("targetsAir").set(WeaponType.Suicide_Scourge, true);
        fields.get("targetsGround").set(WeaponType.Suicide_Scourge, false);
        fields.get("targetsMechanical").set(WeaponType.Suicide_Scourge, false);
        fields.get("targetsOrganic").set(WeaponType.Suicide_Scourge, false);
        fields.get("targetsNonBuilding").set(WeaponType.Suicide_Scourge, false);
        fields.get("targetsNonRobotic").set(WeaponType.Suicide_Scourge, false);
        fields.get("targetsTerrain").set(WeaponType.Suicide_Scourge, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Suicide_Scourge, false);
        fields.get("targetsOwn").set(WeaponType.Suicide_Scourge, false);
    }
    private void initializeWeaponType_Parasite() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Parasite, 56);
        fields.get("tech").set(WeaponType.Parasite, TechType.Parasite);
        fields.get("whatUses").set(WeaponType.Parasite, UnitType.Zerg_Queen);
        fields.get("damageAmount").set(WeaponType.Parasite, 0);
        fields.get("damageBonus").set(WeaponType.Parasite, 0);
        fields.get("damageCooldown").set(WeaponType.Parasite, 1);
        fields.get("damageFactor").set(WeaponType.Parasite, 1);
        fields.get("upgradeType").set(WeaponType.Parasite, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Parasite, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Parasite, ExplosionType.Parasite);
        fields.get("minRange").set(WeaponType.Parasite, 0);
        fields.get("maxRange").set(WeaponType.Parasite, 384);
        fields.get("innerSplashRadius").set(WeaponType.Parasite, 0);
        fields.get("medianSplashRadius").set(WeaponType.Parasite, 0);
        fields.get("outerSplashRadius").set(WeaponType.Parasite, 0);
        fields.get("targetsAir").set(WeaponType.Parasite, true);
        fields.get("targetsGround").set(WeaponType.Parasite, true);
        fields.get("targetsMechanical").set(WeaponType.Parasite, false);
        fields.get("targetsOrganic").set(WeaponType.Parasite, false);
        fields.get("targetsNonBuilding").set(WeaponType.Parasite, true);
        fields.get("targetsNonRobotic").set(WeaponType.Parasite, false);
        fields.get("targetsTerrain").set(WeaponType.Parasite, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Parasite, false);
        fields.get("targetsOwn").set(WeaponType.Parasite, false);
    }
    private void initializeWeaponType_Spawn_Broodlings() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Spawn_Broodlings, 57);
        fields.get("tech").set(WeaponType.Spawn_Broodlings, TechType.Spawn_Broodlings);
        fields.get("whatUses").set(WeaponType.Spawn_Broodlings, UnitType.Zerg_Queen);
        fields.get("damageAmount").set(WeaponType.Spawn_Broodlings, 0);
        fields.get("damageBonus").set(WeaponType.Spawn_Broodlings, 0);
        fields.get("damageCooldown").set(WeaponType.Spawn_Broodlings, 1);
        fields.get("damageFactor").set(WeaponType.Spawn_Broodlings, 1);
        fields.get("upgradeType").set(WeaponType.Spawn_Broodlings, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Spawn_Broodlings, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Spawn_Broodlings, ExplosionType.Broodlings);
        fields.get("minRange").set(WeaponType.Spawn_Broodlings, 0);
        fields.get("maxRange").set(WeaponType.Spawn_Broodlings, 288);
        fields.get("innerSplashRadius").set(WeaponType.Spawn_Broodlings, 0);
        fields.get("medianSplashRadius").set(WeaponType.Spawn_Broodlings, 0);
        fields.get("outerSplashRadius").set(WeaponType.Spawn_Broodlings, 0);
        fields.get("targetsAir").set(WeaponType.Spawn_Broodlings, false);
        fields.get("targetsGround").set(WeaponType.Spawn_Broodlings, true);
        fields.get("targetsMechanical").set(WeaponType.Spawn_Broodlings, false);
        fields.get("targetsOrganic").set(WeaponType.Spawn_Broodlings, false);
        fields.get("targetsNonBuilding").set(WeaponType.Spawn_Broodlings, true);
        fields.get("targetsNonRobotic").set(WeaponType.Spawn_Broodlings, true);
        fields.get("targetsTerrain").set(WeaponType.Spawn_Broodlings, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Spawn_Broodlings, true);
        fields.get("targetsOwn").set(WeaponType.Spawn_Broodlings, false);
    }
    private void initializeWeaponType_Ensnare() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Ensnare, 58);
        fields.get("tech").set(WeaponType.Ensnare, TechType.Ensnare);
        fields.get("whatUses").set(WeaponType.Ensnare, UnitType.Zerg_Queen);
        fields.get("damageAmount").set(WeaponType.Ensnare, 0);
        fields.get("damageBonus").set(WeaponType.Ensnare, 0);
        fields.get("damageCooldown").set(WeaponType.Ensnare, 1);
        fields.get("damageFactor").set(WeaponType.Ensnare, 1);
        fields.get("upgradeType").set(WeaponType.Ensnare, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Ensnare, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Ensnare, ExplosionType.Ensnare);
        fields.get("minRange").set(WeaponType.Ensnare, 0);
        fields.get("maxRange").set(WeaponType.Ensnare, 288);
        fields.get("innerSplashRadius").set(WeaponType.Ensnare, 0);
        fields.get("medianSplashRadius").set(WeaponType.Ensnare, 0);
        fields.get("outerSplashRadius").set(WeaponType.Ensnare, 0);
        fields.get("targetsAir").set(WeaponType.Ensnare, true);
        fields.get("targetsGround").set(WeaponType.Ensnare, true);
        fields.get("targetsMechanical").set(WeaponType.Ensnare, false);
        fields.get("targetsOrganic").set(WeaponType.Ensnare, false);
        fields.get("targetsNonBuilding").set(WeaponType.Ensnare, false);
        fields.get("targetsNonRobotic").set(WeaponType.Ensnare, false);
        fields.get("targetsTerrain").set(WeaponType.Ensnare, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Ensnare, false);
        fields.get("targetsOwn").set(WeaponType.Ensnare, false);
    }
    private void initializeWeaponType_Dark_Swarm() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Dark_Swarm, 59);
        fields.get("tech").set(WeaponType.Dark_Swarm, TechType.Dark_Swarm);
        fields.get("whatUses").set(WeaponType.Dark_Swarm, UnitType.Zerg_Defiler);
        fields.get("damageAmount").set(WeaponType.Dark_Swarm, 0);
        fields.get("damageBonus").set(WeaponType.Dark_Swarm, 0);
        fields.get("damageCooldown").set(WeaponType.Dark_Swarm, 1);
        fields.get("damageFactor").set(WeaponType.Dark_Swarm, 1);
        fields.get("upgradeType").set(WeaponType.Dark_Swarm, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Dark_Swarm, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Dark_Swarm, ExplosionType.Dark_Swarm);
        fields.get("minRange").set(WeaponType.Dark_Swarm, 0);
        fields.get("maxRange").set(WeaponType.Dark_Swarm, 288);
        fields.get("innerSplashRadius").set(WeaponType.Dark_Swarm, 0);
        fields.get("medianSplashRadius").set(WeaponType.Dark_Swarm, 0);
        fields.get("outerSplashRadius").set(WeaponType.Dark_Swarm, 0);
        fields.get("targetsAir").set(WeaponType.Dark_Swarm, true);
        fields.get("targetsGround").set(WeaponType.Dark_Swarm, true);
        fields.get("targetsMechanical").set(WeaponType.Dark_Swarm, false);
        fields.get("targetsOrganic").set(WeaponType.Dark_Swarm, false);
        fields.get("targetsNonBuilding").set(WeaponType.Dark_Swarm, false);
        fields.get("targetsNonRobotic").set(WeaponType.Dark_Swarm, false);
        fields.get("targetsTerrain").set(WeaponType.Dark_Swarm, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Dark_Swarm, false);
        fields.get("targetsOwn").set(WeaponType.Dark_Swarm, false);
    }
    private void initializeWeaponType_Plague() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Plague, 60);
        fields.get("tech").set(WeaponType.Plague, TechType.Plague);
        fields.get("whatUses").set(WeaponType.Plague, UnitType.Zerg_Defiler);
        fields.get("damageAmount").set(WeaponType.Plague, 300);
        fields.get("damageBonus").set(WeaponType.Plague, 0);
        fields.get("damageCooldown").set(WeaponType.Plague, 1);
        fields.get("damageFactor").set(WeaponType.Plague, 1);
        fields.get("upgradeType").set(WeaponType.Plague, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Plague, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Plague, ExplosionType.Plague);
        fields.get("minRange").set(WeaponType.Plague, 0);
        fields.get("maxRange").set(WeaponType.Plague, 288);
        fields.get("innerSplashRadius").set(WeaponType.Plague, 0);
        fields.get("medianSplashRadius").set(WeaponType.Plague, 0);
        fields.get("outerSplashRadius").set(WeaponType.Plague, 0);
        fields.get("targetsAir").set(WeaponType.Plague, true);
        fields.get("targetsGround").set(WeaponType.Plague, true);
        fields.get("targetsMechanical").set(WeaponType.Plague, false);
        fields.get("targetsOrganic").set(WeaponType.Plague, false);
        fields.get("targetsNonBuilding").set(WeaponType.Plague, false);
        fields.get("targetsNonRobotic").set(WeaponType.Plague, false);
        fields.get("targetsTerrain").set(WeaponType.Plague, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Plague, false);
        fields.get("targetsOwn").set(WeaponType.Plague, false);
    }
    private void initializeWeaponType_Consume() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Consume, 61);
        fields.get("tech").set(WeaponType.Consume, TechType.Consume);
        fields.get("whatUses").set(WeaponType.Consume, UnitType.Zerg_Defiler);
        fields.get("damageAmount").set(WeaponType.Consume, 0);
        fields.get("damageBonus").set(WeaponType.Consume, 0);
        fields.get("damageCooldown").set(WeaponType.Consume, 1);
        fields.get("damageFactor").set(WeaponType.Consume, 1);
        fields.get("upgradeType").set(WeaponType.Consume, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Consume, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Consume, ExplosionType.Consume);
        fields.get("minRange").set(WeaponType.Consume, 0);
        fields.get("maxRange").set(WeaponType.Consume, 16);
        fields.get("innerSplashRadius").set(WeaponType.Consume, 0);
        fields.get("medianSplashRadius").set(WeaponType.Consume, 0);
        fields.get("outerSplashRadius").set(WeaponType.Consume, 0);
        fields.get("targetsAir").set(WeaponType.Consume, true);
        fields.get("targetsGround").set(WeaponType.Consume, true);
        fields.get("targetsMechanical").set(WeaponType.Consume, false);
        fields.get("targetsOrganic").set(WeaponType.Consume, true);
        fields.get("targetsNonBuilding").set(WeaponType.Consume, true);
        fields.get("targetsNonRobotic").set(WeaponType.Consume, false);
        fields.get("targetsTerrain").set(WeaponType.Consume, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Consume, false);
        fields.get("targetsOwn").set(WeaponType.Consume, true);
    }
    private void initializeWeaponType_Particle_Beam() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Particle_Beam, 62);
        fields.get("tech").set(WeaponType.Particle_Beam, TechType.None);
        fields.get("whatUses").set(WeaponType.Particle_Beam, UnitType.Protoss_Probe);
        fields.get("damageAmount").set(WeaponType.Particle_Beam, 5);
        fields.get("damageBonus").set(WeaponType.Particle_Beam, 0);
        fields.get("damageCooldown").set(WeaponType.Particle_Beam, 22);
        fields.get("damageFactor").set(WeaponType.Particle_Beam, 1);
        fields.get("upgradeType").set(WeaponType.Particle_Beam, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Particle_Beam, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Particle_Beam, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Particle_Beam, 0);
        fields.get("maxRange").set(WeaponType.Particle_Beam, 32);
        fields.get("innerSplashRadius").set(WeaponType.Particle_Beam, 0);
        fields.get("medianSplashRadius").set(WeaponType.Particle_Beam, 0);
        fields.get("outerSplashRadius").set(WeaponType.Particle_Beam, 0);
        fields.get("targetsAir").set(WeaponType.Particle_Beam, false);
        fields.get("targetsGround").set(WeaponType.Particle_Beam, true);
        fields.get("targetsMechanical").set(WeaponType.Particle_Beam, false);
        fields.get("targetsOrganic").set(WeaponType.Particle_Beam, false);
        fields.get("targetsNonBuilding").set(WeaponType.Particle_Beam, false);
        fields.get("targetsNonRobotic").set(WeaponType.Particle_Beam, false);
        fields.get("targetsTerrain").set(WeaponType.Particle_Beam, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Particle_Beam, false);
        fields.get("targetsOwn").set(WeaponType.Particle_Beam, false);
    }
    private void initializeWeaponType_Psi_Blades() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Psi_Blades, 64);
        fields.get("tech").set(WeaponType.Psi_Blades, TechType.None);
        fields.get("whatUses").set(WeaponType.Psi_Blades, UnitType.Protoss_Zealot);
        fields.get("damageAmount").set(WeaponType.Psi_Blades, 8);
        fields.get("damageBonus").set(WeaponType.Psi_Blades, 1);
        fields.get("damageCooldown").set(WeaponType.Psi_Blades, 22);
        fields.get("damageFactor").set(WeaponType.Psi_Blades, 1);
        fields.get("upgradeType").set(WeaponType.Psi_Blades, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Psi_Blades, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Psi_Blades, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Psi_Blades, 0);
        fields.get("maxRange").set(WeaponType.Psi_Blades, 15);
        fields.get("innerSplashRadius").set(WeaponType.Psi_Blades, 0);
        fields.get("medianSplashRadius").set(WeaponType.Psi_Blades, 0);
        fields.get("outerSplashRadius").set(WeaponType.Psi_Blades, 0);
        fields.get("targetsAir").set(WeaponType.Psi_Blades, false);
        fields.get("targetsGround").set(WeaponType.Psi_Blades, true);
        fields.get("targetsMechanical").set(WeaponType.Psi_Blades, false);
        fields.get("targetsOrganic").set(WeaponType.Psi_Blades, false);
        fields.get("targetsNonBuilding").set(WeaponType.Psi_Blades, false);
        fields.get("targetsNonRobotic").set(WeaponType.Psi_Blades, false);
        fields.get("targetsTerrain").set(WeaponType.Psi_Blades, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Psi_Blades, false);
        fields.get("targetsOwn").set(WeaponType.Psi_Blades, false);
    }
    private void initializeWeaponType_Psi_Blades_Fenix() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Psi_Blades_Fenix, 65);
        fields.get("tech").set(WeaponType.Psi_Blades_Fenix, TechType.None);
        fields.get("whatUses").set(WeaponType.Psi_Blades_Fenix, UnitType.Hero_Fenix_Zealot);
        fields.get("damageAmount").set(WeaponType.Psi_Blades_Fenix, 20);
        fields.get("damageBonus").set(WeaponType.Psi_Blades_Fenix, 1);
        fields.get("damageCooldown").set(WeaponType.Psi_Blades_Fenix, 22);
        fields.get("damageFactor").set(WeaponType.Psi_Blades_Fenix, 1);
        fields.get("upgradeType").set(WeaponType.Psi_Blades_Fenix, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Psi_Blades_Fenix, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Psi_Blades_Fenix, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Psi_Blades_Fenix, 0);
        fields.get("maxRange").set(WeaponType.Psi_Blades_Fenix, 15);
        fields.get("innerSplashRadius").set(WeaponType.Psi_Blades_Fenix, 0);
        fields.get("medianSplashRadius").set(WeaponType.Psi_Blades_Fenix, 0);
        fields.get("outerSplashRadius").set(WeaponType.Psi_Blades_Fenix, 0);
        fields.get("targetsAir").set(WeaponType.Psi_Blades_Fenix, false);
        fields.get("targetsGround").set(WeaponType.Psi_Blades_Fenix, true);
        fields.get("targetsMechanical").set(WeaponType.Psi_Blades_Fenix, false);
        fields.get("targetsOrganic").set(WeaponType.Psi_Blades_Fenix, false);
        fields.get("targetsNonBuilding").set(WeaponType.Psi_Blades_Fenix, false);
        fields.get("targetsNonRobotic").set(WeaponType.Psi_Blades_Fenix, false);
        fields.get("targetsTerrain").set(WeaponType.Psi_Blades_Fenix, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Psi_Blades_Fenix, false);
        fields.get("targetsOwn").set(WeaponType.Psi_Blades_Fenix, false);
    }
    private void initializeWeaponType_Phase_Disruptor() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Phase_Disruptor, 66);
        fields.get("tech").set(WeaponType.Phase_Disruptor, TechType.None);
        fields.get("whatUses").set(WeaponType.Phase_Disruptor, UnitType.Protoss_Dragoon);
        fields.get("damageAmount").set(WeaponType.Phase_Disruptor, 20);
        fields.get("damageBonus").set(WeaponType.Phase_Disruptor, 2);
        fields.get("damageCooldown").set(WeaponType.Phase_Disruptor, 30);
        fields.get("damageFactor").set(WeaponType.Phase_Disruptor, 1);
        fields.get("upgradeType").set(WeaponType.Phase_Disruptor, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Phase_Disruptor, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Phase_Disruptor, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Phase_Disruptor, 0);
        fields.get("maxRange").set(WeaponType.Phase_Disruptor, 128);
        fields.get("innerSplashRadius").set(WeaponType.Phase_Disruptor, 0);
        fields.get("medianSplashRadius").set(WeaponType.Phase_Disruptor, 0);
        fields.get("outerSplashRadius").set(WeaponType.Phase_Disruptor, 0);
        fields.get("targetsAir").set(WeaponType.Phase_Disruptor, true);
        fields.get("targetsGround").set(WeaponType.Phase_Disruptor, true);
        fields.get("targetsMechanical").set(WeaponType.Phase_Disruptor, false);
        fields.get("targetsOrganic").set(WeaponType.Phase_Disruptor, false);
        fields.get("targetsNonBuilding").set(WeaponType.Phase_Disruptor, false);
        fields.get("targetsNonRobotic").set(WeaponType.Phase_Disruptor, false);
        fields.get("targetsTerrain").set(WeaponType.Phase_Disruptor, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Phase_Disruptor, false);
        fields.get("targetsOwn").set(WeaponType.Phase_Disruptor, false);
    }
    private void initializeWeaponType_Phase_Disruptor_Fenix() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Phase_Disruptor_Fenix, 67);
        fields.get("tech").set(WeaponType.Phase_Disruptor_Fenix, TechType.None);
        fields.get("whatUses").set(WeaponType.Phase_Disruptor_Fenix, UnitType.Hero_Fenix_Dragoon);
        fields.get("damageAmount").set(WeaponType.Phase_Disruptor_Fenix, 45);
        fields.get("damageBonus").set(WeaponType.Phase_Disruptor_Fenix, 2);
        fields.get("damageCooldown").set(WeaponType.Phase_Disruptor_Fenix, 22);
        fields.get("damageFactor").set(WeaponType.Phase_Disruptor_Fenix, 1);
        fields.get("upgradeType").set(WeaponType.Phase_Disruptor_Fenix, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Phase_Disruptor_Fenix, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Phase_Disruptor_Fenix, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Phase_Disruptor_Fenix, 0);
        fields.get("maxRange").set(WeaponType.Phase_Disruptor_Fenix, 128);
        fields.get("innerSplashRadius").set(WeaponType.Phase_Disruptor_Fenix, 0);
        fields.get("medianSplashRadius").set(WeaponType.Phase_Disruptor_Fenix, 0);
        fields.get("outerSplashRadius").set(WeaponType.Phase_Disruptor_Fenix, 0);
        fields.get("targetsAir").set(WeaponType.Phase_Disruptor_Fenix, true);
        fields.get("targetsGround").set(WeaponType.Phase_Disruptor_Fenix, true);
        fields.get("targetsMechanical").set(WeaponType.Phase_Disruptor_Fenix, false);
        fields.get("targetsOrganic").set(WeaponType.Phase_Disruptor_Fenix, false);
        fields.get("targetsNonBuilding").set(WeaponType.Phase_Disruptor_Fenix, false);
        fields.get("targetsNonRobotic").set(WeaponType.Phase_Disruptor_Fenix, false);
        fields.get("targetsTerrain").set(WeaponType.Phase_Disruptor_Fenix, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Phase_Disruptor_Fenix, false);
        fields.get("targetsOwn").set(WeaponType.Phase_Disruptor_Fenix, false);
    }
    private void initializeWeaponType_Psi_Assault() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Psi_Assault, 69);
        fields.get("tech").set(WeaponType.Psi_Assault, TechType.None);
        fields.get("whatUses").set(WeaponType.Psi_Assault, UnitType.Hero_Tassadar);
        fields.get("damageAmount").set(WeaponType.Psi_Assault, 20);
        fields.get("damageBonus").set(WeaponType.Psi_Assault, 1);
        fields.get("damageCooldown").set(WeaponType.Psi_Assault, 22);
        fields.get("damageFactor").set(WeaponType.Psi_Assault, 1);
        fields.get("upgradeType").set(WeaponType.Psi_Assault, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Psi_Assault, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Psi_Assault, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Psi_Assault, 0);
        fields.get("maxRange").set(WeaponType.Psi_Assault, 96);
        fields.get("innerSplashRadius").set(WeaponType.Psi_Assault, 0);
        fields.get("medianSplashRadius").set(WeaponType.Psi_Assault, 0);
        fields.get("outerSplashRadius").set(WeaponType.Psi_Assault, 0);
        fields.get("targetsAir").set(WeaponType.Psi_Assault, false);
        fields.get("targetsGround").set(WeaponType.Psi_Assault, true);
        fields.get("targetsMechanical").set(WeaponType.Psi_Assault, false);
        fields.get("targetsOrganic").set(WeaponType.Psi_Assault, false);
        fields.get("targetsNonBuilding").set(WeaponType.Psi_Assault, false);
        fields.get("targetsNonRobotic").set(WeaponType.Psi_Assault, false);
        fields.get("targetsTerrain").set(WeaponType.Psi_Assault, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Psi_Assault, false);
        fields.get("targetsOwn").set(WeaponType.Psi_Assault, false);
    }
    private void initializeWeaponType_Psionic_Shockwave() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Psionic_Shockwave, 70);
        fields.get("tech").set(WeaponType.Psionic_Shockwave, TechType.None);
        fields.get("whatUses").set(WeaponType.Psionic_Shockwave, UnitType.Protoss_Archon);
        fields.get("damageAmount").set(WeaponType.Psionic_Shockwave, 30);
        fields.get("damageBonus").set(WeaponType.Psionic_Shockwave, 3);
        fields.get("damageCooldown").set(WeaponType.Psionic_Shockwave, 20);
        fields.get("damageFactor").set(WeaponType.Psionic_Shockwave, 1);
        fields.get("upgradeType").set(WeaponType.Psionic_Shockwave, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Psionic_Shockwave, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Psionic_Shockwave, ExplosionType.Enemy_Splash);
        fields.get("minRange").set(WeaponType.Psionic_Shockwave, 0);
        fields.get("maxRange").set(WeaponType.Psionic_Shockwave, 64);
        fields.get("innerSplashRadius").set(WeaponType.Psionic_Shockwave, 3);
        fields.get("medianSplashRadius").set(WeaponType.Psionic_Shockwave, 15);
        fields.get("outerSplashRadius").set(WeaponType.Psionic_Shockwave, 30);
        fields.get("targetsAir").set(WeaponType.Psionic_Shockwave, true);
        fields.get("targetsGround").set(WeaponType.Psionic_Shockwave, true);
        fields.get("targetsMechanical").set(WeaponType.Psionic_Shockwave, false);
        fields.get("targetsOrganic").set(WeaponType.Psionic_Shockwave, false);
        fields.get("targetsNonBuilding").set(WeaponType.Psionic_Shockwave, false);
        fields.get("targetsNonRobotic").set(WeaponType.Psionic_Shockwave, false);
        fields.get("targetsTerrain").set(WeaponType.Psionic_Shockwave, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Psionic_Shockwave, false);
        fields.get("targetsOwn").set(WeaponType.Psionic_Shockwave, false);
    }
    private void initializeWeaponType_Psionic_Shockwave_TZ_Archon() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Psionic_Shockwave_TZ_Archon, 71);
        fields.get("tech").set(WeaponType.Psionic_Shockwave_TZ_Archon, TechType.None);
        fields.get("whatUses").set(WeaponType.Psionic_Shockwave_TZ_Archon, UnitType.Hero_Tassadar_Zeratul_Archon);
        fields.get("damageAmount").set(WeaponType.Psionic_Shockwave_TZ_Archon, 60);
        fields.get("damageBonus").set(WeaponType.Psionic_Shockwave_TZ_Archon, 3);
        fields.get("damageCooldown").set(WeaponType.Psionic_Shockwave_TZ_Archon, 20);
        fields.get("damageFactor").set(WeaponType.Psionic_Shockwave_TZ_Archon, 1);
        fields.get("upgradeType").set(WeaponType.Psionic_Shockwave_TZ_Archon, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Psionic_Shockwave_TZ_Archon, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Psionic_Shockwave_TZ_Archon, ExplosionType.Enemy_Splash);
        fields.get("minRange").set(WeaponType.Psionic_Shockwave_TZ_Archon, 0);
        fields.get("maxRange").set(WeaponType.Psionic_Shockwave_TZ_Archon, 64);
        fields.get("innerSplashRadius").set(WeaponType.Psionic_Shockwave_TZ_Archon, 3);
        fields.get("medianSplashRadius").set(WeaponType.Psionic_Shockwave_TZ_Archon, 15);
        fields.get("outerSplashRadius").set(WeaponType.Psionic_Shockwave_TZ_Archon, 30);
        fields.get("targetsAir").set(WeaponType.Psionic_Shockwave_TZ_Archon, true);
        fields.get("targetsGround").set(WeaponType.Psionic_Shockwave_TZ_Archon, true);
        fields.get("targetsMechanical").set(WeaponType.Psionic_Shockwave_TZ_Archon, false);
        fields.get("targetsOrganic").set(WeaponType.Psionic_Shockwave_TZ_Archon, false);
        fields.get("targetsNonBuilding").set(WeaponType.Psionic_Shockwave_TZ_Archon, false);
        fields.get("targetsNonRobotic").set(WeaponType.Psionic_Shockwave_TZ_Archon, false);
        fields.get("targetsTerrain").set(WeaponType.Psionic_Shockwave_TZ_Archon, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Psionic_Shockwave_TZ_Archon, false);
        fields.get("targetsOwn").set(WeaponType.Psionic_Shockwave_TZ_Archon, false);
    }
    private void initializeWeaponType_Dual_Photon_Blasters() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Dual_Photon_Blasters, 73);
        fields.get("tech").set(WeaponType.Dual_Photon_Blasters, TechType.None);
        fields.get("whatUses").set(WeaponType.Dual_Photon_Blasters, UnitType.Protoss_Scout);
        fields.get("damageAmount").set(WeaponType.Dual_Photon_Blasters, 8);
        fields.get("damageBonus").set(WeaponType.Dual_Photon_Blasters, 1);
        fields.get("damageCooldown").set(WeaponType.Dual_Photon_Blasters, 30);
        fields.get("damageFactor").set(WeaponType.Dual_Photon_Blasters, 1);
        fields.get("upgradeType").set(WeaponType.Dual_Photon_Blasters, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Dual_Photon_Blasters, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Dual_Photon_Blasters, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Dual_Photon_Blasters, 0);
        fields.get("maxRange").set(WeaponType.Dual_Photon_Blasters, 128);
        fields.get("innerSplashRadius").set(WeaponType.Dual_Photon_Blasters, 0);
        fields.get("medianSplashRadius").set(WeaponType.Dual_Photon_Blasters, 0);
        fields.get("outerSplashRadius").set(WeaponType.Dual_Photon_Blasters, 0);
        fields.get("targetsAir").set(WeaponType.Dual_Photon_Blasters, false);
        fields.get("targetsGround").set(WeaponType.Dual_Photon_Blasters, true);
        fields.get("targetsMechanical").set(WeaponType.Dual_Photon_Blasters, false);
        fields.get("targetsOrganic").set(WeaponType.Dual_Photon_Blasters, false);
        fields.get("targetsNonBuilding").set(WeaponType.Dual_Photon_Blasters, false);
        fields.get("targetsNonRobotic").set(WeaponType.Dual_Photon_Blasters, false);
        fields.get("targetsTerrain").set(WeaponType.Dual_Photon_Blasters, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Dual_Photon_Blasters, false);
        fields.get("targetsOwn").set(WeaponType.Dual_Photon_Blasters, false);
    }
    private void initializeWeaponType_Anti_Matter_Missiles() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Anti_Matter_Missiles, 74);
        fields.get("tech").set(WeaponType.Anti_Matter_Missiles, TechType.None);
        fields.get("whatUses").set(WeaponType.Anti_Matter_Missiles, UnitType.Protoss_Scout);
        fields.get("damageAmount").set(WeaponType.Anti_Matter_Missiles, 14);
        fields.get("damageBonus").set(WeaponType.Anti_Matter_Missiles, 1);
        fields.get("damageCooldown").set(WeaponType.Anti_Matter_Missiles, 22);
        fields.get("damageFactor").set(WeaponType.Anti_Matter_Missiles, 2);
        fields.get("upgradeType").set(WeaponType.Anti_Matter_Missiles, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Anti_Matter_Missiles, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Anti_Matter_Missiles, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Anti_Matter_Missiles, 0);
        fields.get("maxRange").set(WeaponType.Anti_Matter_Missiles, 128);
        fields.get("innerSplashRadius").set(WeaponType.Anti_Matter_Missiles, 0);
        fields.get("medianSplashRadius").set(WeaponType.Anti_Matter_Missiles, 0);
        fields.get("outerSplashRadius").set(WeaponType.Anti_Matter_Missiles, 0);
        fields.get("targetsAir").set(WeaponType.Anti_Matter_Missiles, true);
        fields.get("targetsGround").set(WeaponType.Anti_Matter_Missiles, false);
        fields.get("targetsMechanical").set(WeaponType.Anti_Matter_Missiles, false);
        fields.get("targetsOrganic").set(WeaponType.Anti_Matter_Missiles, false);
        fields.get("targetsNonBuilding").set(WeaponType.Anti_Matter_Missiles, false);
        fields.get("targetsNonRobotic").set(WeaponType.Anti_Matter_Missiles, false);
        fields.get("targetsTerrain").set(WeaponType.Anti_Matter_Missiles, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Anti_Matter_Missiles, false);
        fields.get("targetsOwn").set(WeaponType.Anti_Matter_Missiles, false);
    }
    private void initializeWeaponType_Dual_Photon_Blasters_Mojo() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Dual_Photon_Blasters_Mojo, 75);
        fields.get("tech").set(WeaponType.Dual_Photon_Blasters_Mojo, TechType.None);
        fields.get("whatUses").set(WeaponType.Dual_Photon_Blasters_Mojo, UnitType.Hero_Mojo);
        fields.get("damageAmount").set(WeaponType.Dual_Photon_Blasters_Mojo, 20);
        fields.get("damageBonus").set(WeaponType.Dual_Photon_Blasters_Mojo, 1);
        fields.get("damageCooldown").set(WeaponType.Dual_Photon_Blasters_Mojo, 30);
        fields.get("damageFactor").set(WeaponType.Dual_Photon_Blasters_Mojo, 1);
        fields.get("upgradeType").set(WeaponType.Dual_Photon_Blasters_Mojo, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Dual_Photon_Blasters_Mojo, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Dual_Photon_Blasters_Mojo, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Dual_Photon_Blasters_Mojo, 0);
        fields.get("maxRange").set(WeaponType.Dual_Photon_Blasters_Mojo, 128);
        fields.get("innerSplashRadius").set(WeaponType.Dual_Photon_Blasters_Mojo, 0);
        fields.get("medianSplashRadius").set(WeaponType.Dual_Photon_Blasters_Mojo, 0);
        fields.get("outerSplashRadius").set(WeaponType.Dual_Photon_Blasters_Mojo, 0);
        fields.get("targetsAir").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
        fields.get("targetsGround").set(WeaponType.Dual_Photon_Blasters_Mojo, true);
        fields.get("targetsMechanical").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
        fields.get("targetsOrganic").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
        fields.get("targetsNonBuilding").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
        fields.get("targetsNonRobotic").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
        fields.get("targetsTerrain").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
        fields.get("targetsOwn").set(WeaponType.Dual_Photon_Blasters_Mojo, false);
    }
    private void initializeWeaponType_Anti_Matter_Missiles_Mojo() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Anti_Matter_Missiles_Mojo, 76);
        fields.get("tech").set(WeaponType.Anti_Matter_Missiles_Mojo, TechType.None);
        fields.get("whatUses").set(WeaponType.Anti_Matter_Missiles_Mojo, UnitType.Hero_Mojo);
        fields.get("damageAmount").set(WeaponType.Anti_Matter_Missiles_Mojo, 28);
        fields.get("damageBonus").set(WeaponType.Anti_Matter_Missiles_Mojo, 1);
        fields.get("damageCooldown").set(WeaponType.Anti_Matter_Missiles_Mojo, 22);
        fields.get("damageFactor").set(WeaponType.Anti_Matter_Missiles_Mojo, 2);
        fields.get("upgradeType").set(WeaponType.Anti_Matter_Missiles_Mojo, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Anti_Matter_Missiles_Mojo, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Anti_Matter_Missiles_Mojo, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Anti_Matter_Missiles_Mojo, 0);
        fields.get("maxRange").set(WeaponType.Anti_Matter_Missiles_Mojo, 128);
        fields.get("innerSplashRadius").set(WeaponType.Anti_Matter_Missiles_Mojo, 0);
        fields.get("medianSplashRadius").set(WeaponType.Anti_Matter_Missiles_Mojo, 0);
        fields.get("outerSplashRadius").set(WeaponType.Anti_Matter_Missiles_Mojo, 0);
        fields.get("targetsAir").set(WeaponType.Anti_Matter_Missiles_Mojo, true);
        fields.get("targetsGround").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
        fields.get("targetsMechanical").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
        fields.get("targetsOrganic").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
        fields.get("targetsNonBuilding").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
        fields.get("targetsNonRobotic").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
        fields.get("targetsTerrain").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
        fields.get("targetsOwn").set(WeaponType.Anti_Matter_Missiles_Mojo, false);
    }
    private void initializeWeaponType_Phase_Disruptor_Cannon() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Phase_Disruptor_Cannon, 77);
        fields.get("tech").set(WeaponType.Phase_Disruptor_Cannon, TechType.None);
        fields.get("whatUses").set(WeaponType.Phase_Disruptor_Cannon, UnitType.Protoss_Arbiter);
        fields.get("damageAmount").set(WeaponType.Phase_Disruptor_Cannon, 10);
        fields.get("damageBonus").set(WeaponType.Phase_Disruptor_Cannon, 1);
        fields.get("damageCooldown").set(WeaponType.Phase_Disruptor_Cannon, 45);
        fields.get("damageFactor").set(WeaponType.Phase_Disruptor_Cannon, 1);
        fields.get("upgradeType").set(WeaponType.Phase_Disruptor_Cannon, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Phase_Disruptor_Cannon, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Phase_Disruptor_Cannon, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Phase_Disruptor_Cannon, 0);
        fields.get("maxRange").set(WeaponType.Phase_Disruptor_Cannon, 160);
        fields.get("innerSplashRadius").set(WeaponType.Phase_Disruptor_Cannon, 0);
        fields.get("medianSplashRadius").set(WeaponType.Phase_Disruptor_Cannon, 0);
        fields.get("outerSplashRadius").set(WeaponType.Phase_Disruptor_Cannon, 0);
        fields.get("targetsAir").set(WeaponType.Phase_Disruptor_Cannon, true);
        fields.get("targetsGround").set(WeaponType.Phase_Disruptor_Cannon, true);
        fields.get("targetsMechanical").set(WeaponType.Phase_Disruptor_Cannon, false);
        fields.get("targetsOrganic").set(WeaponType.Phase_Disruptor_Cannon, false);
        fields.get("targetsNonBuilding").set(WeaponType.Phase_Disruptor_Cannon, false);
        fields.get("targetsNonRobotic").set(WeaponType.Phase_Disruptor_Cannon, false);
        fields.get("targetsTerrain").set(WeaponType.Phase_Disruptor_Cannon, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Phase_Disruptor_Cannon, false);
        fields.get("targetsOwn").set(WeaponType.Phase_Disruptor_Cannon, false);
    }
    private void initializeWeaponType_Phase_Disruptor_Cannon_Danimoth() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 78);
        fields.get("tech").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, TechType.None);
        fields.get("whatUses").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, UnitType.Hero_Danimoth);
        fields.get("damageAmount").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 20);
        fields.get("damageBonus").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 1);
        fields.get("damageCooldown").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 45);
        fields.get("damageFactor").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 1);
        fields.get("upgradeType").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 0);
        fields.get("maxRange").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 160);
        fields.get("innerSplashRadius").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 0);
        fields.get("medianSplashRadius").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 0);
        fields.get("outerSplashRadius").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, 0);
        fields.get("targetsAir").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, true);
        fields.get("targetsGround").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, true);
        fields.get("targetsMechanical").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, false);
        fields.get("targetsOrganic").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, false);
        fields.get("targetsNonBuilding").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, false);
        fields.get("targetsNonRobotic").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, false);
        fields.get("targetsTerrain").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, false);
        fields.get("targetsOwn").set(WeaponType.Phase_Disruptor_Cannon_Danimoth, false);
    }
    private void initializeWeaponType_Pulse_Cannon() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Pulse_Cannon, 79);
        fields.get("tech").set(WeaponType.Pulse_Cannon, TechType.None);
        fields.get("whatUses").set(WeaponType.Pulse_Cannon, UnitType.Protoss_Interceptor);
        fields.get("damageAmount").set(WeaponType.Pulse_Cannon, 6);
        fields.get("damageBonus").set(WeaponType.Pulse_Cannon, 1);
        fields.get("damageCooldown").set(WeaponType.Pulse_Cannon, 1);
        fields.get("damageFactor").set(WeaponType.Pulse_Cannon, 1);
        fields.get("upgradeType").set(WeaponType.Pulse_Cannon, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Pulse_Cannon, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Pulse_Cannon, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Pulse_Cannon, 0);
        fields.get("maxRange").set(WeaponType.Pulse_Cannon, 128);
        fields.get("innerSplashRadius").set(WeaponType.Pulse_Cannon, 0);
        fields.get("medianSplashRadius").set(WeaponType.Pulse_Cannon, 0);
        fields.get("outerSplashRadius").set(WeaponType.Pulse_Cannon, 0);
        fields.get("targetsAir").set(WeaponType.Pulse_Cannon, true);
        fields.get("targetsGround").set(WeaponType.Pulse_Cannon, true);
        fields.get("targetsMechanical").set(WeaponType.Pulse_Cannon, false);
        fields.get("targetsOrganic").set(WeaponType.Pulse_Cannon, false);
        fields.get("targetsNonBuilding").set(WeaponType.Pulse_Cannon, false);
        fields.get("targetsNonRobotic").set(WeaponType.Pulse_Cannon, false);
        fields.get("targetsTerrain").set(WeaponType.Pulse_Cannon, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Pulse_Cannon, false);
        fields.get("targetsOwn").set(WeaponType.Pulse_Cannon, false);
    }
    private void initializeWeaponType_STS_Photon_Cannon() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.STS_Photon_Cannon, 80);
        fields.get("tech").set(WeaponType.STS_Photon_Cannon, TechType.None);
        fields.get("whatUses").set(WeaponType.STS_Photon_Cannon, UnitType.Protoss_Photon_Cannon);
        fields.get("damageAmount").set(WeaponType.STS_Photon_Cannon, 20);
        fields.get("damageBonus").set(WeaponType.STS_Photon_Cannon, 0);
        fields.get("damageCooldown").set(WeaponType.STS_Photon_Cannon, 22);
        fields.get("damageFactor").set(WeaponType.STS_Photon_Cannon, 1);
        fields.get("upgradeType").set(WeaponType.STS_Photon_Cannon, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.STS_Photon_Cannon, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.STS_Photon_Cannon, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.STS_Photon_Cannon, 0);
        fields.get("maxRange").set(WeaponType.STS_Photon_Cannon, 224);
        fields.get("innerSplashRadius").set(WeaponType.STS_Photon_Cannon, 0);
        fields.get("medianSplashRadius").set(WeaponType.STS_Photon_Cannon, 0);
        fields.get("outerSplashRadius").set(WeaponType.STS_Photon_Cannon, 0);
        fields.get("targetsAir").set(WeaponType.STS_Photon_Cannon, false);
        fields.get("targetsGround").set(WeaponType.STS_Photon_Cannon, true);
        fields.get("targetsMechanical").set(WeaponType.STS_Photon_Cannon, false);
        fields.get("targetsOrganic").set(WeaponType.STS_Photon_Cannon, false);
        fields.get("targetsNonBuilding").set(WeaponType.STS_Photon_Cannon, false);
        fields.get("targetsNonRobotic").set(WeaponType.STS_Photon_Cannon, false);
        fields.get("targetsTerrain").set(WeaponType.STS_Photon_Cannon, false);
        fields.get("targetsOrgOrMech").set(WeaponType.STS_Photon_Cannon, false);
        fields.get("targetsOwn").set(WeaponType.STS_Photon_Cannon, false);
    }
    private void initializeWeaponType_STA_Photon_Cannon() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.STA_Photon_Cannon, 81);
        fields.get("tech").set(WeaponType.STA_Photon_Cannon, TechType.None);
        fields.get("whatUses").set(WeaponType.STA_Photon_Cannon, UnitType.Protoss_Photon_Cannon);
        fields.get("damageAmount").set(WeaponType.STA_Photon_Cannon, 20);
        fields.get("damageBonus").set(WeaponType.STA_Photon_Cannon, 0);
        fields.get("damageCooldown").set(WeaponType.STA_Photon_Cannon, 22);
        fields.get("damageFactor").set(WeaponType.STA_Photon_Cannon, 1);
        fields.get("upgradeType").set(WeaponType.STA_Photon_Cannon, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.STA_Photon_Cannon, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.STA_Photon_Cannon, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.STA_Photon_Cannon, 0);
        fields.get("maxRange").set(WeaponType.STA_Photon_Cannon, 224);
        fields.get("innerSplashRadius").set(WeaponType.STA_Photon_Cannon, 0);
        fields.get("medianSplashRadius").set(WeaponType.STA_Photon_Cannon, 0);
        fields.get("outerSplashRadius").set(WeaponType.STA_Photon_Cannon, 0);
        fields.get("targetsAir").set(WeaponType.STA_Photon_Cannon, true);
        fields.get("targetsGround").set(WeaponType.STA_Photon_Cannon, false);
        fields.get("targetsMechanical").set(WeaponType.STA_Photon_Cannon, false);
        fields.get("targetsOrganic").set(WeaponType.STA_Photon_Cannon, false);
        fields.get("targetsNonBuilding").set(WeaponType.STA_Photon_Cannon, false);
        fields.get("targetsNonRobotic").set(WeaponType.STA_Photon_Cannon, false);
        fields.get("targetsTerrain").set(WeaponType.STA_Photon_Cannon, false);
        fields.get("targetsOrgOrMech").set(WeaponType.STA_Photon_Cannon, false);
        fields.get("targetsOwn").set(WeaponType.STA_Photon_Cannon, false);
    }
    private void initializeWeaponType_Scarab() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Scarab, 82);
        fields.get("tech").set(WeaponType.Scarab, TechType.None);
        fields.get("whatUses").set(WeaponType.Scarab, UnitType.Protoss_Scarab);
        fields.get("damageAmount").set(WeaponType.Scarab, 100);
        fields.get("damageBonus").set(WeaponType.Scarab, 25);
        fields.get("damageCooldown").set(WeaponType.Scarab, 1);
        fields.get("damageFactor").set(WeaponType.Scarab, 1);
        fields.get("upgradeType").set(WeaponType.Scarab, UpgradeType.Scarab_Damage);
        fields.get("damageType").set(WeaponType.Scarab, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Scarab, ExplosionType.Enemy_Splash);
        fields.get("minRange").set(WeaponType.Scarab, 0);
        fields.get("maxRange").set(WeaponType.Scarab, 128);
        fields.get("innerSplashRadius").set(WeaponType.Scarab, 20);
        fields.get("medianSplashRadius").set(WeaponType.Scarab, 40);
        fields.get("outerSplashRadius").set(WeaponType.Scarab, 60);
        fields.get("targetsAir").set(WeaponType.Scarab, false);
        fields.get("targetsGround").set(WeaponType.Scarab, true);
        fields.get("targetsMechanical").set(WeaponType.Scarab, false);
        fields.get("targetsOrganic").set(WeaponType.Scarab, false);
        fields.get("targetsNonBuilding").set(WeaponType.Scarab, false);
        fields.get("targetsNonRobotic").set(WeaponType.Scarab, false);
        fields.get("targetsTerrain").set(WeaponType.Scarab, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Scarab, false);
        fields.get("targetsOwn").set(WeaponType.Scarab, false);
    }
    private void initializeWeaponType_Stasis_Field() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Stasis_Field, 83);
        fields.get("tech").set(WeaponType.Stasis_Field, TechType.Stasis_Field);
        fields.get("whatUses").set(WeaponType.Stasis_Field, UnitType.Protoss_Arbiter);
        fields.get("damageAmount").set(WeaponType.Stasis_Field, 0);
        fields.get("damageBonus").set(WeaponType.Stasis_Field, 1);
        fields.get("damageCooldown").set(WeaponType.Stasis_Field, 1);
        fields.get("damageFactor").set(WeaponType.Stasis_Field, 1);
        fields.get("upgradeType").set(WeaponType.Stasis_Field, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Stasis_Field, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Stasis_Field, ExplosionType.Stasis_Field);
        fields.get("minRange").set(WeaponType.Stasis_Field, 0);
        fields.get("maxRange").set(WeaponType.Stasis_Field, 288);
        fields.get("innerSplashRadius").set(WeaponType.Stasis_Field, 0);
        fields.get("medianSplashRadius").set(WeaponType.Stasis_Field, 0);
        fields.get("outerSplashRadius").set(WeaponType.Stasis_Field, 0);
        fields.get("targetsAir").set(WeaponType.Stasis_Field, true);
        fields.get("targetsGround").set(WeaponType.Stasis_Field, true);
        fields.get("targetsMechanical").set(WeaponType.Stasis_Field, false);
        fields.get("targetsOrganic").set(WeaponType.Stasis_Field, false);
        fields.get("targetsNonBuilding").set(WeaponType.Stasis_Field, false);
        fields.get("targetsNonRobotic").set(WeaponType.Stasis_Field, false);
        fields.get("targetsTerrain").set(WeaponType.Stasis_Field, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Stasis_Field, false);
        fields.get("targetsOwn").set(WeaponType.Stasis_Field, false);
    }
    private void initializeWeaponType_Psionic_Storm() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Psionic_Storm, 84);
        fields.get("tech").set(WeaponType.Psionic_Storm, TechType.Psionic_Storm);
        fields.get("whatUses").set(WeaponType.Psionic_Storm, UnitType.Protoss_High_Templar);
        fields.get("damageAmount").set(WeaponType.Psionic_Storm, 14);
        fields.get("damageBonus").set(WeaponType.Psionic_Storm, 1);
        fields.get("damageCooldown").set(WeaponType.Psionic_Storm, 45);
        fields.get("damageFactor").set(WeaponType.Psionic_Storm, 1);
        fields.get("upgradeType").set(WeaponType.Psionic_Storm, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Psionic_Storm, DamageType.Ignore_Armor);
        fields.get("explosionType").set(WeaponType.Psionic_Storm, ExplosionType.Radial_Splash);
        fields.get("minRange").set(WeaponType.Psionic_Storm, 0);
        fields.get("maxRange").set(WeaponType.Psionic_Storm, 288);
        fields.get("innerSplashRadius").set(WeaponType.Psionic_Storm, 48);
        fields.get("medianSplashRadius").set(WeaponType.Psionic_Storm, 48);
        fields.get("outerSplashRadius").set(WeaponType.Psionic_Storm, 48);
        fields.get("targetsAir").set(WeaponType.Psionic_Storm, true);
        fields.get("targetsGround").set(WeaponType.Psionic_Storm, true);
        fields.get("targetsMechanical").set(WeaponType.Psionic_Storm, false);
        fields.get("targetsOrganic").set(WeaponType.Psionic_Storm, false);
        fields.get("targetsNonBuilding").set(WeaponType.Psionic_Storm, true);
        fields.get("targetsNonRobotic").set(WeaponType.Psionic_Storm, false);
        fields.get("targetsTerrain").set(WeaponType.Psionic_Storm, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Psionic_Storm, false);
        fields.get("targetsOwn").set(WeaponType.Psionic_Storm, false);
    }
    private void initializeWeaponType_Warp_Blades_Zeratul() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Warp_Blades_Zeratul, 85);
        fields.get("tech").set(WeaponType.Warp_Blades_Zeratul, TechType.None);
        fields.get("whatUses").set(WeaponType.Warp_Blades_Zeratul, UnitType.Hero_Zeratul);
        fields.get("damageAmount").set(WeaponType.Warp_Blades_Zeratul, 100);
        fields.get("damageBonus").set(WeaponType.Warp_Blades_Zeratul, 1);
        fields.get("damageCooldown").set(WeaponType.Warp_Blades_Zeratul, 22);
        fields.get("damageFactor").set(WeaponType.Warp_Blades_Zeratul, 1);
        fields.get("upgradeType").set(WeaponType.Warp_Blades_Zeratul, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Warp_Blades_Zeratul, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Warp_Blades_Zeratul, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Warp_Blades_Zeratul, 0);
        fields.get("maxRange").set(WeaponType.Warp_Blades_Zeratul, 15);
        fields.get("innerSplashRadius").set(WeaponType.Warp_Blades_Zeratul, 0);
        fields.get("medianSplashRadius").set(WeaponType.Warp_Blades_Zeratul, 0);
        fields.get("outerSplashRadius").set(WeaponType.Warp_Blades_Zeratul, 0);
        fields.get("targetsAir").set(WeaponType.Warp_Blades_Zeratul, false);
        fields.get("targetsGround").set(WeaponType.Warp_Blades_Zeratul, true);
        fields.get("targetsMechanical").set(WeaponType.Warp_Blades_Zeratul, false);
        fields.get("targetsOrganic").set(WeaponType.Warp_Blades_Zeratul, false);
        fields.get("targetsNonBuilding").set(WeaponType.Warp_Blades_Zeratul, false);
        fields.get("targetsNonRobotic").set(WeaponType.Warp_Blades_Zeratul, false);
        fields.get("targetsTerrain").set(WeaponType.Warp_Blades_Zeratul, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Warp_Blades_Zeratul, false);
        fields.get("targetsOwn").set(WeaponType.Warp_Blades_Zeratul, false);
    }
    private void initializeWeaponType_Warp_Blades_Hero() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Warp_Blades_Hero, 86);
        fields.get("tech").set(WeaponType.Warp_Blades_Hero, TechType.None);
        fields.get("whatUses").set(WeaponType.Warp_Blades_Hero, UnitType.Hero_Dark_Templar);
        fields.get("damageAmount").set(WeaponType.Warp_Blades_Hero, 45);
        fields.get("damageBonus").set(WeaponType.Warp_Blades_Hero, 1);
        fields.get("damageCooldown").set(WeaponType.Warp_Blades_Hero, 30);
        fields.get("damageFactor").set(WeaponType.Warp_Blades_Hero, 1);
        fields.get("upgradeType").set(WeaponType.Warp_Blades_Hero, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Warp_Blades_Hero, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Warp_Blades_Hero, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Warp_Blades_Hero, 0);
        fields.get("maxRange").set(WeaponType.Warp_Blades_Hero, 15);
        fields.get("innerSplashRadius").set(WeaponType.Warp_Blades_Hero, 0);
        fields.get("medianSplashRadius").set(WeaponType.Warp_Blades_Hero, 0);
        fields.get("outerSplashRadius").set(WeaponType.Warp_Blades_Hero, 0);
        fields.get("targetsAir").set(WeaponType.Warp_Blades_Hero, false);
        fields.get("targetsGround").set(WeaponType.Warp_Blades_Hero, true);
        fields.get("targetsMechanical").set(WeaponType.Warp_Blades_Hero, false);
        fields.get("targetsOrganic").set(WeaponType.Warp_Blades_Hero, false);
        fields.get("targetsNonBuilding").set(WeaponType.Warp_Blades_Hero, false);
        fields.get("targetsNonRobotic").set(WeaponType.Warp_Blades_Hero, false);
        fields.get("targetsTerrain").set(WeaponType.Warp_Blades_Hero, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Warp_Blades_Hero, false);
        fields.get("targetsOwn").set(WeaponType.Warp_Blades_Hero, false);
    }
    private void initializeWeaponType_Platform_Laser_Battery() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("tech").set(WeaponType.Platform_Laser_Battery, null);
        fields.get("whatUses").set(WeaponType.Platform_Laser_Battery, null);
        fields.get("damageAmount").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("damageBonus").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("damageCooldown").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("damageFactor").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("upgradeType").set(WeaponType.Platform_Laser_Battery, null);
        fields.get("damageType").set(WeaponType.Platform_Laser_Battery, null);
        fields.get("explosionType").set(WeaponType.Platform_Laser_Battery, null);
        fields.get("minRange").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("maxRange").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("innerSplashRadius").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("medianSplashRadius").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("outerSplashRadius").set(WeaponType.Platform_Laser_Battery, 0);
        fields.get("targetsAir").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsGround").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsMechanical").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsOrganic").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsNonBuilding").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsNonRobotic").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsTerrain").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Platform_Laser_Battery, false);
        fields.get("targetsOwn").set(WeaponType.Platform_Laser_Battery, false);
    }
    private void initializeWeaponType_Independant_Laser_Battery() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Independant_Laser_Battery, 93);
        fields.get("tech").set(WeaponType.Independant_Laser_Battery, TechType.None);
        fields.get("whatUses").set(WeaponType.Independant_Laser_Battery, UnitType.Special_Independant_Starport);
        fields.get("damageAmount").set(WeaponType.Independant_Laser_Battery, 7);
        fields.get("damageBonus").set(WeaponType.Independant_Laser_Battery, 1);
        fields.get("damageCooldown").set(WeaponType.Independant_Laser_Battery, 22);
        fields.get("damageFactor").set(WeaponType.Independant_Laser_Battery, 1);
        fields.get("upgradeType").set(WeaponType.Independant_Laser_Battery, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Independant_Laser_Battery, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Independant_Laser_Battery, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Independant_Laser_Battery, 0);
        fields.get("maxRange").set(WeaponType.Independant_Laser_Battery, 128);
        fields.get("innerSplashRadius").set(WeaponType.Independant_Laser_Battery, 0);
        fields.get("medianSplashRadius").set(WeaponType.Independant_Laser_Battery, 0);
        fields.get("outerSplashRadius").set(WeaponType.Independant_Laser_Battery, 0);
        fields.get("targetsAir").set(WeaponType.Independant_Laser_Battery, true);
        fields.get("targetsGround").set(WeaponType.Independant_Laser_Battery, false);
        fields.get("targetsMechanical").set(WeaponType.Independant_Laser_Battery, false);
        fields.get("targetsOrganic").set(WeaponType.Independant_Laser_Battery, false);
        fields.get("targetsNonBuilding").set(WeaponType.Independant_Laser_Battery, false);
        fields.get("targetsNonRobotic").set(WeaponType.Independant_Laser_Battery, false);
        fields.get("targetsTerrain").set(WeaponType.Independant_Laser_Battery, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Independant_Laser_Battery, false);
        fields.get("targetsOwn").set(WeaponType.Independant_Laser_Battery, false);
    }
    private void initializeWeaponType_Twin_Autocannons_Floor_Trap() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Twin_Autocannons_Floor_Trap, 96);
        fields.get("tech").set(WeaponType.Twin_Autocannons_Floor_Trap, TechType.None);
        fields.get("whatUses").set(WeaponType.Twin_Autocannons_Floor_Trap, UnitType.Special_Floor_Gun_Trap);
        fields.get("damageAmount").set(WeaponType.Twin_Autocannons_Floor_Trap, 10);
        fields.get("damageBonus").set(WeaponType.Twin_Autocannons_Floor_Trap, 1);
        fields.get("damageCooldown").set(WeaponType.Twin_Autocannons_Floor_Trap, 22);
        fields.get("damageFactor").set(WeaponType.Twin_Autocannons_Floor_Trap, 1);
        fields.get("upgradeType").set(WeaponType.Twin_Autocannons_Floor_Trap, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Twin_Autocannons_Floor_Trap, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Twin_Autocannons_Floor_Trap, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Twin_Autocannons_Floor_Trap, 0);
        fields.get("maxRange").set(WeaponType.Twin_Autocannons_Floor_Trap, 160);
        fields.get("innerSplashRadius").set(WeaponType.Twin_Autocannons_Floor_Trap, 0);
        fields.get("medianSplashRadius").set(WeaponType.Twin_Autocannons_Floor_Trap, 0);
        fields.get("outerSplashRadius").set(WeaponType.Twin_Autocannons_Floor_Trap, 0);
        fields.get("targetsAir").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
        fields.get("targetsGround").set(WeaponType.Twin_Autocannons_Floor_Trap, true);
        fields.get("targetsMechanical").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
        fields.get("targetsOrganic").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
        fields.get("targetsNonBuilding").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
        fields.get("targetsNonRobotic").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
        fields.get("targetsTerrain").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
        fields.get("targetsOwn").set(WeaponType.Twin_Autocannons_Floor_Trap, false);
    }
    private void initializeWeaponType_Hellfire_Missile_Pack_Wall_Trap() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 97);
        fields.get("tech").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, TechType.None);
        fields.get("whatUses").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, UnitType.Special_Wall_Missile_Trap);
        fields.get("damageAmount").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 10);
        fields.get("damageBonus").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 1);
        fields.get("damageCooldown").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 22);
        fields.get("damageFactor").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 2);
        fields.get("upgradeType").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 0);
        fields.get("maxRange").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 160);
        fields.get("innerSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 0);
        fields.get("medianSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 0);
        fields.get("outerSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, 0);
        fields.get("targetsAir").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
        fields.get("targetsGround").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, true);
        fields.get("targetsMechanical").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
        fields.get("targetsOrganic").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
        fields.get("targetsNonBuilding").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
        fields.get("targetsNonRobotic").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
        fields.get("targetsTerrain").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
        fields.get("targetsOwn").set(WeaponType.Hellfire_Missile_Pack_Wall_Trap, false);
    }
    private void initializeWeaponType_Flame_Thrower_Wall_Trap() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Flame_Thrower_Wall_Trap, 98);
        fields.get("tech").set(WeaponType.Flame_Thrower_Wall_Trap, TechType.None);
        fields.get("whatUses").set(WeaponType.Flame_Thrower_Wall_Trap, UnitType.Special_Wall_Flame_Trap);
        fields.get("damageAmount").set(WeaponType.Flame_Thrower_Wall_Trap, 8);
        fields.get("damageBonus").set(WeaponType.Flame_Thrower_Wall_Trap, 1);
        fields.get("damageCooldown").set(WeaponType.Flame_Thrower_Wall_Trap, 22);
        fields.get("damageFactor").set(WeaponType.Flame_Thrower_Wall_Trap, 1);
        fields.get("upgradeType").set(WeaponType.Flame_Thrower_Wall_Trap, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.Flame_Thrower_Wall_Trap, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.Flame_Thrower_Wall_Trap, ExplosionType.Enemy_Splash);
        fields.get("minRange").set(WeaponType.Flame_Thrower_Wall_Trap, 0);
        fields.get("maxRange").set(WeaponType.Flame_Thrower_Wall_Trap, 64);
        fields.get("innerSplashRadius").set(WeaponType.Flame_Thrower_Wall_Trap, 15);
        fields.get("medianSplashRadius").set(WeaponType.Flame_Thrower_Wall_Trap, 20);
        fields.get("outerSplashRadius").set(WeaponType.Flame_Thrower_Wall_Trap, 25);
        fields.get("targetsAir").set(WeaponType.Flame_Thrower_Wall_Trap, false);
        fields.get("targetsGround").set(WeaponType.Flame_Thrower_Wall_Trap, true);
        fields.get("targetsMechanical").set(WeaponType.Flame_Thrower_Wall_Trap, false);
        fields.get("targetsOrganic").set(WeaponType.Flame_Thrower_Wall_Trap, false);
        fields.get("targetsNonBuilding").set(WeaponType.Flame_Thrower_Wall_Trap, false);
        fields.get("targetsNonRobotic").set(WeaponType.Flame_Thrower_Wall_Trap, false);
        fields.get("targetsTerrain").set(WeaponType.Flame_Thrower_Wall_Trap, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Flame_Thrower_Wall_Trap, false);
        fields.get("targetsOwn").set(WeaponType.Flame_Thrower_Wall_Trap, false);
    }
    private void initializeWeaponType_Hellfire_Missile_Pack_Floor_Trap() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 99);
        fields.get("tech").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, TechType.None);
        fields.get("whatUses").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, UnitType.Special_Floor_Missile_Trap);
        fields.get("damageAmount").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 10);
        fields.get("damageBonus").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 1);
        fields.get("damageCooldown").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 22);
        fields.get("damageFactor").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 2);
        fields.get("upgradeType").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, UpgradeType.Terran_Vehicle_Weapons);
        fields.get("damageType").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 0);
        fields.get("maxRange").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 160);
        fields.get("innerSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 0);
        fields.get("medianSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 0);
        fields.get("outerSplashRadius").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, 0);
        fields.get("targetsAir").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
        fields.get("targetsGround").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, true);
        fields.get("targetsMechanical").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
        fields.get("targetsOrganic").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
        fields.get("targetsNonBuilding").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
        fields.get("targetsNonRobotic").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
        fields.get("targetsTerrain").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
        fields.get("targetsOwn").set(WeaponType.Hellfire_Missile_Pack_Floor_Trap, false);
    }
    private void initializeWeaponType_Neutron_Flare() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Neutron_Flare, 100);
        fields.get("tech").set(WeaponType.Neutron_Flare, TechType.None);
        fields.get("whatUses").set(WeaponType.Neutron_Flare, UnitType.Protoss_Corsair);
        fields.get("damageAmount").set(WeaponType.Neutron_Flare, 5);
        fields.get("damageBonus").set(WeaponType.Neutron_Flare, 1);
        fields.get("damageCooldown").set(WeaponType.Neutron_Flare, 8);
        fields.get("damageFactor").set(WeaponType.Neutron_Flare, 1);
        fields.get("upgradeType").set(WeaponType.Neutron_Flare, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Neutron_Flare, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Neutron_Flare, ExplosionType.Air_Splash);
        fields.get("minRange").set(WeaponType.Neutron_Flare, 0);
        fields.get("maxRange").set(WeaponType.Neutron_Flare, 160);
        fields.get("innerSplashRadius").set(WeaponType.Neutron_Flare, 5);
        fields.get("medianSplashRadius").set(WeaponType.Neutron_Flare, 50);
        fields.get("outerSplashRadius").set(WeaponType.Neutron_Flare, 100);
        fields.get("targetsAir").set(WeaponType.Neutron_Flare, true);
        fields.get("targetsGround").set(WeaponType.Neutron_Flare, false);
        fields.get("targetsMechanical").set(WeaponType.Neutron_Flare, false);
        fields.get("targetsOrganic").set(WeaponType.Neutron_Flare, false);
        fields.get("targetsNonBuilding").set(WeaponType.Neutron_Flare, false);
        fields.get("targetsNonRobotic").set(WeaponType.Neutron_Flare, false);
        fields.get("targetsTerrain").set(WeaponType.Neutron_Flare, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Neutron_Flare, false);
        fields.get("targetsOwn").set(WeaponType.Neutron_Flare, false);
    }
    private void initializeWeaponType_Disruption_Web() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Disruption_Web, 101);
        fields.get("tech").set(WeaponType.Disruption_Web, TechType.Disruption_Web);
        fields.get("whatUses").set(WeaponType.Disruption_Web, UnitType.Protoss_Corsair);
        fields.get("damageAmount").set(WeaponType.Disruption_Web, 0);
        fields.get("damageBonus").set(WeaponType.Disruption_Web, 0);
        fields.get("damageCooldown").set(WeaponType.Disruption_Web, 22);
        fields.get("damageFactor").set(WeaponType.Disruption_Web, 1);
        fields.get("upgradeType").set(WeaponType.Disruption_Web, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Disruption_Web, DamageType.Ignore_Armor);
        fields.get("explosionType").set(WeaponType.Disruption_Web, ExplosionType.Disruption_Web);
        fields.get("minRange").set(WeaponType.Disruption_Web, 0);
        fields.get("maxRange").set(WeaponType.Disruption_Web, 288);
        fields.get("innerSplashRadius").set(WeaponType.Disruption_Web, 0);
        fields.get("medianSplashRadius").set(WeaponType.Disruption_Web, 0);
        fields.get("outerSplashRadius").set(WeaponType.Disruption_Web, 0);
        fields.get("targetsAir").set(WeaponType.Disruption_Web, false);
        fields.get("targetsGround").set(WeaponType.Disruption_Web, true);
        fields.get("targetsMechanical").set(WeaponType.Disruption_Web, false);
        fields.get("targetsOrganic").set(WeaponType.Disruption_Web, false);
        fields.get("targetsNonBuilding").set(WeaponType.Disruption_Web, false);
        fields.get("targetsNonRobotic").set(WeaponType.Disruption_Web, false);
        fields.get("targetsTerrain").set(WeaponType.Disruption_Web, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Disruption_Web, false);
        fields.get("targetsOwn").set(WeaponType.Disruption_Web, false);
    }
    private void initializeWeaponType_Restoration() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Restoration, 102);
        fields.get("tech").set(WeaponType.Restoration, TechType.Restoration);
        fields.get("whatUses").set(WeaponType.Restoration, UnitType.Terran_Medic);
        fields.get("damageAmount").set(WeaponType.Restoration, 20);
        fields.get("damageBonus").set(WeaponType.Restoration, 0);
        fields.get("damageCooldown").set(WeaponType.Restoration, 22);
        fields.get("damageFactor").set(WeaponType.Restoration, 1);
        fields.get("upgradeType").set(WeaponType.Restoration, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Restoration, DamageType.Ignore_Armor);
        fields.get("explosionType").set(WeaponType.Restoration, ExplosionType.Restoration);
        fields.get("minRange").set(WeaponType.Restoration, 0);
        fields.get("maxRange").set(WeaponType.Restoration, 192);
        fields.get("innerSplashRadius").set(WeaponType.Restoration, 0);
        fields.get("medianSplashRadius").set(WeaponType.Restoration, 0);
        fields.get("outerSplashRadius").set(WeaponType.Restoration, 0);
        fields.get("targetsAir").set(WeaponType.Restoration, true);
        fields.get("targetsGround").set(WeaponType.Restoration, true);
        fields.get("targetsMechanical").set(WeaponType.Restoration, false);
        fields.get("targetsOrganic").set(WeaponType.Restoration, false);
        fields.get("targetsNonBuilding").set(WeaponType.Restoration, false);
        fields.get("targetsNonRobotic").set(WeaponType.Restoration, false);
        fields.get("targetsTerrain").set(WeaponType.Restoration, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Restoration, false);
        fields.get("targetsOwn").set(WeaponType.Restoration, false);
    }
    private void initializeWeaponType_Halo_Rockets() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Halo_Rockets, 103);
        fields.get("tech").set(WeaponType.Halo_Rockets, TechType.None);
        fields.get("whatUses").set(WeaponType.Halo_Rockets, UnitType.Terran_Valkyrie);
        fields.get("damageAmount").set(WeaponType.Halo_Rockets, 6);
        fields.get("damageBonus").set(WeaponType.Halo_Rockets, 1);
        fields.get("damageCooldown").set(WeaponType.Halo_Rockets, 64);
        fields.get("damageFactor").set(WeaponType.Halo_Rockets, 2);
        fields.get("upgradeType").set(WeaponType.Halo_Rockets, UpgradeType.Terran_Ship_Weapons);
        fields.get("damageType").set(WeaponType.Halo_Rockets, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Halo_Rockets, ExplosionType.Air_Splash);
        fields.get("minRange").set(WeaponType.Halo_Rockets, 0);
        fields.get("maxRange").set(WeaponType.Halo_Rockets, 192);
        fields.get("innerSplashRadius").set(WeaponType.Halo_Rockets, 5);
        fields.get("medianSplashRadius").set(WeaponType.Halo_Rockets, 50);
        fields.get("outerSplashRadius").set(WeaponType.Halo_Rockets, 100);
        fields.get("targetsAir").set(WeaponType.Halo_Rockets, true);
        fields.get("targetsGround").set(WeaponType.Halo_Rockets, false);
        fields.get("targetsMechanical").set(WeaponType.Halo_Rockets, false);
        fields.get("targetsOrganic").set(WeaponType.Halo_Rockets, false);
        fields.get("targetsNonBuilding").set(WeaponType.Halo_Rockets, false);
        fields.get("targetsNonRobotic").set(WeaponType.Halo_Rockets, false);
        fields.get("targetsTerrain").set(WeaponType.Halo_Rockets, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Halo_Rockets, false);
        fields.get("targetsOwn").set(WeaponType.Halo_Rockets, false);
    }
    private void initializeWeaponType_Corrosive_Acid() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Corrosive_Acid, 104);
        fields.get("tech").set(WeaponType.Corrosive_Acid, TechType.None);
        fields.get("whatUses").set(WeaponType.Corrosive_Acid, UnitType.Zerg_Devourer);
        fields.get("damageAmount").set(WeaponType.Corrosive_Acid, 25);
        fields.get("damageBonus").set(WeaponType.Corrosive_Acid, 2);
        fields.get("damageCooldown").set(WeaponType.Corrosive_Acid, 100);
        fields.get("damageFactor").set(WeaponType.Corrosive_Acid, 1);
        fields.get("upgradeType").set(WeaponType.Corrosive_Acid, UpgradeType.Zerg_Flyer_Attacks);
        fields.get("damageType").set(WeaponType.Corrosive_Acid, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Corrosive_Acid, ExplosionType.Corrosive_Acid);
        fields.get("minRange").set(WeaponType.Corrosive_Acid, 0);
        fields.get("maxRange").set(WeaponType.Corrosive_Acid, 192);
        fields.get("innerSplashRadius").set(WeaponType.Corrosive_Acid, 0);
        fields.get("medianSplashRadius").set(WeaponType.Corrosive_Acid, 0);
        fields.get("outerSplashRadius").set(WeaponType.Corrosive_Acid, 0);
        fields.get("targetsAir").set(WeaponType.Corrosive_Acid, true);
        fields.get("targetsGround").set(WeaponType.Corrosive_Acid, false);
        fields.get("targetsMechanical").set(WeaponType.Corrosive_Acid, false);
        fields.get("targetsOrganic").set(WeaponType.Corrosive_Acid, false);
        fields.get("targetsNonBuilding").set(WeaponType.Corrosive_Acid, false);
        fields.get("targetsNonRobotic").set(WeaponType.Corrosive_Acid, false);
        fields.get("targetsTerrain").set(WeaponType.Corrosive_Acid, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Corrosive_Acid, false);
        fields.get("targetsOwn").set(WeaponType.Corrosive_Acid, false);
    }
    private void initializeWeaponType_Mind_Control() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Mind_Control, 105);
        fields.get("tech").set(WeaponType.Mind_Control, TechType.Mind_Control);
        fields.get("whatUses").set(WeaponType.Mind_Control, UnitType.Protoss_Dark_Archon);
        fields.get("damageAmount").set(WeaponType.Mind_Control, 8);
        fields.get("damageBonus").set(WeaponType.Mind_Control, 1);
        fields.get("damageCooldown").set(WeaponType.Mind_Control, 22);
        fields.get("damageFactor").set(WeaponType.Mind_Control, 1);
        fields.get("upgradeType").set(WeaponType.Mind_Control, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Mind_Control, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Mind_Control, ExplosionType.Mind_Control);
        fields.get("minRange").set(WeaponType.Mind_Control, 0);
        fields.get("maxRange").set(WeaponType.Mind_Control, 256);
        fields.get("innerSplashRadius").set(WeaponType.Mind_Control, 0);
        fields.get("medianSplashRadius").set(WeaponType.Mind_Control, 0);
        fields.get("outerSplashRadius").set(WeaponType.Mind_Control, 0);
        fields.get("targetsAir").set(WeaponType.Mind_Control, true);
        fields.get("targetsGround").set(WeaponType.Mind_Control, true);
        fields.get("targetsMechanical").set(WeaponType.Mind_Control, false);
        fields.get("targetsOrganic").set(WeaponType.Mind_Control, false);
        fields.get("targetsNonBuilding").set(WeaponType.Mind_Control, false);
        fields.get("targetsNonRobotic").set(WeaponType.Mind_Control, false);
        fields.get("targetsTerrain").set(WeaponType.Mind_Control, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Mind_Control, false);
        fields.get("targetsOwn").set(WeaponType.Mind_Control, false);
    }
    private void initializeWeaponType_Feedback() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Feedback, 106);
        fields.get("tech").set(WeaponType.Feedback, TechType.Feedback);
        fields.get("whatUses").set(WeaponType.Feedback, UnitType.Protoss_Dark_Archon);
        fields.get("damageAmount").set(WeaponType.Feedback, 8);
        fields.get("damageBonus").set(WeaponType.Feedback, 1);
        fields.get("damageCooldown").set(WeaponType.Feedback, 22);
        fields.get("damageFactor").set(WeaponType.Feedback, 1);
        fields.get("upgradeType").set(WeaponType.Feedback, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Feedback, DamageType.Ignore_Armor);
        fields.get("explosionType").set(WeaponType.Feedback, ExplosionType.Feedback);
        fields.get("minRange").set(WeaponType.Feedback, 0);
        fields.get("maxRange").set(WeaponType.Feedback, 320);
        fields.get("innerSplashRadius").set(WeaponType.Feedback, 0);
        fields.get("medianSplashRadius").set(WeaponType.Feedback, 0);
        fields.get("outerSplashRadius").set(WeaponType.Feedback, 0);
        fields.get("targetsAir").set(WeaponType.Feedback, true);
        fields.get("targetsGround").set(WeaponType.Feedback, true);
        fields.get("targetsMechanical").set(WeaponType.Feedback, false);
        fields.get("targetsOrganic").set(WeaponType.Feedback, false);
        fields.get("targetsNonBuilding").set(WeaponType.Feedback, false);
        fields.get("targetsNonRobotic").set(WeaponType.Feedback, false);
        fields.get("targetsTerrain").set(WeaponType.Feedback, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Feedback, false);
        fields.get("targetsOwn").set(WeaponType.Feedback, false);
    }
    private void initializeWeaponType_Optical_Flare() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Optical_Flare, 107);
        fields.get("tech").set(WeaponType.Optical_Flare, TechType.Optical_Flare);
        fields.get("whatUses").set(WeaponType.Optical_Flare, UnitType.Terran_Medic);
        fields.get("damageAmount").set(WeaponType.Optical_Flare, 8);
        fields.get("damageBonus").set(WeaponType.Optical_Flare, 1);
        fields.get("damageCooldown").set(WeaponType.Optical_Flare, 22);
        fields.get("damageFactor").set(WeaponType.Optical_Flare, 1);
        fields.get("upgradeType").set(WeaponType.Optical_Flare, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Optical_Flare, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Optical_Flare, ExplosionType.Optical_Flare);
        fields.get("minRange").set(WeaponType.Optical_Flare, 0);
        fields.get("maxRange").set(WeaponType.Optical_Flare, 288);
        fields.get("innerSplashRadius").set(WeaponType.Optical_Flare, 0);
        fields.get("medianSplashRadius").set(WeaponType.Optical_Flare, 0);
        fields.get("outerSplashRadius").set(WeaponType.Optical_Flare, 0);
        fields.get("targetsAir").set(WeaponType.Optical_Flare, false);
        fields.get("targetsGround").set(WeaponType.Optical_Flare, true);
        fields.get("targetsMechanical").set(WeaponType.Optical_Flare, false);
        fields.get("targetsOrganic").set(WeaponType.Optical_Flare, false);
        fields.get("targetsNonBuilding").set(WeaponType.Optical_Flare, false);
        fields.get("targetsNonRobotic").set(WeaponType.Optical_Flare, false);
        fields.get("targetsTerrain").set(WeaponType.Optical_Flare, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Optical_Flare, false);
        fields.get("targetsOwn").set(WeaponType.Optical_Flare, false);
    }
    private void initializeWeaponType_Maelstrom() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Maelstrom, 108);
        fields.get("tech").set(WeaponType.Maelstrom, TechType.Maelstrom);
        fields.get("whatUses").set(WeaponType.Maelstrom, UnitType.Protoss_Dark_Archon);
        fields.get("damageAmount").set(WeaponType.Maelstrom, 0);
        fields.get("damageBonus").set(WeaponType.Maelstrom, 1);
        fields.get("damageCooldown").set(WeaponType.Maelstrom, 1);
        fields.get("damageFactor").set(WeaponType.Maelstrom, 1);
        fields.get("upgradeType").set(WeaponType.Maelstrom, UpgradeType.Upgrade_60);
        fields.get("damageType").set(WeaponType.Maelstrom, DamageType.Independent);
        fields.get("explosionType").set(WeaponType.Maelstrom, ExplosionType.Maelstrom);
        fields.get("minRange").set(WeaponType.Maelstrom, 0);
        fields.get("maxRange").set(WeaponType.Maelstrom, 320);
        fields.get("innerSplashRadius").set(WeaponType.Maelstrom, 0);
        fields.get("medianSplashRadius").set(WeaponType.Maelstrom, 0);
        fields.get("outerSplashRadius").set(WeaponType.Maelstrom, 0);
        fields.get("targetsAir").set(WeaponType.Maelstrom, true);
        fields.get("targetsGround").set(WeaponType.Maelstrom, true);
        fields.get("targetsMechanical").set(WeaponType.Maelstrom, false);
        fields.get("targetsOrganic").set(WeaponType.Maelstrom, false);
        fields.get("targetsNonBuilding").set(WeaponType.Maelstrom, false);
        fields.get("targetsNonRobotic").set(WeaponType.Maelstrom, false);
        fields.get("targetsTerrain").set(WeaponType.Maelstrom, true);
        fields.get("targetsOrgOrMech").set(WeaponType.Maelstrom, false);
        fields.get("targetsOwn").set(WeaponType.Maelstrom, false);
    }
    private void initializeWeaponType_Subterranean_Spines() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Subterranean_Spines, 109);
        fields.get("tech").set(WeaponType.Subterranean_Spines, TechType.None);
        fields.get("whatUses").set(WeaponType.Subterranean_Spines, UnitType.Zerg_Lurker);
        fields.get("damageAmount").set(WeaponType.Subterranean_Spines, 20);
        fields.get("damageBonus").set(WeaponType.Subterranean_Spines, 2);
        fields.get("damageCooldown").set(WeaponType.Subterranean_Spines, 37);
        fields.get("damageFactor").set(WeaponType.Subterranean_Spines, 1);
        fields.get("upgradeType").set(WeaponType.Subterranean_Spines, UpgradeType.Zerg_Missile_Attacks);
        fields.get("damageType").set(WeaponType.Subterranean_Spines, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Subterranean_Spines, ExplosionType.Enemy_Splash);
        fields.get("minRange").set(WeaponType.Subterranean_Spines, 0);
        fields.get("maxRange").set(WeaponType.Subterranean_Spines, 192);
        fields.get("innerSplashRadius").set(WeaponType.Subterranean_Spines, 20);
        fields.get("medianSplashRadius").set(WeaponType.Subterranean_Spines, 20);
        fields.get("outerSplashRadius").set(WeaponType.Subterranean_Spines, 20);
        fields.get("targetsAir").set(WeaponType.Subterranean_Spines, false);
        fields.get("targetsGround").set(WeaponType.Subterranean_Spines, true);
        fields.get("targetsMechanical").set(WeaponType.Subterranean_Spines, false);
        fields.get("targetsOrganic").set(WeaponType.Subterranean_Spines, false);
        fields.get("targetsNonBuilding").set(WeaponType.Subterranean_Spines, false);
        fields.get("targetsNonRobotic").set(WeaponType.Subterranean_Spines, false);
        fields.get("targetsTerrain").set(WeaponType.Subterranean_Spines, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Subterranean_Spines, false);
        fields.get("targetsOwn").set(WeaponType.Subterranean_Spines, false);
    }
    private void initializeWeaponType_Warp_Blades() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Warp_Blades, 111);
        fields.get("tech").set(WeaponType.Warp_Blades, TechType.None);
        fields.get("whatUses").set(WeaponType.Warp_Blades, UnitType.Protoss_Dark_Templar);
        fields.get("damageAmount").set(WeaponType.Warp_Blades, 40);
        fields.get("damageBonus").set(WeaponType.Warp_Blades, 3);
        fields.get("damageCooldown").set(WeaponType.Warp_Blades, 30);
        fields.get("damageFactor").set(WeaponType.Warp_Blades, 1);
        fields.get("upgradeType").set(WeaponType.Warp_Blades, UpgradeType.Protoss_Ground_Weapons);
        fields.get("damageType").set(WeaponType.Warp_Blades, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Warp_Blades, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Warp_Blades, 0);
        fields.get("maxRange").set(WeaponType.Warp_Blades, 15);
        fields.get("innerSplashRadius").set(WeaponType.Warp_Blades, 0);
        fields.get("medianSplashRadius").set(WeaponType.Warp_Blades, 0);
        fields.get("outerSplashRadius").set(WeaponType.Warp_Blades, 0);
        fields.get("targetsAir").set(WeaponType.Warp_Blades, false);
        fields.get("targetsGround").set(WeaponType.Warp_Blades, true);
        fields.get("targetsMechanical").set(WeaponType.Warp_Blades, false);
        fields.get("targetsOrganic").set(WeaponType.Warp_Blades, false);
        fields.get("targetsNonBuilding").set(WeaponType.Warp_Blades, false);
        fields.get("targetsNonRobotic").set(WeaponType.Warp_Blades, false);
        fields.get("targetsTerrain").set(WeaponType.Warp_Blades, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Warp_Blades, false);
        fields.get("targetsOwn").set(WeaponType.Warp_Blades, false);
    }
    private void initializeWeaponType_C_10_Canister_Rifle_Samir_Duran() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 112);
        fields.get("tech").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, TechType.None);
        fields.get("whatUses").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, UnitType.Hero_Samir_Duran);
        fields.get("damageAmount").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 25);
        fields.get("damageBonus").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 1);
        fields.get("damageCooldown").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 22);
        fields.get("damageFactor").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 1);
        fields.get("upgradeType").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 0);
        fields.get("maxRange").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 192);
        fields.get("innerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 0);
        fields.get("medianSplashRadius").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 0);
        fields.get("outerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, 0);
        fields.get("targetsAir").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, true);
        fields.get("targetsGround").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, true);
        fields.get("targetsMechanical").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, false);
        fields.get("targetsOrganic").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, false);
        fields.get("targetsNonBuilding").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, false);
        fields.get("targetsNonRobotic").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, false);
        fields.get("targetsTerrain").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, false);
        fields.get("targetsOrgOrMech").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, false);
        fields.get("targetsOwn").set(WeaponType.C_10_Canister_Rifle_Samir_Duran, false);
    }
    private void initializeWeaponType_C_10_Canister_Rifle_Infested_Duran() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 113);
        fields.get("tech").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, TechType.None);
        fields.get("whatUses").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, UnitType.Hero_Infested_Duran);
        fields.get("damageAmount").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 25);
        fields.get("damageBonus").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 1);
        fields.get("damageCooldown").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 22);
        fields.get("damageFactor").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 1);
        fields.get("upgradeType").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 0);
        fields.get("maxRange").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 192);
        fields.get("innerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 0);
        fields.get("medianSplashRadius").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 0);
        fields.get("outerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, 0);
        fields.get("targetsAir").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, true);
        fields.get("targetsGround").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, true);
        fields.get("targetsMechanical").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, false);
        fields.get("targetsOrganic").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, false);
        fields.get("targetsNonBuilding").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, false);
        fields.get("targetsNonRobotic").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, false);
        fields.get("targetsTerrain").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, false);
        fields.get("targetsOrgOrMech").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, false);
        fields.get("targetsOwn").set(WeaponType.C_10_Canister_Rifle_Infested_Duran, false);
    }
    private void initializeWeaponType_Dual_Photon_Blasters_Artanis() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Dual_Photon_Blasters_Artanis, 114);
        fields.get("tech").set(WeaponType.Dual_Photon_Blasters_Artanis, TechType.None);
        fields.get("whatUses").set(WeaponType.Dual_Photon_Blasters_Artanis, UnitType.Hero_Artanis);
        fields.get("damageAmount").set(WeaponType.Dual_Photon_Blasters_Artanis, 20);
        fields.get("damageBonus").set(WeaponType.Dual_Photon_Blasters_Artanis, 1);
        fields.get("damageCooldown").set(WeaponType.Dual_Photon_Blasters_Artanis, 30);
        fields.get("damageFactor").set(WeaponType.Dual_Photon_Blasters_Artanis, 1);
        fields.get("upgradeType").set(WeaponType.Dual_Photon_Blasters_Artanis, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Dual_Photon_Blasters_Artanis, DamageType.Normal);
        fields.get("explosionType").set(WeaponType.Dual_Photon_Blasters_Artanis, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Dual_Photon_Blasters_Artanis, 0);
        fields.get("maxRange").set(WeaponType.Dual_Photon_Blasters_Artanis, 128);
        fields.get("innerSplashRadius").set(WeaponType.Dual_Photon_Blasters_Artanis, 0);
        fields.get("medianSplashRadius").set(WeaponType.Dual_Photon_Blasters_Artanis, 0);
        fields.get("outerSplashRadius").set(WeaponType.Dual_Photon_Blasters_Artanis, 0);
        fields.get("targetsAir").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
        fields.get("targetsGround").set(WeaponType.Dual_Photon_Blasters_Artanis, true);
        fields.get("targetsMechanical").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
        fields.get("targetsOrganic").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
        fields.get("targetsNonBuilding").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
        fields.get("targetsNonRobotic").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
        fields.get("targetsTerrain").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
        fields.get("targetsOwn").set(WeaponType.Dual_Photon_Blasters_Artanis, false);
    }
    private void initializeWeaponType_Anti_Matter_Missiles_Artanis() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Anti_Matter_Missiles_Artanis, 115);
        fields.get("tech").set(WeaponType.Anti_Matter_Missiles_Artanis, TechType.None);
        fields.get("whatUses").set(WeaponType.Anti_Matter_Missiles_Artanis, UnitType.Hero_Artanis);
        fields.get("damageAmount").set(WeaponType.Anti_Matter_Missiles_Artanis, 28);
        fields.get("damageBonus").set(WeaponType.Anti_Matter_Missiles_Artanis, 1);
        fields.get("damageCooldown").set(WeaponType.Anti_Matter_Missiles_Artanis, 22);
        fields.get("damageFactor").set(WeaponType.Anti_Matter_Missiles_Artanis, 2);
        fields.get("upgradeType").set(WeaponType.Anti_Matter_Missiles_Artanis, UpgradeType.Protoss_Air_Weapons);
        fields.get("damageType").set(WeaponType.Anti_Matter_Missiles_Artanis, DamageType.Explosive);
        fields.get("explosionType").set(WeaponType.Anti_Matter_Missiles_Artanis, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.Anti_Matter_Missiles_Artanis, 0);
        fields.get("maxRange").set(WeaponType.Anti_Matter_Missiles_Artanis, 128);
        fields.get("innerSplashRadius").set(WeaponType.Anti_Matter_Missiles_Artanis, 0);
        fields.get("medianSplashRadius").set(WeaponType.Anti_Matter_Missiles_Artanis, 0);
        fields.get("outerSplashRadius").set(WeaponType.Anti_Matter_Missiles_Artanis, 0);
        fields.get("targetsAir").set(WeaponType.Anti_Matter_Missiles_Artanis, true);
        fields.get("targetsGround").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
        fields.get("targetsMechanical").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
        fields.get("targetsOrganic").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
        fields.get("targetsNonBuilding").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
        fields.get("targetsNonRobotic").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
        fields.get("targetsTerrain").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
        fields.get("targetsOwn").set(WeaponType.Anti_Matter_Missiles_Artanis, false);
    }
    private void initializeWeaponType_C_10_Canister_Rifle_Alexei_Stukov() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 116);
        fields.get("tech").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, TechType.None);
        fields.get("whatUses").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, UnitType.Hero_Alexei_Stukov);
        fields.get("damageAmount").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 30);
        fields.get("damageBonus").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 1);
        fields.get("damageCooldown").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 22);
        fields.get("damageFactor").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 1);
        fields.get("upgradeType").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, UpgradeType.Terran_Infantry_Weapons);
        fields.get("damageType").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, DamageType.Concussive);
        fields.get("explosionType").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, ExplosionType.Normal);
        fields.get("minRange").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 0);
        fields.get("maxRange").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 192);
        fields.get("innerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 0);
        fields.get("medianSplashRadius").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 0);
        fields.get("outerSplashRadius").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, 0);
        fields.get("targetsAir").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, true);
        fields.get("targetsGround").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, true);
        fields.get("targetsMechanical").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, false);
        fields.get("targetsOrganic").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, false);
        fields.get("targetsNonBuilding").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, false);
        fields.get("targetsNonRobotic").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, false);
        fields.get("targetsTerrain").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, false);
        fields.get("targetsOrgOrMech").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, false);
        fields.get("targetsOwn").set(WeaponType.C_10_Canister_Rifle_Alexei_Stukov, false);
    }
    private void initializeWeaponType_None() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.None, 130);
        fields.get("tech").set(WeaponType.None, TechType.None);
        fields.get("whatUses").set(WeaponType.None, UnitType.None);
        fields.get("damageAmount").set(WeaponType.None, 0);
        fields.get("damageBonus").set(WeaponType.None, 0);
        fields.get("damageCooldown").set(WeaponType.None, 0);
        fields.get("damageFactor").set(WeaponType.None, 0);
        fields.get("upgradeType").set(WeaponType.None, UpgradeType.None);
        fields.get("damageType").set(WeaponType.None, DamageType.None);
        fields.get("explosionType").set(WeaponType.None, ExplosionType.None);
        fields.get("minRange").set(WeaponType.None, 0);
        fields.get("maxRange").set(WeaponType.None, 0);
        fields.get("innerSplashRadius").set(WeaponType.None, 0);
        fields.get("medianSplashRadius").set(WeaponType.None, 0);
        fields.get("outerSplashRadius").set(WeaponType.None, 0);
        fields.get("targetsAir").set(WeaponType.None, false);
        fields.get("targetsGround").set(WeaponType.None, false);
        fields.get("targetsMechanical").set(WeaponType.None, false);
        fields.get("targetsOrganic").set(WeaponType.None, false);
        fields.get("targetsNonBuilding").set(WeaponType.None, false);
        fields.get("targetsNonRobotic").set(WeaponType.None, false);
        fields.get("targetsTerrain").set(WeaponType.None, false);
        fields.get("targetsOrgOrMech").set(WeaponType.None, false);
        fields.get("targetsOwn").set(WeaponType.None, false);
    }
    private void initializeWeaponType_Unknown() throws Exception {
        Class<?> c = WeaponType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(WeaponType.Unknown, 131);
        fields.get("tech").set(WeaponType.Unknown, TechType.None);
        fields.get("whatUses").set(WeaponType.Unknown, UnitType.Unknown);
        fields.get("damageAmount").set(WeaponType.Unknown, 0);
        fields.get("damageBonus").set(WeaponType.Unknown, 0);
        fields.get("damageCooldown").set(WeaponType.Unknown, 0);
        fields.get("damageFactor").set(WeaponType.Unknown, 0);
        fields.get("upgradeType").set(WeaponType.Unknown, UpgradeType.Unknown);
        fields.get("damageType").set(WeaponType.Unknown, DamageType.Unknown);
        fields.get("explosionType").set(WeaponType.Unknown, ExplosionType.Unknown);
        fields.get("minRange").set(WeaponType.Unknown, 0);
        fields.get("maxRange").set(WeaponType.Unknown, 0);
        fields.get("innerSplashRadius").set(WeaponType.Unknown, 0);
        fields.get("medianSplashRadius").set(WeaponType.Unknown, 0);
        fields.get("outerSplashRadius").set(WeaponType.Unknown, 0);
        fields.get("targetsAir").set(WeaponType.Unknown, false);
        fields.get("targetsGround").set(WeaponType.Unknown, false);
        fields.get("targetsMechanical").set(WeaponType.Unknown, false);
        fields.get("targetsOrganic").set(WeaponType.Unknown, false);
        fields.get("targetsNonBuilding").set(WeaponType.Unknown, false);
        fields.get("targetsNonRobotic").set(WeaponType.Unknown, false);
        fields.get("targetsTerrain").set(WeaponType.Unknown, false);
        fields.get("targetsOrgOrMech").set(WeaponType.Unknown, false);
        fields.get("targetsOwn").set(WeaponType.Unknown, false);
    }
    private void initializeUpgradeType() throws Exception {
        initializeUpgradeType_Terran_Infantry_Armor();
        initializeUpgradeType_Terran_Vehicle_Plating();
        initializeUpgradeType_Terran_Ship_Plating();
        initializeUpgradeType_Zerg_Carapace();
        initializeUpgradeType_Zerg_Flyer_Carapace();
        initializeUpgradeType_Protoss_Ground_Armor();
        initializeUpgradeType_Protoss_Air_Armor();
        initializeUpgradeType_Terran_Infantry_Weapons();
        initializeUpgradeType_Terran_Vehicle_Weapons();
        initializeUpgradeType_Terran_Ship_Weapons();
        initializeUpgradeType_Zerg_Melee_Attacks();
        initializeUpgradeType_Zerg_Missile_Attacks();
        initializeUpgradeType_Zerg_Flyer_Attacks();
        initializeUpgradeType_Protoss_Ground_Weapons();
        initializeUpgradeType_Protoss_Air_Weapons();
        initializeUpgradeType_Protoss_Plasma_Shields();
        initializeUpgradeType_U_238_Shells();
        initializeUpgradeType_Ion_Thrusters();
        initializeUpgradeType_Titan_Reactor();
        initializeUpgradeType_Ocular_Implants();
        initializeUpgradeType_Moebius_Reactor();
        initializeUpgradeType_Apollo_Reactor();
        initializeUpgradeType_Colossus_Reactor();
        initializeUpgradeType_Ventral_Sacs();
        initializeUpgradeType_Antennae();
        initializeUpgradeType_Pneumatized_Carapace();
        initializeUpgradeType_Metabolic_Boost();
        initializeUpgradeType_Adrenal_Glands();
        initializeUpgradeType_Muscular_Augments();
        initializeUpgradeType_Grooved_Spines();
        initializeUpgradeType_Gamete_Meiosis();
        initializeUpgradeType_Metasynaptic_Node();
        initializeUpgradeType_Singularity_Charge();
        initializeUpgradeType_Leg_Enhancements();
        initializeUpgradeType_Scarab_Damage();
        initializeUpgradeType_Reaver_Capacity();
        initializeUpgradeType_Gravitic_Drive();
        initializeUpgradeType_Sensor_Array();
        initializeUpgradeType_Gravitic_Boosters();
        initializeUpgradeType_Khaydarin_Amulet();
        initializeUpgradeType_Apial_Sensors();
        initializeUpgradeType_Gravitic_Thrusters();
        initializeUpgradeType_Carrier_Capacity();
        initializeUpgradeType_Khaydarin_Core();
        initializeUpgradeType_Argus_Jewel();
        initializeUpgradeType_Argus_Talisman();
        initializeUpgradeType_Caduceus_Reactor();
        initializeUpgradeType_Chitinous_Plating();
        initializeUpgradeType_Anabolic_Synthesis();
        initializeUpgradeType_Charon_Boosters();
        initializeUpgradeType_Upgrade_60();
        initializeUpgradeType_None();
        initializeUpgradeType_Unknown();
    }

    private void initializeUpgradeType_Terran_Infantry_Armor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Terran_Infantry_Armor, 0);
        fields.get("race").set(UpgradeType.Terran_Infantry_Armor, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Terran_Infantry_Armor, new int[] {100, 175, 250});
        fields.get("mineralPriceFactor").set(UpgradeType.Terran_Infantry_Armor, 75);
        fields.get("gasPrices").set(UpgradeType.Terran_Infantry_Armor, new int[] {100, 175, 250});
        fields.get("gasPriceFactor").set(UpgradeType.Terran_Infantry_Armor, 75);
        fields.get("upgradeTimes").set(UpgradeType.Terran_Infantry_Armor, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Terran_Infantry_Armor, 480);
        fields.get("maxRepeats").set(UpgradeType.Terran_Infantry_Armor, 3);
        fields.get("whatUpgrades").set(UpgradeType.Terran_Infantry_Armor, UnitType.Terran_Engineering_Bay);
        fields.get("whatsRequired").set(UpgradeType.Terran_Infantry_Armor, new UnitType [] {UnitType.None, UnitType.Terran_Science_Facility, UnitType.Terran_Science_Facility});
    }
    private void initializeUpgradeType_Terran_Vehicle_Plating() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Terran_Vehicle_Plating, 1);
        fields.get("race").set(UpgradeType.Terran_Vehicle_Plating, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Terran_Vehicle_Plating, new int[] {100, 175, 250});
        fields.get("mineralPriceFactor").set(UpgradeType.Terran_Vehicle_Plating, 75);
        fields.get("gasPrices").set(UpgradeType.Terran_Vehicle_Plating, new int[] {100, 175, 250});
        fields.get("gasPriceFactor").set(UpgradeType.Terran_Vehicle_Plating, 75);
        fields.get("upgradeTimes").set(UpgradeType.Terran_Vehicle_Plating, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Terran_Vehicle_Plating, 480);
        fields.get("maxRepeats").set(UpgradeType.Terran_Vehicle_Plating, 3);
        fields.get("whatUpgrades").set(UpgradeType.Terran_Vehicle_Plating, UnitType.Terran_Armory);
        fields.get("whatsRequired").set(UpgradeType.Terran_Vehicle_Plating, new UnitType [] {UnitType.None, UnitType.Terran_Science_Facility, UnitType.Terran_Science_Facility});
    }
    private void initializeUpgradeType_Terran_Ship_Plating() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Terran_Ship_Plating, 2);
        fields.get("race").set(UpgradeType.Terran_Ship_Plating, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Terran_Ship_Plating, new int[] {150, 225, 300});
        fields.get("mineralPriceFactor").set(UpgradeType.Terran_Ship_Plating, 75);
        fields.get("gasPrices").set(UpgradeType.Terran_Ship_Plating, new int[] {150, 225, 300});
        fields.get("gasPriceFactor").set(UpgradeType.Terran_Ship_Plating, 75);
        fields.get("upgradeTimes").set(UpgradeType.Terran_Ship_Plating, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Terran_Ship_Plating, 480);
        fields.get("maxRepeats").set(UpgradeType.Terran_Ship_Plating, 3);
        fields.get("whatUpgrades").set(UpgradeType.Terran_Ship_Plating, UnitType.Terran_Armory);
        fields.get("whatsRequired").set(UpgradeType.Terran_Ship_Plating, new UnitType [] {UnitType.None, UnitType.Terran_Science_Facility, UnitType.Terran_Science_Facility});
    }
    private void initializeUpgradeType_Zerg_Carapace() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Zerg_Carapace, 3);
        fields.get("race").set(UpgradeType.Zerg_Carapace, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Zerg_Carapace, new int[] {150, 225, 300});
        fields.get("mineralPriceFactor").set(UpgradeType.Zerg_Carapace, 75);
        fields.get("gasPrices").set(UpgradeType.Zerg_Carapace, new int[] {150, 225, 300});
        fields.get("gasPriceFactor").set(UpgradeType.Zerg_Carapace, 75);
        fields.get("upgradeTimes").set(UpgradeType.Zerg_Carapace, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Zerg_Carapace, 480);
        fields.get("maxRepeats").set(UpgradeType.Zerg_Carapace, 3);
        fields.get("whatUpgrades").set(UpgradeType.Zerg_Carapace, UnitType.Zerg_Evolution_Chamber);
        fields.get("whatsRequired").set(UpgradeType.Zerg_Carapace, new UnitType [] {UnitType.None, UnitType.Zerg_Lair, UnitType.Zerg_Hive});
    }
    private void initializeUpgradeType_Zerg_Flyer_Carapace() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Zerg_Flyer_Carapace, 4);
        fields.get("race").set(UpgradeType.Zerg_Flyer_Carapace, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Zerg_Flyer_Carapace, new int[] {150, 225, 300});
        fields.get("mineralPriceFactor").set(UpgradeType.Zerg_Flyer_Carapace, 75);
        fields.get("gasPrices").set(UpgradeType.Zerg_Flyer_Carapace, new int[] {150, 225, 300});
        fields.get("gasPriceFactor").set(UpgradeType.Zerg_Flyer_Carapace, 75);
        fields.get("upgradeTimes").set(UpgradeType.Zerg_Flyer_Carapace, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Zerg_Flyer_Carapace, 480);
        fields.get("maxRepeats").set(UpgradeType.Zerg_Flyer_Carapace, 3);
        fields.get("whatUpgrades").set(UpgradeType.Zerg_Flyer_Carapace, UnitType.Zerg_Spire);
        fields.get("whatsRequired").set(UpgradeType.Zerg_Flyer_Carapace, new UnitType [] {UnitType.None, UnitType.Zerg_Lair, UnitType.Zerg_Hive});
    }
    private void initializeUpgradeType_Protoss_Ground_Armor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Protoss_Ground_Armor, 5);
        fields.get("race").set(UpgradeType.Protoss_Ground_Armor, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Protoss_Ground_Armor, new int[] {100, 175, 250});
        fields.get("mineralPriceFactor").set(UpgradeType.Protoss_Ground_Armor, 75);
        fields.get("gasPrices").set(UpgradeType.Protoss_Ground_Armor, new int[] {100, 175, 250});
        fields.get("gasPriceFactor").set(UpgradeType.Protoss_Ground_Armor, 75);
        fields.get("upgradeTimes").set(UpgradeType.Protoss_Ground_Armor, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Protoss_Ground_Armor, 480);
        fields.get("maxRepeats").set(UpgradeType.Protoss_Ground_Armor, 3);
        fields.get("whatUpgrades").set(UpgradeType.Protoss_Ground_Armor, UnitType.Protoss_Forge);
        fields.get("whatsRequired").set(UpgradeType.Protoss_Ground_Armor, new UnitType [] {UnitType.None, UnitType.Protoss_Templar_Archives, UnitType.Protoss_Templar_Archives});
    }
    private void initializeUpgradeType_Protoss_Air_Armor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Protoss_Air_Armor, 6);
        fields.get("race").set(UpgradeType.Protoss_Air_Armor, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Protoss_Air_Armor, new int[] {150, 225, 300});
        fields.get("mineralPriceFactor").set(UpgradeType.Protoss_Air_Armor, 75);
        fields.get("gasPrices").set(UpgradeType.Protoss_Air_Armor, new int[] {150, 225, 300});
        fields.get("gasPriceFactor").set(UpgradeType.Protoss_Air_Armor, 75);
        fields.get("upgradeTimes").set(UpgradeType.Protoss_Air_Armor, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Protoss_Air_Armor, 480);
        fields.get("maxRepeats").set(UpgradeType.Protoss_Air_Armor, 3);
        fields.get("whatUpgrades").set(UpgradeType.Protoss_Air_Armor, UnitType.Protoss_Cybernetics_Core);
        fields.get("whatsRequired").set(UpgradeType.Protoss_Air_Armor, new UnitType [] {UnitType.None, UnitType.Protoss_Fleet_Beacon, UnitType.Protoss_Fleet_Beacon});
    }
    private void initializeUpgradeType_Terran_Infantry_Weapons() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Terran_Infantry_Weapons, 7);
        fields.get("race").set(UpgradeType.Terran_Infantry_Weapons, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Terran_Infantry_Weapons, new int[] {100, 175, 250});
        fields.get("mineralPriceFactor").set(UpgradeType.Terran_Infantry_Weapons, 75);
        fields.get("gasPrices").set(UpgradeType.Terran_Infantry_Weapons, new int[] {100, 175, 250});
        fields.get("gasPriceFactor").set(UpgradeType.Terran_Infantry_Weapons, 75);
        fields.get("upgradeTimes").set(UpgradeType.Terran_Infantry_Weapons, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Terran_Infantry_Weapons, 480);
        fields.get("maxRepeats").set(UpgradeType.Terran_Infantry_Weapons, 3);
        fields.get("whatUpgrades").set(UpgradeType.Terran_Infantry_Weapons, UnitType.Terran_Engineering_Bay);
        fields.get("whatsRequired").set(UpgradeType.Terran_Infantry_Weapons, new UnitType [] {UnitType.None, UnitType.Terran_Science_Facility, UnitType.Terran_Science_Facility});
    }
    private void initializeUpgradeType_Terran_Vehicle_Weapons() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Terran_Vehicle_Weapons, 8);
        fields.get("race").set(UpgradeType.Terran_Vehicle_Weapons, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Terran_Vehicle_Weapons, new int[] {100, 175, 250});
        fields.get("mineralPriceFactor").set(UpgradeType.Terran_Vehicle_Weapons, 75);
        fields.get("gasPrices").set(UpgradeType.Terran_Vehicle_Weapons, new int[] {100, 175, 250});
        fields.get("gasPriceFactor").set(UpgradeType.Terran_Vehicle_Weapons, 75);
        fields.get("upgradeTimes").set(UpgradeType.Terran_Vehicle_Weapons, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Terran_Vehicle_Weapons, 480);
        fields.get("maxRepeats").set(UpgradeType.Terran_Vehicle_Weapons, 3);
        fields.get("whatUpgrades").set(UpgradeType.Terran_Vehicle_Weapons, UnitType.Terran_Armory);
        fields.get("whatsRequired").set(UpgradeType.Terran_Vehicle_Weapons, new UnitType [] {UnitType.None, UnitType.Terran_Science_Facility, UnitType.Terran_Science_Facility});
    }
    private void initializeUpgradeType_Terran_Ship_Weapons() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Terran_Ship_Weapons, 9);
        fields.get("race").set(UpgradeType.Terran_Ship_Weapons, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Terran_Ship_Weapons, new int[] {100, 150, 200});
        fields.get("mineralPriceFactor").set(UpgradeType.Terran_Ship_Weapons, 50);
        fields.get("gasPrices").set(UpgradeType.Terran_Ship_Weapons, new int[] {100, 150, 200});
        fields.get("gasPriceFactor").set(UpgradeType.Terran_Ship_Weapons, 50);
        fields.get("upgradeTimes").set(UpgradeType.Terran_Ship_Weapons, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Terran_Ship_Weapons, 480);
        fields.get("maxRepeats").set(UpgradeType.Terran_Ship_Weapons, 3);
        fields.get("whatUpgrades").set(UpgradeType.Terran_Ship_Weapons, UnitType.Terran_Armory);
        fields.get("whatsRequired").set(UpgradeType.Terran_Ship_Weapons, new UnitType [] {UnitType.None, UnitType.Terran_Science_Facility, UnitType.Terran_Science_Facility});
    }
    private void initializeUpgradeType_Zerg_Melee_Attacks() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Zerg_Melee_Attacks, 10);
        fields.get("race").set(UpgradeType.Zerg_Melee_Attacks, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Zerg_Melee_Attacks, new int[] {100, 150, 200});
        fields.get("mineralPriceFactor").set(UpgradeType.Zerg_Melee_Attacks, 50);
        fields.get("gasPrices").set(UpgradeType.Zerg_Melee_Attacks, new int[] {100, 150, 200});
        fields.get("gasPriceFactor").set(UpgradeType.Zerg_Melee_Attacks, 50);
        fields.get("upgradeTimes").set(UpgradeType.Zerg_Melee_Attacks, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Zerg_Melee_Attacks, 480);
        fields.get("maxRepeats").set(UpgradeType.Zerg_Melee_Attacks, 3);
        fields.get("whatUpgrades").set(UpgradeType.Zerg_Melee_Attacks, UnitType.Zerg_Evolution_Chamber);
        fields.get("whatsRequired").set(UpgradeType.Zerg_Melee_Attacks, new UnitType [] {UnitType.None, UnitType.Zerg_Lair, UnitType.Zerg_Hive});
    }
    private void initializeUpgradeType_Zerg_Missile_Attacks() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Zerg_Missile_Attacks, 11);
        fields.get("race").set(UpgradeType.Zerg_Missile_Attacks, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Zerg_Missile_Attacks, new int[] {100, 150, 200});
        fields.get("mineralPriceFactor").set(UpgradeType.Zerg_Missile_Attacks, 50);
        fields.get("gasPrices").set(UpgradeType.Zerg_Missile_Attacks, new int[] {100, 150, 200});
        fields.get("gasPriceFactor").set(UpgradeType.Zerg_Missile_Attacks, 50);
        fields.get("upgradeTimes").set(UpgradeType.Zerg_Missile_Attacks, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Zerg_Missile_Attacks, 480);
        fields.get("maxRepeats").set(UpgradeType.Zerg_Missile_Attacks, 3);
        fields.get("whatUpgrades").set(UpgradeType.Zerg_Missile_Attacks, UnitType.Zerg_Evolution_Chamber);
        fields.get("whatsRequired").set(UpgradeType.Zerg_Missile_Attacks, new UnitType [] {UnitType.None, UnitType.Zerg_Lair, UnitType.Zerg_Hive});
    }
    private void initializeUpgradeType_Zerg_Flyer_Attacks() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Zerg_Flyer_Attacks, 12);
        fields.get("race").set(UpgradeType.Zerg_Flyer_Attacks, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Zerg_Flyer_Attacks, new int[] {100, 175, 250});
        fields.get("mineralPriceFactor").set(UpgradeType.Zerg_Flyer_Attacks, 75);
        fields.get("gasPrices").set(UpgradeType.Zerg_Flyer_Attacks, new int[] {100, 175, 250});
        fields.get("gasPriceFactor").set(UpgradeType.Zerg_Flyer_Attacks, 75);
        fields.get("upgradeTimes").set(UpgradeType.Zerg_Flyer_Attacks, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Zerg_Flyer_Attacks, 480);
        fields.get("maxRepeats").set(UpgradeType.Zerg_Flyer_Attacks, 3);
        fields.get("whatUpgrades").set(UpgradeType.Zerg_Flyer_Attacks, UnitType.Zerg_Spire);
        fields.get("whatsRequired").set(UpgradeType.Zerg_Flyer_Attacks, new UnitType [] {UnitType.None, UnitType.Zerg_Lair, UnitType.Zerg_Hive});
    }
    private void initializeUpgradeType_Protoss_Ground_Weapons() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Protoss_Ground_Weapons, 13);
        fields.get("race").set(UpgradeType.Protoss_Ground_Weapons, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Protoss_Ground_Weapons, new int[] {100, 150, 200});
        fields.get("mineralPriceFactor").set(UpgradeType.Protoss_Ground_Weapons, 50);
        fields.get("gasPrices").set(UpgradeType.Protoss_Ground_Weapons, new int[] {100, 150, 200});
        fields.get("gasPriceFactor").set(UpgradeType.Protoss_Ground_Weapons, 50);
        fields.get("upgradeTimes").set(UpgradeType.Protoss_Ground_Weapons, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Protoss_Ground_Weapons, 480);
        fields.get("maxRepeats").set(UpgradeType.Protoss_Ground_Weapons, 3);
        fields.get("whatUpgrades").set(UpgradeType.Protoss_Ground_Weapons, UnitType.Protoss_Forge);
        fields.get("whatsRequired").set(UpgradeType.Protoss_Ground_Weapons, new UnitType [] {UnitType.None, UnitType.Protoss_Templar_Archives, UnitType.Protoss_Templar_Archives});
    }
    private void initializeUpgradeType_Protoss_Air_Weapons() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Protoss_Air_Weapons, 14);
        fields.get("race").set(UpgradeType.Protoss_Air_Weapons, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Protoss_Air_Weapons, new int[] {100, 175, 250});
        fields.get("mineralPriceFactor").set(UpgradeType.Protoss_Air_Weapons, 75);
        fields.get("gasPrices").set(UpgradeType.Protoss_Air_Weapons, new int[] {100, 175, 250});
        fields.get("gasPriceFactor").set(UpgradeType.Protoss_Air_Weapons, 75);
        fields.get("upgradeTimes").set(UpgradeType.Protoss_Air_Weapons, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Protoss_Air_Weapons, 480);
        fields.get("maxRepeats").set(UpgradeType.Protoss_Air_Weapons, 3);
        fields.get("whatUpgrades").set(UpgradeType.Protoss_Air_Weapons, UnitType.Protoss_Cybernetics_Core);
        fields.get("whatsRequired").set(UpgradeType.Protoss_Air_Weapons, new UnitType [] {UnitType.None, UnitType.Protoss_Fleet_Beacon, UnitType.Protoss_Fleet_Beacon});
    }
    private void initializeUpgradeType_Protoss_Plasma_Shields() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Protoss_Plasma_Shields, 15);
        fields.get("race").set(UpgradeType.Protoss_Plasma_Shields, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Protoss_Plasma_Shields, new int[] {200, 300, 400});
        fields.get("mineralPriceFactor").set(UpgradeType.Protoss_Plasma_Shields, 100);
        fields.get("gasPrices").set(UpgradeType.Protoss_Plasma_Shields, new int[] {200, 300, 400});
        fields.get("gasPriceFactor").set(UpgradeType.Protoss_Plasma_Shields, 100);
        fields.get("upgradeTimes").set(UpgradeType.Protoss_Plasma_Shields, new int[] {4000, 4480, 4960});
        fields.get("upgradeTimeFactor").set(UpgradeType.Protoss_Plasma_Shields, 480);
        fields.get("maxRepeats").set(UpgradeType.Protoss_Plasma_Shields, 3);
        fields.get("whatUpgrades").set(UpgradeType.Protoss_Plasma_Shields, UnitType.Protoss_Forge);
        fields.get("whatsRequired").set(UpgradeType.Protoss_Plasma_Shields, new UnitType [] {UnitType.None, UnitType.Protoss_Cybernetics_Core, UnitType.Protoss_Cybernetics_Core});
    }
    private void initializeUpgradeType_U_238_Shells() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.U_238_Shells, 16);
        fields.get("race").set(UpgradeType.U_238_Shells, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.U_238_Shells, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.U_238_Shells, 0);
        fields.get("gasPrices").set(UpgradeType.U_238_Shells, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.U_238_Shells, 0);
        fields.get("upgradeTimes").set(UpgradeType.U_238_Shells, new int[] {1500});
        fields.get("upgradeTimeFactor").set(UpgradeType.U_238_Shells, 0);
        fields.get("maxRepeats").set(UpgradeType.U_238_Shells, 1);
        fields.get("whatUpgrades").set(UpgradeType.U_238_Shells, UnitType.Terran_Academy);
        fields.get("whatsRequired").set(UpgradeType.U_238_Shells, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Ion_Thrusters() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Ion_Thrusters, 17);
        fields.get("race").set(UpgradeType.Ion_Thrusters, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Ion_Thrusters, new int[] {100});
        fields.get("mineralPriceFactor").set(UpgradeType.Ion_Thrusters, 0);
        fields.get("gasPrices").set(UpgradeType.Ion_Thrusters, new int[] {100});
        fields.get("gasPriceFactor").set(UpgradeType.Ion_Thrusters, 0);
        fields.get("upgradeTimes").set(UpgradeType.Ion_Thrusters, new int[] {1500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Ion_Thrusters, 0);
        fields.get("maxRepeats").set(UpgradeType.Ion_Thrusters, 1);
        fields.get("whatUpgrades").set(UpgradeType.Ion_Thrusters, UnitType.Terran_Machine_Shop);
        fields.get("whatsRequired").set(UpgradeType.Ion_Thrusters, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Titan_Reactor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Titan_Reactor, 19);
        fields.get("race").set(UpgradeType.Titan_Reactor, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Titan_Reactor, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Titan_Reactor, 0);
        fields.get("gasPrices").set(UpgradeType.Titan_Reactor, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Titan_Reactor, 0);
        fields.get("upgradeTimes").set(UpgradeType.Titan_Reactor, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Titan_Reactor, 0);
        fields.get("maxRepeats").set(UpgradeType.Titan_Reactor, 1);
        fields.get("whatUpgrades").set(UpgradeType.Titan_Reactor, UnitType.Terran_Science_Facility);
        fields.get("whatsRequired").set(UpgradeType.Titan_Reactor, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Ocular_Implants() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Ocular_Implants, 20);
        fields.get("race").set(UpgradeType.Ocular_Implants, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Ocular_Implants, new int[] {100});
        fields.get("mineralPriceFactor").set(UpgradeType.Ocular_Implants, 0);
        fields.get("gasPrices").set(UpgradeType.Ocular_Implants, new int[] {100});
        fields.get("gasPriceFactor").set(UpgradeType.Ocular_Implants, 0);
        fields.get("upgradeTimes").set(UpgradeType.Ocular_Implants, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Ocular_Implants, 0);
        fields.get("maxRepeats").set(UpgradeType.Ocular_Implants, 1);
        fields.get("whatUpgrades").set(UpgradeType.Ocular_Implants, UnitType.Terran_Covert_Ops);
        fields.get("whatsRequired").set(UpgradeType.Ocular_Implants, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Moebius_Reactor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Moebius_Reactor, 21);
        fields.get("race").set(UpgradeType.Moebius_Reactor, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Moebius_Reactor, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Moebius_Reactor, 0);
        fields.get("gasPrices").set(UpgradeType.Moebius_Reactor, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Moebius_Reactor, 0);
        fields.get("upgradeTimes").set(UpgradeType.Moebius_Reactor, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Moebius_Reactor, 0);
        fields.get("maxRepeats").set(UpgradeType.Moebius_Reactor, 1);
        fields.get("whatUpgrades").set(UpgradeType.Moebius_Reactor, UnitType.Terran_Covert_Ops);
        fields.get("whatsRequired").set(UpgradeType.Moebius_Reactor, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Apollo_Reactor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Apollo_Reactor, 22);
        fields.get("race").set(UpgradeType.Apollo_Reactor, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Apollo_Reactor, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Apollo_Reactor, 0);
        fields.get("gasPrices").set(UpgradeType.Apollo_Reactor, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Apollo_Reactor, 0);
        fields.get("upgradeTimes").set(UpgradeType.Apollo_Reactor, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Apollo_Reactor, 0);
        fields.get("maxRepeats").set(UpgradeType.Apollo_Reactor, 1);
        fields.get("whatUpgrades").set(UpgradeType.Apollo_Reactor, UnitType.Terran_Control_Tower);
        fields.get("whatsRequired").set(UpgradeType.Apollo_Reactor, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Colossus_Reactor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Colossus_Reactor, 23);
        fields.get("race").set(UpgradeType.Colossus_Reactor, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Colossus_Reactor, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Colossus_Reactor, 0);
        fields.get("gasPrices").set(UpgradeType.Colossus_Reactor, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Colossus_Reactor, 0);
        fields.get("upgradeTimes").set(UpgradeType.Colossus_Reactor, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Colossus_Reactor, 0);
        fields.get("maxRepeats").set(UpgradeType.Colossus_Reactor, 1);
        fields.get("whatUpgrades").set(UpgradeType.Colossus_Reactor, UnitType.Terran_Physics_Lab);
        fields.get("whatsRequired").set(UpgradeType.Colossus_Reactor, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Ventral_Sacs() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Ventral_Sacs, 24);
        fields.get("race").set(UpgradeType.Ventral_Sacs, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Ventral_Sacs, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Ventral_Sacs, 0);
        fields.get("gasPrices").set(UpgradeType.Ventral_Sacs, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Ventral_Sacs, 0);
        fields.get("upgradeTimes").set(UpgradeType.Ventral_Sacs, new int[] {2400});
        fields.get("upgradeTimeFactor").set(UpgradeType.Ventral_Sacs, 0);
        fields.get("maxRepeats").set(UpgradeType.Ventral_Sacs, 1);
        fields.get("whatUpgrades").set(UpgradeType.Ventral_Sacs, UnitType.Zerg_Lair);
        fields.get("whatsRequired").set(UpgradeType.Ventral_Sacs, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Antennae() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Antennae, 25);
        fields.get("race").set(UpgradeType.Antennae, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Antennae, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Antennae, 0);
        fields.get("gasPrices").set(UpgradeType.Antennae, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Antennae, 0);
        fields.get("upgradeTimes").set(UpgradeType.Antennae, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Antennae, 0);
        fields.get("maxRepeats").set(UpgradeType.Antennae, 1);
        fields.get("whatUpgrades").set(UpgradeType.Antennae, UnitType.Zerg_Lair);
        fields.get("whatsRequired").set(UpgradeType.Antennae, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Pneumatized_Carapace() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Pneumatized_Carapace, 26);
        fields.get("race").set(UpgradeType.Pneumatized_Carapace, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Pneumatized_Carapace, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Pneumatized_Carapace, 0);
        fields.get("gasPrices").set(UpgradeType.Pneumatized_Carapace, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Pneumatized_Carapace, 0);
        fields.get("upgradeTimes").set(UpgradeType.Pneumatized_Carapace, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Pneumatized_Carapace, 0);
        fields.get("maxRepeats").set(UpgradeType.Pneumatized_Carapace, 1);
        fields.get("whatUpgrades").set(UpgradeType.Pneumatized_Carapace, UnitType.Zerg_Lair);
        fields.get("whatsRequired").set(UpgradeType.Pneumatized_Carapace, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Metabolic_Boost() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Metabolic_Boost, 27);
        fields.get("race").set(UpgradeType.Metabolic_Boost, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Metabolic_Boost, new int[] {100});
        fields.get("mineralPriceFactor").set(UpgradeType.Metabolic_Boost, 0);
        fields.get("gasPrices").set(UpgradeType.Metabolic_Boost, new int[] {100});
        fields.get("gasPriceFactor").set(UpgradeType.Metabolic_Boost, 0);
        fields.get("upgradeTimes").set(UpgradeType.Metabolic_Boost, new int[] {1500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Metabolic_Boost, 0);
        fields.get("maxRepeats").set(UpgradeType.Metabolic_Boost, 1);
        fields.get("whatUpgrades").set(UpgradeType.Metabolic_Boost, UnitType.Zerg_Spawning_Pool);
        fields.get("whatsRequired").set(UpgradeType.Metabolic_Boost, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Adrenal_Glands() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Adrenal_Glands, 28);
        fields.get("race").set(UpgradeType.Adrenal_Glands, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Adrenal_Glands, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Adrenal_Glands, 0);
        fields.get("gasPrices").set(UpgradeType.Adrenal_Glands, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Adrenal_Glands, 0);
        fields.get("upgradeTimes").set(UpgradeType.Adrenal_Glands, new int[] {1500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Adrenal_Glands, 0);
        fields.get("maxRepeats").set(UpgradeType.Adrenal_Glands, 1);
        fields.get("whatUpgrades").set(UpgradeType.Adrenal_Glands, UnitType.Zerg_Spawning_Pool);
        fields.get("whatsRequired").set(UpgradeType.Adrenal_Glands, new UnitType [] {UnitType.Zerg_Hive});
    }
    private void initializeUpgradeType_Muscular_Augments() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Muscular_Augments, 29);
        fields.get("race").set(UpgradeType.Muscular_Augments, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Muscular_Augments, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Muscular_Augments, 0);
        fields.get("gasPrices").set(UpgradeType.Muscular_Augments, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Muscular_Augments, 0);
        fields.get("upgradeTimes").set(UpgradeType.Muscular_Augments, new int[] {1500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Muscular_Augments, 0);
        fields.get("maxRepeats").set(UpgradeType.Muscular_Augments, 1);
        fields.get("whatUpgrades").set(UpgradeType.Muscular_Augments, UnitType.Zerg_Hydralisk_Den);
        fields.get("whatsRequired").set(UpgradeType.Muscular_Augments, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Grooved_Spines() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Grooved_Spines, 30);
        fields.get("race").set(UpgradeType.Grooved_Spines, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Grooved_Spines, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Grooved_Spines, 0);
        fields.get("gasPrices").set(UpgradeType.Grooved_Spines, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Grooved_Spines, 0);
        fields.get("upgradeTimes").set(UpgradeType.Grooved_Spines, new int[] {1500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Grooved_Spines, 0);
        fields.get("maxRepeats").set(UpgradeType.Grooved_Spines, 1);
        fields.get("whatUpgrades").set(UpgradeType.Grooved_Spines, UnitType.Zerg_Hydralisk_Den);
        fields.get("whatsRequired").set(UpgradeType.Grooved_Spines, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Gamete_Meiosis() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Gamete_Meiosis, 31);
        fields.get("race").set(UpgradeType.Gamete_Meiosis, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Gamete_Meiosis, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Gamete_Meiosis, 0);
        fields.get("gasPrices").set(UpgradeType.Gamete_Meiosis, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Gamete_Meiosis, 0);
        fields.get("upgradeTimes").set(UpgradeType.Gamete_Meiosis, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Gamete_Meiosis, 0);
        fields.get("maxRepeats").set(UpgradeType.Gamete_Meiosis, 1);
        fields.get("whatUpgrades").set(UpgradeType.Gamete_Meiosis, UnitType.Zerg_Queens_Nest);
        fields.get("whatsRequired").set(UpgradeType.Gamete_Meiosis, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Metasynaptic_Node() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Metasynaptic_Node, 32);
        fields.get("race").set(UpgradeType.Metasynaptic_Node, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Metasynaptic_Node, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Metasynaptic_Node, 0);
        fields.get("gasPrices").set(UpgradeType.Metasynaptic_Node, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Metasynaptic_Node, 0);
        fields.get("upgradeTimes").set(UpgradeType.Metasynaptic_Node, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Metasynaptic_Node, 0);
        fields.get("maxRepeats").set(UpgradeType.Metasynaptic_Node, 1);
        fields.get("whatUpgrades").set(UpgradeType.Metasynaptic_Node, UnitType.Zerg_Defiler_Mound);
        fields.get("whatsRequired").set(UpgradeType.Metasynaptic_Node, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Singularity_Charge() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Singularity_Charge, 33);
        fields.get("race").set(UpgradeType.Singularity_Charge, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Singularity_Charge, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Singularity_Charge, 0);
        fields.get("gasPrices").set(UpgradeType.Singularity_Charge, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Singularity_Charge, 0);
        fields.get("upgradeTimes").set(UpgradeType.Singularity_Charge, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Singularity_Charge, 0);
        fields.get("maxRepeats").set(UpgradeType.Singularity_Charge, 1);
        fields.get("whatUpgrades").set(UpgradeType.Singularity_Charge, UnitType.Protoss_Cybernetics_Core);
        fields.get("whatsRequired").set(UpgradeType.Singularity_Charge, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Leg_Enhancements() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Leg_Enhancements, 34);
        fields.get("race").set(UpgradeType.Leg_Enhancements, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Leg_Enhancements, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Leg_Enhancements, 0);
        fields.get("gasPrices").set(UpgradeType.Leg_Enhancements, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Leg_Enhancements, 0);
        fields.get("upgradeTimes").set(UpgradeType.Leg_Enhancements, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Leg_Enhancements, 0);
        fields.get("maxRepeats").set(UpgradeType.Leg_Enhancements, 1);
        fields.get("whatUpgrades").set(UpgradeType.Leg_Enhancements, UnitType.Protoss_Citadel_of_Adun);
        fields.get("whatsRequired").set(UpgradeType.Leg_Enhancements, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Scarab_Damage() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Scarab_Damage, 35);
        fields.get("race").set(UpgradeType.Scarab_Damage, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Scarab_Damage, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Scarab_Damage, 0);
        fields.get("gasPrices").set(UpgradeType.Scarab_Damage, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Scarab_Damage, 0);
        fields.get("upgradeTimes").set(UpgradeType.Scarab_Damage, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Scarab_Damage, 0);
        fields.get("maxRepeats").set(UpgradeType.Scarab_Damage, 1);
        fields.get("whatUpgrades").set(UpgradeType.Scarab_Damage, UnitType.Protoss_Robotics_Support_Bay);
        fields.get("whatsRequired").set(UpgradeType.Scarab_Damage, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Reaver_Capacity() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Reaver_Capacity, 36);
        fields.get("race").set(UpgradeType.Reaver_Capacity, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Reaver_Capacity, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Reaver_Capacity, 0);
        fields.get("gasPrices").set(UpgradeType.Reaver_Capacity, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Reaver_Capacity, 0);
        fields.get("upgradeTimes").set(UpgradeType.Reaver_Capacity, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Reaver_Capacity, 0);
        fields.get("maxRepeats").set(UpgradeType.Reaver_Capacity, 1);
        fields.get("whatUpgrades").set(UpgradeType.Reaver_Capacity, UnitType.Protoss_Robotics_Support_Bay);
        fields.get("whatsRequired").set(UpgradeType.Reaver_Capacity, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Gravitic_Drive() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Gravitic_Drive, 37);
        fields.get("race").set(UpgradeType.Gravitic_Drive, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Gravitic_Drive, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Gravitic_Drive, 0);
        fields.get("gasPrices").set(UpgradeType.Gravitic_Drive, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Gravitic_Drive, 0);
        fields.get("upgradeTimes").set(UpgradeType.Gravitic_Drive, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Gravitic_Drive, 0);
        fields.get("maxRepeats").set(UpgradeType.Gravitic_Drive, 1);
        fields.get("whatUpgrades").set(UpgradeType.Gravitic_Drive, UnitType.Protoss_Robotics_Support_Bay);
        fields.get("whatsRequired").set(UpgradeType.Gravitic_Drive, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Sensor_Array() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Sensor_Array, 38);
        fields.get("race").set(UpgradeType.Sensor_Array, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Sensor_Array, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Sensor_Array, 0);
        fields.get("gasPrices").set(UpgradeType.Sensor_Array, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Sensor_Array, 0);
        fields.get("upgradeTimes").set(UpgradeType.Sensor_Array, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Sensor_Array, 0);
        fields.get("maxRepeats").set(UpgradeType.Sensor_Array, 1);
        fields.get("whatUpgrades").set(UpgradeType.Sensor_Array, UnitType.Protoss_Observatory);
        fields.get("whatsRequired").set(UpgradeType.Sensor_Array, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Gravitic_Boosters() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Gravitic_Boosters, 39);
        fields.get("race").set(UpgradeType.Gravitic_Boosters, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Gravitic_Boosters, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Gravitic_Boosters, 0);
        fields.get("gasPrices").set(UpgradeType.Gravitic_Boosters, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Gravitic_Boosters, 0);
        fields.get("upgradeTimes").set(UpgradeType.Gravitic_Boosters, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Gravitic_Boosters, 0);
        fields.get("maxRepeats").set(UpgradeType.Gravitic_Boosters, 1);
        fields.get("whatUpgrades").set(UpgradeType.Gravitic_Boosters, UnitType.Protoss_Observatory);
        fields.get("whatsRequired").set(UpgradeType.Gravitic_Boosters, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Khaydarin_Amulet() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Khaydarin_Amulet, 40);
        fields.get("race").set(UpgradeType.Khaydarin_Amulet, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Khaydarin_Amulet, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Khaydarin_Amulet, 0);
        fields.get("gasPrices").set(UpgradeType.Khaydarin_Amulet, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Khaydarin_Amulet, 0);
        fields.get("upgradeTimes").set(UpgradeType.Khaydarin_Amulet, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Khaydarin_Amulet, 0);
        fields.get("maxRepeats").set(UpgradeType.Khaydarin_Amulet, 1);
        fields.get("whatUpgrades").set(UpgradeType.Khaydarin_Amulet, UnitType.Protoss_Templar_Archives);
        fields.get("whatsRequired").set(UpgradeType.Khaydarin_Amulet, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Apial_Sensors() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Apial_Sensors, 41);
        fields.get("race").set(UpgradeType.Apial_Sensors, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Apial_Sensors, new int[] {100});
        fields.get("mineralPriceFactor").set(UpgradeType.Apial_Sensors, 0);
        fields.get("gasPrices").set(UpgradeType.Apial_Sensors, new int[] {100});
        fields.get("gasPriceFactor").set(UpgradeType.Apial_Sensors, 0);
        fields.get("upgradeTimes").set(UpgradeType.Apial_Sensors, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Apial_Sensors, 0);
        fields.get("maxRepeats").set(UpgradeType.Apial_Sensors, 1);
        fields.get("whatUpgrades").set(UpgradeType.Apial_Sensors, UnitType.Protoss_Fleet_Beacon);
        fields.get("whatsRequired").set(UpgradeType.Apial_Sensors, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Gravitic_Thrusters() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Gravitic_Thrusters, 42);
        fields.get("race").set(UpgradeType.Gravitic_Thrusters, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Gravitic_Thrusters, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Gravitic_Thrusters, 0);
        fields.get("gasPrices").set(UpgradeType.Gravitic_Thrusters, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Gravitic_Thrusters, 0);
        fields.get("upgradeTimes").set(UpgradeType.Gravitic_Thrusters, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Gravitic_Thrusters, 0);
        fields.get("maxRepeats").set(UpgradeType.Gravitic_Thrusters, 1);
        fields.get("whatUpgrades").set(UpgradeType.Gravitic_Thrusters, UnitType.Protoss_Fleet_Beacon);
        fields.get("whatsRequired").set(UpgradeType.Gravitic_Thrusters, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Carrier_Capacity() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Carrier_Capacity, 43);
        fields.get("race").set(UpgradeType.Carrier_Capacity, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Carrier_Capacity, new int[] {100});
        fields.get("mineralPriceFactor").set(UpgradeType.Carrier_Capacity, 0);
        fields.get("gasPrices").set(UpgradeType.Carrier_Capacity, new int[] {100});
        fields.get("gasPriceFactor").set(UpgradeType.Carrier_Capacity, 0);
        fields.get("upgradeTimes").set(UpgradeType.Carrier_Capacity, new int[] {1500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Carrier_Capacity, 0);
        fields.get("maxRepeats").set(UpgradeType.Carrier_Capacity, 1);
        fields.get("whatUpgrades").set(UpgradeType.Carrier_Capacity, UnitType.Protoss_Fleet_Beacon);
        fields.get("whatsRequired").set(UpgradeType.Carrier_Capacity, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Khaydarin_Core() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Khaydarin_Core, 44);
        fields.get("race").set(UpgradeType.Khaydarin_Core, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Khaydarin_Core, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Khaydarin_Core, 0);
        fields.get("gasPrices").set(UpgradeType.Khaydarin_Core, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Khaydarin_Core, 0);
        fields.get("upgradeTimes").set(UpgradeType.Khaydarin_Core, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Khaydarin_Core, 0);
        fields.get("maxRepeats").set(UpgradeType.Khaydarin_Core, 1);
        fields.get("whatUpgrades").set(UpgradeType.Khaydarin_Core, UnitType.Protoss_Arbiter_Tribunal);
        fields.get("whatsRequired").set(UpgradeType.Khaydarin_Core, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Argus_Jewel() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Argus_Jewel, 47);
        fields.get("race").set(UpgradeType.Argus_Jewel, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Argus_Jewel, new int[] {100});
        fields.get("mineralPriceFactor").set(UpgradeType.Argus_Jewel, 0);
        fields.get("gasPrices").set(UpgradeType.Argus_Jewel, new int[] {100});
        fields.get("gasPriceFactor").set(UpgradeType.Argus_Jewel, 0);
        fields.get("upgradeTimes").set(UpgradeType.Argus_Jewel, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Argus_Jewel, 0);
        fields.get("maxRepeats").set(UpgradeType.Argus_Jewel, 1);
        fields.get("whatUpgrades").set(UpgradeType.Argus_Jewel, UnitType.Protoss_Fleet_Beacon);
        fields.get("whatsRequired").set(UpgradeType.Argus_Jewel, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Argus_Talisman() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Argus_Talisman, 49);
        fields.get("race").set(UpgradeType.Argus_Talisman, Race.Protoss);
        fields.get("mineralPrices").set(UpgradeType.Argus_Talisman, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Argus_Talisman, 0);
        fields.get("gasPrices").set(UpgradeType.Argus_Talisman, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Argus_Talisman, 0);
        fields.get("upgradeTimes").set(UpgradeType.Argus_Talisman, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Argus_Talisman, 0);
        fields.get("maxRepeats").set(UpgradeType.Argus_Talisman, 1);
        fields.get("whatUpgrades").set(UpgradeType.Argus_Talisman, UnitType.Protoss_Templar_Archives);
        fields.get("whatsRequired").set(UpgradeType.Argus_Talisman, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Caduceus_Reactor() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Caduceus_Reactor, 51);
        fields.get("race").set(UpgradeType.Caduceus_Reactor, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Caduceus_Reactor, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Caduceus_Reactor, 0);
        fields.get("gasPrices").set(UpgradeType.Caduceus_Reactor, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Caduceus_Reactor, 0);
        fields.get("upgradeTimes").set(UpgradeType.Caduceus_Reactor, new int[] {2500});
        fields.get("upgradeTimeFactor").set(UpgradeType.Caduceus_Reactor, 0);
        fields.get("maxRepeats").set(UpgradeType.Caduceus_Reactor, 1);
        fields.get("whatUpgrades").set(UpgradeType.Caduceus_Reactor, UnitType.Terran_Academy);
        fields.get("whatsRequired").set(UpgradeType.Caduceus_Reactor, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Chitinous_Plating() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Chitinous_Plating, 52);
        fields.get("race").set(UpgradeType.Chitinous_Plating, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Chitinous_Plating, new int[] {150});
        fields.get("mineralPriceFactor").set(UpgradeType.Chitinous_Plating, 0);
        fields.get("gasPrices").set(UpgradeType.Chitinous_Plating, new int[] {150});
        fields.get("gasPriceFactor").set(UpgradeType.Chitinous_Plating, 0);
        fields.get("upgradeTimes").set(UpgradeType.Chitinous_Plating, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Chitinous_Plating, 0);
        fields.get("maxRepeats").set(UpgradeType.Chitinous_Plating, 1);
        fields.get("whatUpgrades").set(UpgradeType.Chitinous_Plating, UnitType.Zerg_Ultralisk_Cavern);
        fields.get("whatsRequired").set(UpgradeType.Chitinous_Plating, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Anabolic_Synthesis() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Anabolic_Synthesis, 53);
        fields.get("race").set(UpgradeType.Anabolic_Synthesis, Race.Zerg);
        fields.get("mineralPrices").set(UpgradeType.Anabolic_Synthesis, new int[] {200});
        fields.get("mineralPriceFactor").set(UpgradeType.Anabolic_Synthesis, 0);
        fields.get("gasPrices").set(UpgradeType.Anabolic_Synthesis, new int[] {200});
        fields.get("gasPriceFactor").set(UpgradeType.Anabolic_Synthesis, 0);
        fields.get("upgradeTimes").set(UpgradeType.Anabolic_Synthesis, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Anabolic_Synthesis, 0);
        fields.get("maxRepeats").set(UpgradeType.Anabolic_Synthesis, 1);
        fields.get("whatUpgrades").set(UpgradeType.Anabolic_Synthesis, UnitType.Zerg_Ultralisk_Cavern);
        fields.get("whatsRequired").set(UpgradeType.Anabolic_Synthesis, new UnitType [] {UnitType.None});
    }
    private void initializeUpgradeType_Charon_Boosters() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Charon_Boosters, 54);
        fields.get("race").set(UpgradeType.Charon_Boosters, Race.Terran);
        fields.get("mineralPrices").set(UpgradeType.Charon_Boosters, new int[] {100});
        fields.get("mineralPriceFactor").set(UpgradeType.Charon_Boosters, 0);
        fields.get("gasPrices").set(UpgradeType.Charon_Boosters, new int[] {100});
        fields.get("gasPriceFactor").set(UpgradeType.Charon_Boosters, 0);
        fields.get("upgradeTimes").set(UpgradeType.Charon_Boosters, new int[] {2000});
        fields.get("upgradeTimeFactor").set(UpgradeType.Charon_Boosters, 0);
        fields.get("maxRepeats").set(UpgradeType.Charon_Boosters, 1);
        fields.get("whatUpgrades").set(UpgradeType.Charon_Boosters, UnitType.Terran_Machine_Shop);
        fields.get("whatsRequired").set(UpgradeType.Charon_Boosters, new UnitType [] {UnitType.Terran_Armory});
    }
    private void initializeUpgradeType_Upgrade_60() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Upgrade_60, 0);
        fields.get("race").set(UpgradeType.Upgrade_60, null);
        fields.get("mineralPrices").set(UpgradeType.Upgrade_60, null);
        fields.get("mineralPriceFactor").set(UpgradeType.Upgrade_60, 0);
        fields.get("gasPrices").set(UpgradeType.Upgrade_60, null);
        fields.get("gasPriceFactor").set(UpgradeType.Upgrade_60, 0);
        fields.get("upgradeTimes").set(UpgradeType.Upgrade_60, null);
        fields.get("upgradeTimeFactor").set(UpgradeType.Upgrade_60, 0);
        fields.get("maxRepeats").set(UpgradeType.Upgrade_60, 0);
        fields.get("whatUpgrades").set(UpgradeType.Upgrade_60, null);
        fields.get("whatsRequired").set(UpgradeType.Upgrade_60, null);
    }
    private void initializeUpgradeType_None() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.None, 61);
        fields.get("race").set(UpgradeType.None, Race.None);
        fields.get("mineralPrices").set(UpgradeType.None, new int[] {});
        fields.get("mineralPriceFactor").set(UpgradeType.None, 0);
        fields.get("gasPrices").set(UpgradeType.None, new int[] {});
        fields.get("gasPriceFactor").set(UpgradeType.None, 0);
        fields.get("upgradeTimes").set(UpgradeType.None, new int[] {});
        fields.get("upgradeTimeFactor").set(UpgradeType.None, 0);
        fields.get("maxRepeats").set(UpgradeType.None, 0);
        fields.get("whatUpgrades").set(UpgradeType.None, UnitType.None);
        fields.get("whatsRequired").set(UpgradeType.None, new UnitType [] {});
    }
    private void initializeUpgradeType_Unknown() throws Exception {
        Class<?> c = UpgradeType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(UpgradeType.Unknown, 62);
        fields.get("race").set(UpgradeType.Unknown, Race.Unknown);
        fields.get("mineralPrices").set(UpgradeType.Unknown, new int[] {});
        fields.get("mineralPriceFactor").set(UpgradeType.Unknown, 0);
        fields.get("gasPrices").set(UpgradeType.Unknown, new int[] {});
        fields.get("gasPriceFactor").set(UpgradeType.Unknown, 0);
        fields.get("upgradeTimes").set(UpgradeType.Unknown, new int[] {});
        fields.get("upgradeTimeFactor").set(UpgradeType.Unknown, 0);
        fields.get("maxRepeats").set(UpgradeType.Unknown, 0);
        fields.get("whatUpgrades").set(UpgradeType.Unknown, UnitType.None);
        fields.get("whatsRequired").set(UpgradeType.Unknown, new UnitType [] {});
    }
    private void initializeTechType() throws Exception {
        initializeTechType_Stim_Packs();
        initializeTechType_Lockdown();
        initializeTechType_EMP_Shockwave();
        initializeTechType_Spider_Mines();
        initializeTechType_Scanner_Sweep();
        initializeTechType_Tank_Siege_Mode();
        initializeTechType_Defensive_Matrix();
        initializeTechType_Irradiate();
        initializeTechType_Yamato_Gun();
        initializeTechType_Cloaking_Field();
        initializeTechType_Personnel_Cloaking();
        initializeTechType_Burrowing();
        initializeTechType_Infestation();
        initializeTechType_Spawn_Broodlings();
        initializeTechType_Dark_Swarm();
        initializeTechType_Plague();
        initializeTechType_Consume();
        initializeTechType_Ensnare();
        initializeTechType_Parasite();
        initializeTechType_Psionic_Storm();
        initializeTechType_Hallucination();
        initializeTechType_Recall();
        initializeTechType_Stasis_Field();
        initializeTechType_Archon_Warp();
        initializeTechType_Restoration();
        initializeTechType_Disruption_Web();
        initializeTechType_Mind_Control();
        initializeTechType_Dark_Archon_Meld();
        initializeTechType_Feedback();
        initializeTechType_Optical_Flare();
        initializeTechType_Maelstrom();
        initializeTechType_Lurker_Aspect();
        initializeTechType_Healing();
        initializeTechType_None();
        initializeTechType_Nuclear_Strike();
        initializeTechType_Unknown();
    }

    private void initializeTechType_Stim_Packs() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Stim_Packs, 0);
        fields.get("race").set(TechType.Stim_Packs, Race.Terran);
        fields.get("mineralPrice").set(TechType.Stim_Packs, 100);
        fields.get("gasPrice").set(TechType.Stim_Packs, 100);
        fields.get("researchTime").set(TechType.Stim_Packs, 1200);
        fields.get("energyCost").set(TechType.Stim_Packs, 0);
        fields.get("whatResearches").set(TechType.Stim_Packs, UnitType.Terran_Academy);
        fields.get("weaponType").set(TechType.Stim_Packs, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Stim_Packs, false);
        fields.get("targetsPosition").set(TechType.Stim_Packs, false);
        fields.get("order").set(TechType.Stim_Packs, Order.None);
        fields.get("requiredUnit").set(TechType.Stim_Packs, UnitType.None);
    }
    private void initializeTechType_Lockdown() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Lockdown, 1);
        fields.get("race").set(TechType.Lockdown, Race.Terran);
        fields.get("mineralPrice").set(TechType.Lockdown, 200);
        fields.get("gasPrice").set(TechType.Lockdown, 200);
        fields.get("researchTime").set(TechType.Lockdown, 1500);
        fields.get("energyCost").set(TechType.Lockdown, 100);
        fields.get("whatResearches").set(TechType.Lockdown, UnitType.Terran_Covert_Ops);
        fields.get("weaponType").set(TechType.Lockdown, WeaponType.Lockdown);
        fields.get("targetsUnit").set(TechType.Lockdown, true);
        fields.get("targetsPosition").set(TechType.Lockdown, false);
        fields.get("order").set(TechType.Lockdown, Order.CastLockdown);
        fields.get("requiredUnit").set(TechType.Lockdown, UnitType.None);
    }
    private void initializeTechType_EMP_Shockwave() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.EMP_Shockwave, 2);
        fields.get("race").set(TechType.EMP_Shockwave, Race.Terran);
        fields.get("mineralPrice").set(TechType.EMP_Shockwave, 200);
        fields.get("gasPrice").set(TechType.EMP_Shockwave, 200);
        fields.get("researchTime").set(TechType.EMP_Shockwave, 1800);
        fields.get("energyCost").set(TechType.EMP_Shockwave, 100);
        fields.get("whatResearches").set(TechType.EMP_Shockwave, UnitType.Terran_Science_Facility);
        fields.get("weaponType").set(TechType.EMP_Shockwave, WeaponType.EMP_Shockwave);
        fields.get("targetsUnit").set(TechType.EMP_Shockwave, true);
        fields.get("targetsPosition").set(TechType.EMP_Shockwave, true);
        fields.get("order").set(TechType.EMP_Shockwave, Order.CastEMPShockwave);
        fields.get("requiredUnit").set(TechType.EMP_Shockwave, UnitType.None);
    }
    private void initializeTechType_Spider_Mines() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Spider_Mines, 3);
        fields.get("race").set(TechType.Spider_Mines, Race.Terran);
        fields.get("mineralPrice").set(TechType.Spider_Mines, 100);
        fields.get("gasPrice").set(TechType.Spider_Mines, 100);
        fields.get("researchTime").set(TechType.Spider_Mines, 1200);
        fields.get("energyCost").set(TechType.Spider_Mines, 0);
        fields.get("whatResearches").set(TechType.Spider_Mines, UnitType.Terran_Machine_Shop);
        fields.get("weaponType").set(TechType.Spider_Mines, WeaponType.Spider_Mines);
        fields.get("targetsUnit").set(TechType.Spider_Mines, false);
        fields.get("targetsPosition").set(TechType.Spider_Mines, true);
        fields.get("order").set(TechType.Spider_Mines, Order.PlaceMine);
        fields.get("requiredUnit").set(TechType.Spider_Mines, UnitType.None);
    }
    private void initializeTechType_Scanner_Sweep() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Scanner_Sweep, 4);
        fields.get("race").set(TechType.Scanner_Sweep, Race.Terran);
        fields.get("mineralPrice").set(TechType.Scanner_Sweep, 0);
        fields.get("gasPrice").set(TechType.Scanner_Sweep, 0);
        fields.get("researchTime").set(TechType.Scanner_Sweep, 0);
        fields.get("energyCost").set(TechType.Scanner_Sweep, 50);
        fields.get("whatResearches").set(TechType.Scanner_Sweep, UnitType.None);
        fields.get("weaponType").set(TechType.Scanner_Sweep, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Scanner_Sweep, true);
        fields.get("targetsPosition").set(TechType.Scanner_Sweep, true);
        fields.get("order").set(TechType.Scanner_Sweep, Order.CastScannerSweep);
        fields.get("requiredUnit").set(TechType.Scanner_Sweep, UnitType.None);
    }
    private void initializeTechType_Tank_Siege_Mode() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Tank_Siege_Mode, 5);
        fields.get("race").set(TechType.Tank_Siege_Mode, Race.Terran);
        fields.get("mineralPrice").set(TechType.Tank_Siege_Mode, 150);
        fields.get("gasPrice").set(TechType.Tank_Siege_Mode, 150);
        fields.get("researchTime").set(TechType.Tank_Siege_Mode, 1200);
        fields.get("energyCost").set(TechType.Tank_Siege_Mode, 0);
        fields.get("whatResearches").set(TechType.Tank_Siege_Mode, UnitType.Terran_Machine_Shop);
        fields.get("weaponType").set(TechType.Tank_Siege_Mode, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Tank_Siege_Mode, false);
        fields.get("targetsPosition").set(TechType.Tank_Siege_Mode, false);
        fields.get("order").set(TechType.Tank_Siege_Mode, Order.None);
        fields.get("requiredUnit").set(TechType.Tank_Siege_Mode, UnitType.None);
    }
    private void initializeTechType_Defensive_Matrix() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Defensive_Matrix, 6);
        fields.get("race").set(TechType.Defensive_Matrix, Race.Terran);
        fields.get("mineralPrice").set(TechType.Defensive_Matrix, 0);
        fields.get("gasPrice").set(TechType.Defensive_Matrix, 0);
        fields.get("researchTime").set(TechType.Defensive_Matrix, 0);
        fields.get("energyCost").set(TechType.Defensive_Matrix, 100);
        fields.get("whatResearches").set(TechType.Defensive_Matrix, UnitType.None);
        fields.get("weaponType").set(TechType.Defensive_Matrix, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Defensive_Matrix, true);
        fields.get("targetsPosition").set(TechType.Defensive_Matrix, false);
        fields.get("order").set(TechType.Defensive_Matrix, Order.CastDefensiveMatrix);
        fields.get("requiredUnit").set(TechType.Defensive_Matrix, UnitType.None);
    }
    private void initializeTechType_Irradiate() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Irradiate, 7);
        fields.get("race").set(TechType.Irradiate, Race.Terran);
        fields.get("mineralPrice").set(TechType.Irradiate, 200);
        fields.get("gasPrice").set(TechType.Irradiate, 200);
        fields.get("researchTime").set(TechType.Irradiate, 1200);
        fields.get("energyCost").set(TechType.Irradiate, 75);
        fields.get("whatResearches").set(TechType.Irradiate, UnitType.Terran_Science_Facility);
        fields.get("weaponType").set(TechType.Irradiate, WeaponType.Irradiate);
        fields.get("targetsUnit").set(TechType.Irradiate, true);
        fields.get("targetsPosition").set(TechType.Irradiate, false);
        fields.get("order").set(TechType.Irradiate, Order.CastIrradiate);
        fields.get("requiredUnit").set(TechType.Irradiate, UnitType.None);
    }
    private void initializeTechType_Yamato_Gun() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Yamato_Gun, 8);
        fields.get("race").set(TechType.Yamato_Gun, Race.Terran);
        fields.get("mineralPrice").set(TechType.Yamato_Gun, 100);
        fields.get("gasPrice").set(TechType.Yamato_Gun, 100);
        fields.get("researchTime").set(TechType.Yamato_Gun, 1800);
        fields.get("energyCost").set(TechType.Yamato_Gun, 150);
        fields.get("whatResearches").set(TechType.Yamato_Gun, UnitType.Terran_Physics_Lab);
        fields.get("weaponType").set(TechType.Yamato_Gun, WeaponType.Yamato_Gun);
        fields.get("targetsUnit").set(TechType.Yamato_Gun, true);
        fields.get("targetsPosition").set(TechType.Yamato_Gun, false);
        fields.get("order").set(TechType.Yamato_Gun, Order.FireYamatoGun);
        fields.get("requiredUnit").set(TechType.Yamato_Gun, UnitType.None);
    }
    private void initializeTechType_Cloaking_Field() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Cloaking_Field, 9);
        fields.get("race").set(TechType.Cloaking_Field, Race.Terran);
        fields.get("mineralPrice").set(TechType.Cloaking_Field, 150);
        fields.get("gasPrice").set(TechType.Cloaking_Field, 150);
        fields.get("researchTime").set(TechType.Cloaking_Field, 1500);
        fields.get("energyCost").set(TechType.Cloaking_Field, 25);
        fields.get("whatResearches").set(TechType.Cloaking_Field, UnitType.Terran_Control_Tower);
        fields.get("weaponType").set(TechType.Cloaking_Field, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Cloaking_Field, false);
        fields.get("targetsPosition").set(TechType.Cloaking_Field, false);
        fields.get("order").set(TechType.Cloaking_Field, Order.None);
        fields.get("requiredUnit").set(TechType.Cloaking_Field, UnitType.None);
    }
    private void initializeTechType_Personnel_Cloaking() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Personnel_Cloaking, 10);
        fields.get("race").set(TechType.Personnel_Cloaking, Race.Terran);
        fields.get("mineralPrice").set(TechType.Personnel_Cloaking, 100);
        fields.get("gasPrice").set(TechType.Personnel_Cloaking, 100);
        fields.get("researchTime").set(TechType.Personnel_Cloaking, 1200);
        fields.get("energyCost").set(TechType.Personnel_Cloaking, 25);
        fields.get("whatResearches").set(TechType.Personnel_Cloaking, UnitType.Terran_Covert_Ops);
        fields.get("weaponType").set(TechType.Personnel_Cloaking, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Personnel_Cloaking, false);
        fields.get("targetsPosition").set(TechType.Personnel_Cloaking, false);
        fields.get("order").set(TechType.Personnel_Cloaking, Order.None);
        fields.get("requiredUnit").set(TechType.Personnel_Cloaking, UnitType.None);
    }
    private void initializeTechType_Burrowing() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Burrowing, 11);
        fields.get("race").set(TechType.Burrowing, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Burrowing, 100);
        fields.get("gasPrice").set(TechType.Burrowing, 100);
        fields.get("researchTime").set(TechType.Burrowing, 1200);
        fields.get("energyCost").set(TechType.Burrowing, 0);
        fields.get("whatResearches").set(TechType.Burrowing, UnitType.Zerg_Hatchery);
        fields.get("weaponType").set(TechType.Burrowing, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Burrowing, false);
        fields.get("targetsPosition").set(TechType.Burrowing, false);
        fields.get("order").set(TechType.Burrowing, Order.None);
        fields.get("requiredUnit").set(TechType.Burrowing, UnitType.None);
    }
    private void initializeTechType_Infestation() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Infestation, 12);
        fields.get("race").set(TechType.Infestation, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Infestation, 0);
        fields.get("gasPrice").set(TechType.Infestation, 0);
        fields.get("researchTime").set(TechType.Infestation, 0);
        fields.get("energyCost").set(TechType.Infestation, 0);
        fields.get("whatResearches").set(TechType.Infestation, UnitType.None);
        fields.get("weaponType").set(TechType.Infestation, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Infestation, true);
        fields.get("targetsPosition").set(TechType.Infestation, false);
        fields.get("order").set(TechType.Infestation, Order.CastInfestation);
        fields.get("requiredUnit").set(TechType.Infestation, UnitType.None);
    }
    private void initializeTechType_Spawn_Broodlings() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Spawn_Broodlings, 13);
        fields.get("race").set(TechType.Spawn_Broodlings, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Spawn_Broodlings, 100);
        fields.get("gasPrice").set(TechType.Spawn_Broodlings, 100);
        fields.get("researchTime").set(TechType.Spawn_Broodlings, 1200);
        fields.get("energyCost").set(TechType.Spawn_Broodlings, 150);
        fields.get("whatResearches").set(TechType.Spawn_Broodlings, UnitType.Zerg_Queens_Nest);
        fields.get("weaponType").set(TechType.Spawn_Broodlings, WeaponType.Spawn_Broodlings);
        fields.get("targetsUnit").set(TechType.Spawn_Broodlings, true);
        fields.get("targetsPosition").set(TechType.Spawn_Broodlings, false);
        fields.get("order").set(TechType.Spawn_Broodlings, Order.CastSpawnBroodlings);
        fields.get("requiredUnit").set(TechType.Spawn_Broodlings, UnitType.None);
    }
    private void initializeTechType_Dark_Swarm() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Dark_Swarm, 14);
        fields.get("race").set(TechType.Dark_Swarm, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Dark_Swarm, 0);
        fields.get("gasPrice").set(TechType.Dark_Swarm, 0);
        fields.get("researchTime").set(TechType.Dark_Swarm, 0);
        fields.get("energyCost").set(TechType.Dark_Swarm, 100);
        fields.get("whatResearches").set(TechType.Dark_Swarm, UnitType.None);
        fields.get("weaponType").set(TechType.Dark_Swarm, WeaponType.Dark_Swarm);
        fields.get("targetsUnit").set(TechType.Dark_Swarm, true);
        fields.get("targetsPosition").set(TechType.Dark_Swarm, true);
        fields.get("order").set(TechType.Dark_Swarm, Order.CastDarkSwarm);
        fields.get("requiredUnit").set(TechType.Dark_Swarm, UnitType.None);
    }
    private void initializeTechType_Plague() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Plague, 15);
        fields.get("race").set(TechType.Plague, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Plague, 200);
        fields.get("gasPrice").set(TechType.Plague, 200);
        fields.get("researchTime").set(TechType.Plague, 1500);
        fields.get("energyCost").set(TechType.Plague, 150);
        fields.get("whatResearches").set(TechType.Plague, UnitType.Zerg_Defiler_Mound);
        fields.get("weaponType").set(TechType.Plague, WeaponType.Plague);
        fields.get("targetsUnit").set(TechType.Plague, true);
        fields.get("targetsPosition").set(TechType.Plague, true);
        fields.get("order").set(TechType.Plague, Order.CastPlague);
        fields.get("requiredUnit").set(TechType.Plague, UnitType.None);
    }
    private void initializeTechType_Consume() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Consume, 16);
        fields.get("race").set(TechType.Consume, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Consume, 100);
        fields.get("gasPrice").set(TechType.Consume, 100);
        fields.get("researchTime").set(TechType.Consume, 1500);
        fields.get("energyCost").set(TechType.Consume, 0);
        fields.get("whatResearches").set(TechType.Consume, UnitType.Zerg_Defiler_Mound);
        fields.get("weaponType").set(TechType.Consume, WeaponType.Consume);
        fields.get("targetsUnit").set(TechType.Consume, true);
        fields.get("targetsPosition").set(TechType.Consume, false);
        fields.get("order").set(TechType.Consume, Order.CastConsume);
        fields.get("requiredUnit").set(TechType.Consume, UnitType.None);
    }
    private void initializeTechType_Ensnare() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Ensnare, 17);
        fields.get("race").set(TechType.Ensnare, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Ensnare, 100);
        fields.get("gasPrice").set(TechType.Ensnare, 100);
        fields.get("researchTime").set(TechType.Ensnare, 1200);
        fields.get("energyCost").set(TechType.Ensnare, 75);
        fields.get("whatResearches").set(TechType.Ensnare, UnitType.Zerg_Queens_Nest);
        fields.get("weaponType").set(TechType.Ensnare, WeaponType.Ensnare);
        fields.get("targetsUnit").set(TechType.Ensnare, true);
        fields.get("targetsPosition").set(TechType.Ensnare, true);
        fields.get("order").set(TechType.Ensnare, Order.CastEnsnare);
        fields.get("requiredUnit").set(TechType.Ensnare, UnitType.None);
    }
    private void initializeTechType_Parasite() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Parasite, 18);
        fields.get("race").set(TechType.Parasite, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Parasite, 0);
        fields.get("gasPrice").set(TechType.Parasite, 0);
        fields.get("researchTime").set(TechType.Parasite, 0);
        fields.get("energyCost").set(TechType.Parasite, 75);
        fields.get("whatResearches").set(TechType.Parasite, UnitType.None);
        fields.get("weaponType").set(TechType.Parasite, WeaponType.Parasite);
        fields.get("targetsUnit").set(TechType.Parasite, true);
        fields.get("targetsPosition").set(TechType.Parasite, false);
        fields.get("order").set(TechType.Parasite, Order.CastParasite);
        fields.get("requiredUnit").set(TechType.Parasite, UnitType.None);
    }
    private void initializeTechType_Psionic_Storm() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Psionic_Storm, 19);
        fields.get("race").set(TechType.Psionic_Storm, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Psionic_Storm, 200);
        fields.get("gasPrice").set(TechType.Psionic_Storm, 200);
        fields.get("researchTime").set(TechType.Psionic_Storm, 1800);
        fields.get("energyCost").set(TechType.Psionic_Storm, 75);
        fields.get("whatResearches").set(TechType.Psionic_Storm, UnitType.Protoss_Templar_Archives);
        fields.get("weaponType").set(TechType.Psionic_Storm, WeaponType.Psionic_Storm);
        fields.get("targetsUnit").set(TechType.Psionic_Storm, true);
        fields.get("targetsPosition").set(TechType.Psionic_Storm, true);
        fields.get("order").set(TechType.Psionic_Storm, Order.CastPsionicStorm);
        fields.get("requiredUnit").set(TechType.Psionic_Storm, UnitType.None);
    }
    private void initializeTechType_Hallucination() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Hallucination, 20);
        fields.get("race").set(TechType.Hallucination, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Hallucination, 150);
        fields.get("gasPrice").set(TechType.Hallucination, 150);
        fields.get("researchTime").set(TechType.Hallucination, 1200);
        fields.get("energyCost").set(TechType.Hallucination, 100);
        fields.get("whatResearches").set(TechType.Hallucination, UnitType.Protoss_Templar_Archives);
        fields.get("weaponType").set(TechType.Hallucination, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Hallucination, true);
        fields.get("targetsPosition").set(TechType.Hallucination, false);
        fields.get("order").set(TechType.Hallucination, Order.CastHallucination);
        fields.get("requiredUnit").set(TechType.Hallucination, UnitType.None);
    }
    private void initializeTechType_Recall() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Recall, 21);
        fields.get("race").set(TechType.Recall, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Recall, 150);
        fields.get("gasPrice").set(TechType.Recall, 150);
        fields.get("researchTime").set(TechType.Recall, 1800);
        fields.get("energyCost").set(TechType.Recall, 150);
        fields.get("whatResearches").set(TechType.Recall, UnitType.Protoss_Arbiter_Tribunal);
        fields.get("weaponType").set(TechType.Recall, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Recall, true);
        fields.get("targetsPosition").set(TechType.Recall, true);
        fields.get("order").set(TechType.Recall, Order.CastRecall);
        fields.get("requiredUnit").set(TechType.Recall, UnitType.None);
    }
    private void initializeTechType_Stasis_Field() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Stasis_Field, 22);
        fields.get("race").set(TechType.Stasis_Field, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Stasis_Field, 150);
        fields.get("gasPrice").set(TechType.Stasis_Field, 150);
        fields.get("researchTime").set(TechType.Stasis_Field, 1500);
        fields.get("energyCost").set(TechType.Stasis_Field, 100);
        fields.get("whatResearches").set(TechType.Stasis_Field, UnitType.Protoss_Arbiter_Tribunal);
        fields.get("weaponType").set(TechType.Stasis_Field, WeaponType.Stasis_Field);
        fields.get("targetsUnit").set(TechType.Stasis_Field, true);
        fields.get("targetsPosition").set(TechType.Stasis_Field, true);
        fields.get("order").set(TechType.Stasis_Field, Order.CastStasisField);
        fields.get("requiredUnit").set(TechType.Stasis_Field, UnitType.None);
    }
    private void initializeTechType_Archon_Warp() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Archon_Warp, 23);
        fields.get("race").set(TechType.Archon_Warp, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Archon_Warp, 0);
        fields.get("gasPrice").set(TechType.Archon_Warp, 0);
        fields.get("researchTime").set(TechType.Archon_Warp, 0);
        fields.get("energyCost").set(TechType.Archon_Warp, 0);
        fields.get("whatResearches").set(TechType.Archon_Warp, UnitType.None);
        fields.get("weaponType").set(TechType.Archon_Warp, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Archon_Warp, true);
        fields.get("targetsPosition").set(TechType.Archon_Warp, false);
        fields.get("order").set(TechType.Archon_Warp, Order.None);
        fields.get("requiredUnit").set(TechType.Archon_Warp, UnitType.None);
    }
    private void initializeTechType_Restoration() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Restoration, 24);
        fields.get("race").set(TechType.Restoration, Race.Terran);
        fields.get("mineralPrice").set(TechType.Restoration, 100);
        fields.get("gasPrice").set(TechType.Restoration, 100);
        fields.get("researchTime").set(TechType.Restoration, 1200);
        fields.get("energyCost").set(TechType.Restoration, 50);
        fields.get("whatResearches").set(TechType.Restoration, UnitType.Terran_Academy);
        fields.get("weaponType").set(TechType.Restoration, WeaponType.Restoration);
        fields.get("targetsUnit").set(TechType.Restoration, true);
        fields.get("targetsPosition").set(TechType.Restoration, false);
        fields.get("order").set(TechType.Restoration, Order.CastRestoration);
        fields.get("requiredUnit").set(TechType.Restoration, UnitType.None);
    }
    private void initializeTechType_Disruption_Web() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Disruption_Web, 25);
        fields.get("race").set(TechType.Disruption_Web, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Disruption_Web, 200);
        fields.get("gasPrice").set(TechType.Disruption_Web, 200);
        fields.get("researchTime").set(TechType.Disruption_Web, 1200);
        fields.get("energyCost").set(TechType.Disruption_Web, 125);
        fields.get("whatResearches").set(TechType.Disruption_Web, UnitType.Protoss_Fleet_Beacon);
        fields.get("weaponType").set(TechType.Disruption_Web, WeaponType.Disruption_Web);
        fields.get("targetsUnit").set(TechType.Disruption_Web, true);
        fields.get("targetsPosition").set(TechType.Disruption_Web, true);
        fields.get("order").set(TechType.Disruption_Web, Order.CastDisruptionWeb);
        fields.get("requiredUnit").set(TechType.Disruption_Web, UnitType.None);
    }
    private void initializeTechType_Mind_Control() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Mind_Control, 27);
        fields.get("race").set(TechType.Mind_Control, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Mind_Control, 200);
        fields.get("gasPrice").set(TechType.Mind_Control, 200);
        fields.get("researchTime").set(TechType.Mind_Control, 1800);
        fields.get("energyCost").set(TechType.Mind_Control, 150);
        fields.get("whatResearches").set(TechType.Mind_Control, UnitType.Protoss_Templar_Archives);
        fields.get("weaponType").set(TechType.Mind_Control, WeaponType.Mind_Control);
        fields.get("targetsUnit").set(TechType.Mind_Control, true);
        fields.get("targetsPosition").set(TechType.Mind_Control, false);
        fields.get("order").set(TechType.Mind_Control, Order.CastMindControl);
        fields.get("requiredUnit").set(TechType.Mind_Control, UnitType.None);
    }
    private void initializeTechType_Dark_Archon_Meld() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Dark_Archon_Meld, 28);
        fields.get("race").set(TechType.Dark_Archon_Meld, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Dark_Archon_Meld, 0);
        fields.get("gasPrice").set(TechType.Dark_Archon_Meld, 0);
        fields.get("researchTime").set(TechType.Dark_Archon_Meld, 0);
        fields.get("energyCost").set(TechType.Dark_Archon_Meld, 0);
        fields.get("whatResearches").set(TechType.Dark_Archon_Meld, UnitType.None);
        fields.get("weaponType").set(TechType.Dark_Archon_Meld, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Dark_Archon_Meld, true);
        fields.get("targetsPosition").set(TechType.Dark_Archon_Meld, false);
        fields.get("order").set(TechType.Dark_Archon_Meld, Order.None);
        fields.get("requiredUnit").set(TechType.Dark_Archon_Meld, UnitType.None);
    }
    private void initializeTechType_Feedback() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Feedback, 29);
        fields.get("race").set(TechType.Feedback, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Feedback, 100);
        fields.get("gasPrice").set(TechType.Feedback, 100);
        fields.get("researchTime").set(TechType.Feedback, 1800);
        fields.get("energyCost").set(TechType.Feedback, 50);
        fields.get("whatResearches").set(TechType.Feedback, UnitType.None);
        fields.get("weaponType").set(TechType.Feedback, WeaponType.Feedback);
        fields.get("targetsUnit").set(TechType.Feedback, true);
        fields.get("targetsPosition").set(TechType.Feedback, false);
        fields.get("order").set(TechType.Feedback, Order.CastFeedback);
        fields.get("requiredUnit").set(TechType.Feedback, UnitType.None);
    }
    private void initializeTechType_Optical_Flare() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Optical_Flare, 30);
        fields.get("race").set(TechType.Optical_Flare, Race.Terran);
        fields.get("mineralPrice").set(TechType.Optical_Flare, 100);
        fields.get("gasPrice").set(TechType.Optical_Flare, 100);
        fields.get("researchTime").set(TechType.Optical_Flare, 1800);
        fields.get("energyCost").set(TechType.Optical_Flare, 75);
        fields.get("whatResearches").set(TechType.Optical_Flare, UnitType.Terran_Academy);
        fields.get("weaponType").set(TechType.Optical_Flare, WeaponType.Optical_Flare);
        fields.get("targetsUnit").set(TechType.Optical_Flare, true);
        fields.get("targetsPosition").set(TechType.Optical_Flare, false);
        fields.get("order").set(TechType.Optical_Flare, Order.CastOpticalFlare);
        fields.get("requiredUnit").set(TechType.Optical_Flare, UnitType.None);
    }
    private void initializeTechType_Maelstrom() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Maelstrom, 31);
        fields.get("race").set(TechType.Maelstrom, Race.Protoss);
        fields.get("mineralPrice").set(TechType.Maelstrom, 100);
        fields.get("gasPrice").set(TechType.Maelstrom, 100);
        fields.get("researchTime").set(TechType.Maelstrom, 1500);
        fields.get("energyCost").set(TechType.Maelstrom, 100);
        fields.get("whatResearches").set(TechType.Maelstrom, UnitType.Protoss_Templar_Archives);
        fields.get("weaponType").set(TechType.Maelstrom, WeaponType.Maelstrom);
        fields.get("targetsUnit").set(TechType.Maelstrom, true);
        fields.get("targetsPosition").set(TechType.Maelstrom, true);
        fields.get("order").set(TechType.Maelstrom, Order.CastMaelstrom);
        fields.get("requiredUnit").set(TechType.Maelstrom, UnitType.None);
    }
    private void initializeTechType_Lurker_Aspect() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Lurker_Aspect, 32);
        fields.get("race").set(TechType.Lurker_Aspect, Race.Zerg);
        fields.get("mineralPrice").set(TechType.Lurker_Aspect, 200);
        fields.get("gasPrice").set(TechType.Lurker_Aspect, 200);
        fields.get("researchTime").set(TechType.Lurker_Aspect, 1800);
        fields.get("energyCost").set(TechType.Lurker_Aspect, 0);
        fields.get("whatResearches").set(TechType.Lurker_Aspect, UnitType.Zerg_Hydralisk_Den);
        fields.get("weaponType").set(TechType.Lurker_Aspect, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Lurker_Aspect, false);
        fields.get("targetsPosition").set(TechType.Lurker_Aspect, false);
        fields.get("order").set(TechType.Lurker_Aspect, Order.None);
        fields.get("requiredUnit").set(TechType.Lurker_Aspect, UnitType.Zerg_Lair);
    }
    private void initializeTechType_Healing() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Healing, 34);
        fields.get("race").set(TechType.Healing, Race.Terran);
        fields.get("mineralPrice").set(TechType.Healing, 0);
        fields.get("gasPrice").set(TechType.Healing, 0);
        fields.get("researchTime").set(TechType.Healing, 0);
        fields.get("energyCost").set(TechType.Healing, 1);
        fields.get("whatResearches").set(TechType.Healing, UnitType.None);
        fields.get("weaponType").set(TechType.Healing, WeaponType.None);
        fields.get("targetsUnit").set(TechType.Healing, true);
        fields.get("targetsPosition").set(TechType.Healing, true);
        fields.get("order").set(TechType.Healing, Order.MedicHeal);
        fields.get("requiredUnit").set(TechType.Healing, UnitType.None);
    }
    private void initializeTechType_None() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.None, 44);
        fields.get("race").set(TechType.None, Race.None);
        fields.get("mineralPrice").set(TechType.None, 0);
        fields.get("gasPrice").set(TechType.None, 0);
        fields.get("researchTime").set(TechType.None, 0);
        fields.get("energyCost").set(TechType.None, 0);
        fields.get("whatResearches").set(TechType.None, UnitType.None);
        fields.get("weaponType").set(TechType.None, WeaponType.None);
        fields.get("targetsUnit").set(TechType.None, false);
        fields.get("targetsPosition").set(TechType.None, false);
        fields.get("order").set(TechType.None, Order.None);
        fields.get("requiredUnit").set(TechType.None, UnitType.None);
    }
    private void initializeTechType_Nuclear_Strike() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Nuclear_Strike, 45);
        fields.get("race").set(TechType.Nuclear_Strike, Race.Terran);
        fields.get("mineralPrice").set(TechType.Nuclear_Strike, 0);
        fields.get("gasPrice").set(TechType.Nuclear_Strike, 0);
        fields.get("researchTime").set(TechType.Nuclear_Strike, 0);
        fields.get("energyCost").set(TechType.Nuclear_Strike, 0);
        fields.get("whatResearches").set(TechType.Nuclear_Strike, UnitType.None);
        fields.get("weaponType").set(TechType.Nuclear_Strike, WeaponType.Nuclear_Strike);
        fields.get("targetsUnit").set(TechType.Nuclear_Strike, true);
        fields.get("targetsPosition").set(TechType.Nuclear_Strike, true);
        fields.get("order").set(TechType.Nuclear_Strike, Order.NukePaint);
        fields.get("requiredUnit").set(TechType.Nuclear_Strike, UnitType.None);
    }
    private void initializeTechType_Unknown() throws Exception {
        Class<?> c = TechType.class;
                Map<String, Field> fields = Stream.of(c.getDeclaredFields()).collect(Collectors.toMap(f -> f.getName(), f -> {
            f.setAccessible(true);
            return f;
        })); 
        fields.get("id").set(TechType.Unknown, 46);
        fields.get("race").set(TechType.Unknown, Race.Unknown);
        fields.get("mineralPrice").set(TechType.Unknown, 0);
        fields.get("gasPrice").set(TechType.Unknown, 0);
        fields.get("researchTime").set(TechType.Unknown, 0);
        fields.get("energyCost").set(TechType.Unknown, 0);
        fields.get("whatResearches").set(TechType.Unknown, UnitType.Unknown);
        fields.get("weaponType").set(TechType.Unknown, WeaponType.Unknown);
        fields.get("targetsUnit").set(TechType.Unknown, false);
        fields.get("targetsPosition").set(TechType.Unknown, false);
        fields.get("order").set(TechType.Unknown, Order.Unknown);
        fields.get("requiredUnit").set(TechType.Unknown, UnitType.None);
    }
}
